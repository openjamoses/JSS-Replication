b25bd54fa244a01f040bb34c11a9781ea92a6e00|2020-09-25|Alexey V. Akimov|Misc changes
b4b407ef4a53d41f5d93d285fae055e1828bfd8e|2020-09-22|alexvakimov|Merge pull request #95 from bsmith24/devel
295cc0ee1a4c4faeebc8f4a6bc527b6f571c77fd|2020-09-21|Brendan Smith|Updating the module name
58d2f2d24537a90be14b92097b8f02e63430c981|2020-09-21|Brendan Smith|Fixing small bugs in the code that came about through file transfers. Also updating the naming convention to be more general
1b29653e79971c31bebdf02a8dfef5602bcf67d9|2020-09-11|alexvakimov|Merge pull request #94 from MohammadShakiba/devel
e8014eddaef89fd8753aaab2b6ba5d2eca9893c6|2020-09-11|Mohammad Shakiba|Merge branch 'devel' into devel
cf7e3d0dcb7fe5fb2259929aaec048f7631e8d80|2020-09-11|Mohammad Shakiba|Rename step2_many_body.py to step2_cp2k.py
00f1741b752b69aa11885948853842b50db4a73f|2020-09-11|Mohammad Shakiba|Update data_visualize.py
36f831b1015136c0c13e34e6918b74a1271a4e53|2020-09-11|Mohammad Shakiba|Update step2_many_body.rst
bf5ce7da94c8dbda8909a20f663741ef2033cff0|2020-09-11|Mohammad Shakiba|Update libra_py.rst
d286aea58fff1807166d4f54f759b7e42dcacc57|2020-09-11|Mohammad Shakiba|Update step2_many_body.py
ec5b8d22aebf5308e3d2125a4eecdcdbe46abbdf|2020-09-11|Mohammad Shakiba|Update Gaussian_methods.py
38c5b89f0e12464890b0aa311bcf9c4bcb2f8b57|2020-09-11|Mohammad Shakiba|Update data_visualize.py
5a6c5a325990d53c66b7a10466ce9e01e3c787cb|2020-09-11|Mohammad Shakiba|Update CP2K_methods.py
ab65268f54151dde45c5a4a66f39810d6b23e6da|2020-09-11|Mohammad Shakiba|Update step4.py
5b764692870f0e27183d779bf9ecb2a78218189d|2020-09-11|Mohammad Shakiba|Update mapping.py
b61f6b427587df59b81522bad056c4d2e086eb3e|2020-09-11|Mohammad Shakiba|Update step2_many_body.py
98ad154d3fe1c05e7f6577c12defae27cc2ea10c|2020-09-11|Mohammad Shakiba|Update step2_many_body.py
73bdaf7ba2fd79fbebb6e2267b95d6f8a617103f|2020-09-11|Mohammad Shakiba|Update step3.py
69c7ebe526eb0228f106b5bf8fcb18a8a57327e0|2020-09-09|Mohammad Shakiba|Create Gaussian_methods.rst
105d4eabddfeaea4653ea1345dbf5fac9a4644f1|2020-09-09|Mohammad Shakiba|Rename step2_cp2k.rst to step2_many_body.rst
6d92202d2a30cf6a5bd8f48764fed6f0ddf4d890|2020-09-09|Mohammad Shakiba|Update nbra.rst
0ff1047f6dabc824fed5ad692b59abbaed869a87|2020-09-09|Mohammad Shakiba|Update nbra.rst
91c32dde82db3b1a4e52834b550a6a59308fee7c|2020-09-09|Mohammad Shakiba|Update cube_file_methods.py
f15e8df80185999504aa1dbaf787a6c1ce1deaf8|2020-09-09|Mohammad Shakiba|Rename step2_cp2k.py to step2_many_body.py
9b560452b5cc062f738bf420391ef397f53866e5|2020-09-09|Mohammad Shakiba|Update __init__.py
50e3ec93c3d0ef60d792b864bd6b734a2b08e554|2020-09-09|Mohammad Shakiba|Update Gaussian_methods.py
5c87f74fd6fb93af0410bb22dc2ec8c7f377a9c0|2020-09-09|Mohammad Shakiba|Create Gaussian_methods.py
b8dc59e7eb640ec6b8c65ad5cec72764f0162cd9|2020-09-09|Mohammad Shakiba|Update __init__.py
13f53ec82b394bc003453931616266cf96925bab|2020-08-28|Alexey V. Akimov|Added a new model Hamiltonian - of the Parandekar-Tully type
0a71dc9079c918328084c211f096ddd8f9470be4|2020-08-27|Alexey V. Akimov|Reintroduced the use_boltz_factor parameter since it may still be needed in the workflows/nbra modules
bf848f7a7199518b92cc2bdf605f49ff5f2947b1|2020-08-27|Alexey V. Akimov|Revised the documentation and consistence of the parameters used to control the dynamics - now, they are consistent in C++ (dyn_control_params) and Python (tsh-compute) modules
5ec0fe992f66a65497bab8a64dded1aabcf87327|2020-08-27|Alexey V. Akimov|Removed the NBRA tutorial - the new, revised one is in the compchem-cybertraining repo now
e047f9627d6e1ae86b35be9fada26a1cfc80787b|2020-08-25|Alexey V. Akimov|Modularized the plotting functions for the TSH dynamics and prettified the resulting plots, so they are of acceptable quality now
c3148a38ded779c16f60a78a4e0358d9ae865ce5|2020-08-23|Alexey V. Akimov|Changed the format to plot the adiabatic-to-diabatic states projections in the plot_surfaces
4c5ebc72e6c04201aa9155e37e777dd1818dff58|2020-08-21|Alexey V. Akimov|Enabled passing the time-overlaps to the Hamiltonian from the external sources, this can be done both for adiabatic and diabatic time-overlaps, fixed a bug in computing St in the compute.py which was inconsistent with the way the St was computed internally, now they are consistent. Added the time_overlap_method parameter to the dyn_control_params to choose whether the time-overlap shall be computed on-the-fly or read from external sources. Enabled the use of the phase_correction_tol parameter - previously it was there, but wasn't used by the Dynamical module. Fixed a minor bug in the plot_surface function to make the size of the input _all_cordinates variable consistent with the ndofs parameter provided
f673b5cad7bb450a640594e1b16a83f126efee9f|2020-08-20|alexvakimov|Merge pull request #92 from bsmith24/devel
9a7a818604340710a468d2bb0e50ca836170e5e8|2020-08-20|Brendan Smith|Made state reordering and phase correction functions for NON-spin-block matricies. For example, the Slater determinant and Many-body bases are not in spin-block format
67501ea894269d9a67a177d74c1a1c0c6c999088|2020-08-18|Alexey V. Akimov|Added the possibility to distinguish the quantum (TSH) and classical DOFs in the dynamics module, enabled constraining arbitrary nuclear DOFs in the dynamics, enabled coupling of arbitrary DOFs to a thermostat in the dynamics. New dyn control parameters introduced to control of the above. The plot_surfaces function is generalized to enable the surfaces to be plotted even for multidimensional Hamiltonians
c7439cee359fa5a7647e158136ba2186e5221496|2020-08-12|Alexey V. Akimov|Edited the stochastic state tracking functions - to fix some known problems, a potential bug with the normalization in 32, and the code style
00bcab40a53313ead0462e259eb033dfaa0812c5|2020-08-11|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
7b8b3efb4362b0009ff7b440a80d8810de16d7a9|2020-08-11|Alexey V. Akimov|Changed the way to compute NACs for the degenerate states
53eb265476bf60e4e9c221c226811497c6bc2026|2020-08-11|alexvakimov|Merge pull request #91 from storytemen/devel
9c10600d18b4d47b82bce7c0fc2b976783b40115|2020-08-11|Story Temen|changed get_stochastic_reordering3's logic
f24a4e9cc90930753e5791c13ed9997dcba025b4|2020-08-11|Story Temen|Adjusted latest stochastic state tracking algorithm to correctly reiterate if states inconsistant.
bf01a1c61f7ac87c0675527e08a90460ab7e9f67|2020-08-10|Story Temen|Added stochastic state tracking algorithm that checks for consistancy at the end instead of eliminating possible state changes along the way.
1a4501a0ac6430d17dbbba3f6d58ffba52347a5a|2020-08-09|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
6f54eedf8ca30c88eacdd684af434e429130355f|2020-08-09|alexvakimov|Merge pull request #90 from storytemen/devel
e15dbd0538cd6324b8c2ef2ade4c74a4c58498b6|2020-08-09|Story Temen|Made minor changes to new stochastic algorithm.
e64468c73945bca0c92106b1bd777602e53f344a|2020-08-09|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
efac987866a69734e698b0a4a6b1390c9766897f|2020-08-09|Alexey V. Akimov|Added a new Holstein-like model
501fb739f525cf5cabe45f958b1cc153cd716440|2020-08-08|Story Temen|Added new stochastic state tracking algoithm
4f19f8e98479c8a7fb0c2837c480eeea062af80f|2020-08-08|alexvakimov|Merge pull request #89 from storytemen/devel
f0cb0d2d3dab4a00cc834ba3516bd9e88e8b4f57|2020-08-07|Story Temen|Changed vectors to be called by reference in permutation generation function
4adab9cb7e02ceb11b09bae99dd528fc033f8ed2|2020-08-07|Story Temen|Added permutation generation function.
cc8224f7175ae506ecdee09ef87c05a48003bfa9|2020-08-06|Alexey V. Akimov|Fixed a bug with incorrect calculation of the E_NHC in case of multiple trajectories
846ca25bf54dfd406e1018d6954fda78e77d7cce|2020-08-05|Alexey V. Akimov|Added the plotting function for 1D data produced with TSH calculations and in other situations
7cfd1ed0ac22be317d3670a8b335b3da46a71007|2020-08-04|Alexey V. Akimov|Added the option to sample decoherence events from Poisson distribution - meaning the wait times between the events are distributed according to the exponential distribution
68e7dfb2c0d562032278b84cf66b6914d4a792b2|2020-08-04|Alexey V. Akimov|Added step2_cp2k to the __init__ file
9c7554ff41b5335599495a1708e783994ec9c84a|2020-08-04|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
ac2a0600401ee8910414b809ef5ae3d1474760f4|2020-08-04|Alexey V. Akimov|Reimplementation of the DISH - now, it should be correct, but still need some validation. Also, generalized the hop acceptance function to only consider particular trajectories of interest
0a13a52846349029516ae92267e1bb8613bdde96|2020-08-04|Mohammad Shakiba|Create step2_cp2k.rst
cd23f2b37668ad9a5408731ec081b8154634e90f|2020-08-04|Mohammad Shakiba|Update nbra.rst
38051f4a4c3dd0ace6ca86da42816974aa597d80|2020-08-04|Mohammad Shakiba|Create CP2K_methods.rst
ac617f6abb1436033cb19ec511674bde676f3efe|2020-08-04|Mohammad Shakiba|Create cube_file_methods.rst
0ea9174ae14387a3ea6427f9d41d59f98ef57199|2020-08-04|Mohammad Shakiba|Update libra_py.rst
c45311678ad95b92be94db7841edd6193cdc29e0|2020-08-04|alexvakimov|Merge pull request #86 from MohammadShakiba/devel
f95d30b08a1d8909e0444613ba0cbeb8d81b8459|2020-08-04|Mohammad Shakiba|Update step2_cp2k.py
2d44c99dd2d0dbd1a3456b143446779d2a222dae|2020-08-04|Mohammad Shakiba|Update step2_cp2k.py
f5eab89107d9f349aea6cd023d5d16e5ebd41c93|2020-08-04|Mohammad Shakiba|Update step2_cp2k.py
ac823709b4e40eef16a428ff0bb6b16be7b950b5|2020-08-04|Mohammad Shakiba|Update __init__.py
d10b119579db4486776ece51c50ed8c6b62b8818|2020-08-04|Mohammad Shakiba|Update step2_cp2k.py
4e6f23f424a2a5637ead44497196ec09eeb18c52|2020-08-04|Mohammad Shakiba|Update CP2K_methods.py
2e7f8c327db168dd80509ec48d37e71e7b456c7d|2020-08-04|Mohammad Shakiba|Update CP2K_methods.py
5e965e4c33af0e46261bb75138c90f5ee31a46d8|2020-08-04|Mohammad Shakiba|Rename src/libra_py/auxiliary_functions.py to src/libra_py/workflows/nbra/step2_cp2k.py
a0c8c327e9e345b347e986fd8e076dbecf55837c|2020-08-04|Mohammad Shakiba|Update auxiliary_functions.py
73c17686be89d8a6cf6c5a3d34fe3a78dc18ce4a|2020-08-03|Mohammad Shakiba|Update cube_file_methods.py
6ee3f31842af35229174e66540562ded3eb2d64e|2020-08-03|Mohammad Shakiba|Update CP2K_methods.py
c3601c27552479ab6c01776ebfbe8bbf69ad8fc8|2020-08-03|Alexey V. Akimov|Added a new parameter to the sdm function to allow the old active population to be slightly more than 1, to account for the fact that the TD-SE integration is numerical so some fluctuation of the computed norm may be reasonable to expect
85e94af1c911c88005f0400fcd9eaf8cff4a564a|2020-08-02|Mohammad Shakiba|Update data_conv.py
cedee0624e3f80c7fc9dc6e8960cb65b8512d63c|2020-08-02|Mohammad Shakiba|Update data_conv.py
fbf8101289b1de02f9c0e5a5cab77608cf03e5c2|2020-07-29|Mohammad Shakiba|Update __init__.py
af02688c02d9688fe160fce5c70eaadbfc2db0d2|2020-07-29|Mohammad Shakiba|Create auxiliary_functions.py
fd0dd23c074601ad65abe5b00290b3f805fe5491|2020-07-29|Mohammad Shakiba|Update cube_file_methods.py
c388866e54629510ba1bc29ff463164865115ea4|2020-07-29|Mohammad Shakiba|Update data_conv.py
407ad239219db89f02795900d8704cdcb8104a8e|2020-07-29|Mohammad Shakiba|Update CP2K_methods.py
ef550e14836465bed89c1305db0128cda8ddd81f|2020-07-27|Alexey V. Akimov|Changed the url of the source to get the miniconda from - this should fix the build
517bfd846e5ec6ae23422a310176452b7b9683ff|2020-07-27|Alexey V. Akimov|Trying to fix the pip installation in the TravisCI
6592846f7ee4243ecd35da1a3a0908e9a156bfa9|2020-07-27|Alexey V. Akimov|Trying to fix the pip installation in the TravisCI
f0eb1857d5918519baad4eaf7e955922ad4eff49|2020-07-17|Alexey V. Akimov|Added a function to compute pDOS from the Libra-native electronic structure calculations, such as EHT
07e114212858f706a8643250a0c373012d51add2|2020-07-17|Alexey V. Akimov|Minor text fixes
8b9e3b0befa7e8fa34a7a2e8073c42a20063ae56|2020-07-17|Alexey V. Akimov|Added some meta-info
444f22d570172f4fbdfef68aaa5251f4d8016587|2020-06-28|Alexey V. Akimov|Added the Gaussian kernel algorithm for smooth approximation of probability density distributions of random sets of points, so far only for 1D. Mix corrections.
d4ff19c92894698b4ac22d62286f6a79061d87a1|2020-06-18|Alexey V. Akimov|Revised the copyright headers
be95d394d1550a1686438efe9036755244b01e0f|2020-06-18|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
bf08630bc86d595bfe968bcec0e16e7e612f0d25|2020-06-18|alexvakimov|Merge pull request #80 from storytemen/devel
c685043681fa570d00e42b3303deae1562206209|2020-06-18|alexvakimov|Merge pull request #81 from bsmith24/devel
64fbe2bb9344d87f9d930cbd3726873b8801ef8c|2020-06-18|Alexey V. Akimov|Removed a whitespace in front of def
8ab33c263b868d461ad81f8e0180b2ee5b6a5bef|2020-06-18|Brendan Smith|Added a function to libra_py's data_conv module that converts Libra's MATRIX objects to numpy arrays. This function also works for CMATRIX objects as well.
5f5e99275ec39802760f7632e32460d97302242f|2020-06-18|Story Temen|Added third Holstein model that allows coupling between non-adjacent states.
94c4c346e6323bd9b97fe3e7a3f460aaf21d0879|2020-06-17|Alexey V. Akimov|Edited the copyright notices and changed the file mode
8ae7b027157fb72e698fc5fab5d3c05a776f3c69|2020-06-17|alexvakimov|Merge pull request #79 from bsmith24/devel
32b7d5afb3cffc6be20ee4890eb3c57bea0cc0a3|2020-06-17|Brendan Smith|Setting sanity check for multiple data
cef208edaa29b5cd657c602c6deb899fca99fd1a|2020-06-17|Brendan Smith|Adjusting option for extra data set
c81b13ddf88a27f07e64b612bf53b08875ded310|2020-06-17|Brendan Smith|Added another option to the libra_py/data_visualize module for plotting heat maps with numpy. This function is somewhat general and can include many subplots
8b004480629861cbb216d1635cdaeae54b08af24|2020-06-17|alexvakimov|Merge pull request #78 from bsmith24/devel
331fbaf54d6cd194711b28d745ed9ef64138eaf2|2020-06-16|Brendan Smith|Added a feature that allows for using the minimal SD basis when computing SD overlaps
f10a6cdb0585f377eab5178286a24e085fff8f6b|2020-06-15|alexvakimov|Merge pull request #77 from MohammadShakiba/devel
c5d75d0da071d8b8299d277702ae23ff2e452cff|2020-06-15|Mohammad Shakiba|Update data_conv.py
f0f8cf6122c31bfa7097871ffb7e207e0269e744|2020-06-15|Mohammad Shakiba|Merge branch 'devel' into devel
faee6c7d3eed052755a4d4ad90abcdf1cdb9b0bb|2020-06-15|Mohammad Shakiba|Update CP2K_methods.py
1a485e479e1a6d1623c3e992f3ad8ded5e3b43a8|2020-06-15|Mohammad Shakiba|Update data_conv.py
fdc13a31e920ea5b95daf84eea162bcb19c55e99|2020-06-15|Mohammad Shakiba|Update cube_file_methods.py
75b176a3542985a73c0991bc46d91464768e4191|2020-06-15|Mohammad Shakiba|Update __init__.py
a3fdf65d447b3b1fdc649312a83ec5986c72e5f1|2020-06-15|Mohammad Shakiba|Create CP2K_methods.py
e8162f018191e9f367354db3711d6381fbfd7d1c|2020-06-15|Mohammad Shakiba|Update cube_file_methods.py
b0bdf869a7fff82acbfa5ced8de78210433ac2b8|2020-06-15|Mohammad Shakiba|Update cube_file_methods.py
9fee4b19f181e6203299aa22dbcf3f9f30bc3051|2020-06-15|Mohammad Shakiba|Update cube_file_methods.py
7425a4e8f5eae86cd575b93c543ef8c7aa585152|2020-06-12|Alexey V. Akimov|Added some more properties to be returned by the DFTB methods Hamiltonian compute function, added recipes for adiabatic MD with atomistic codes, added function to read HDF5 files generated by Libra compute_dynamics in TSH so to visualize the MD trajectories, added several auxiliary functions
a15eef9a7742388bb82e74e08b63bbd9bc3aa23f|2020-06-12|Alexey V. Akimov|Commented out some deprecated control parameters for the dynamics
3a75f1e6caa0824cc67d27ad5b63fc3f4b485ef8|2020-06-11|alexvakimov|Merge pull request #75 from bsmith24/devel
a8102c5b140bb471ea0cbc96afbf7518799be1fd|2020-06-10|Brendan Smith|Added a function to convert 2d numpy arrays into MATRIX and CMATRIX objects
ba96862d08c73dc8114a3dfd53fa006e9b507cec|2020-06-09|alexvakimov|Merge pull request #74 from bsmith24/devel
fb9a8703ba6a4ed37767ebd8786dfae43a5d8bfb|2020-06-09|Brendan Smith|Updating docstring and fixed a small bug due to copying
0b84a6d47a960f682c9a999a05688cd859ea8f1d|2020-06-07|Brendan Smith|Fixed a bug in workflows/nbra/step4.py when calling mSDM decoherence scheme. Fixed a bug in the workflows/nbra/lz.py module for the case of different initial times. Also added the extend MD option in workflows/nbra/lz.py
0a763e04eddc1e92915f76f1cd06a8bdc0112b76|2020-06-05|Alexey V. Akimov|Some c++ side language fixes - those have been there for a while, not critical, but not all the compilers would allow them. Now it is fixed
8b1768a77f4eebf61177a06a272ce4a8515e4f17|2020-06-05|Alexey V. Akimov|Changed some function names, to stay more consistent and intuitive
ce49d9f515399e0ca5e9c392b33f55872273b005|2020-06-04|Alexey V. Akimov|Added methods for interfacing DFTB+ and Libra. These methods are also detailed in one of the Tutorials in the compchem-cybertraining repo
43d026b538219074c37196e0428a1168df244012|2020-06-04|Alexey V. Akimov|Added the cube_file_methods file
07f0f3c6b589a0de5fba421c333e2cd9e4559e2d|2020-06-04|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
d743158073a49ad356aad823f6b5e08e8769d86f|2020-06-04|Alexey V. Akimov|Generalized the functions in the dynamics_plotting module - now you can use the mapping function to map a 1D scan coordinate onto a transformation of many-dimensional system. Added a module for psi4_libra interfacing
c425c64da09c4854a602ecbf6e7e4b9b5e3e14e3|2020-06-04|alexvakimov|Merge pull request #73 from MohammadShakiba/devel
caed8f2f453cfeb4e8928776db9277c2f3f1d1f5|2020-06-04|Mohammad Shakiba|Update cube_file_methods.py
598ec856cfd5b24a55ae7cd02ad844d32441ed27|2020-06-03|Mohammad Shakiba|Update cube_file_methods.py
a4d3c56ff1a98b05ba5877cdcf87755f5b13e475|2020-06-02|Mohammad Shakiba|Update cube_file_methods.py
30787d9d4496dbe81b6f9f5757b6f97d6a44e618|2020-06-02|Mohammad Shakiba|Update data_read.py
afb98652534678f122a890d0ed9d5a61f9a44743|2020-06-02|Mohammad Shakiba|Rename cube_file_process.py to cube_file_methods.py
5d7eb117b70b2da9b27d831be5eb248fcea2dbae|2020-06-02|Mohammad Shakiba|Update cube_file_process.py
23d8cba6cdbd7eec9965121ea016cbff49524184|2020-06-01|Mohammad Shakiba|Update cube_file_process.py
3cfd300ce5108d6bdea96c47615eb37aba639903|2020-06-01|Mohammad Shakiba|Update __init__.py
5766161cd3f8e580a0eb3ae1975aa3fd0722ad9b|2020-06-01|Mohammad Shakiba|Update __init__.py
b93ba77fe7249495e2e89da0edcd5132a7dfc88f|2020-06-01|Mohammad Shakiba|Update cube_file_process.py
e0412d3c4acdbfdcf69e371eb4d5cf397136e3dd|2020-06-01|Mohammad Shakiba|Add files via upload
f86c8f8f04eba9540fb6f0e09bd8e64b5977d09f|2020-05-29|Alexey V. Akimov|Some fixes in the gwp library, and the data_visualize modue. Added new function and revised the existing one in the dynamics_plotting module.
5afc526f33fa700b4bbdcebf9f1076f26ed69e4a|2020-05-24|Alexey V. Akimov|Generalized the calculation of the matrix elements with Heller-type Gaussian wavepackets
7025fb07e96ef411ad55e53205ff1edfcb136ec6|2020-05-21|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
abd41ec82db4d45d8b77d1acbe5553d1423da0a2|2020-05-21|Alexey V. Akimov|Removed HEOM tutorial from here, now it is in the cybertraining repo
7320cfd5dcda323fd9d5d28aea925bae75000759|2020-05-21|Alexey V. Akimov|Added data_visualize module and fixed a bug in computing  kinetic energy matrix elements with Gaussian wavepackets
180dabc3da2b18b24db859d862b960f21cabed0e|2020-05-20|Story Temen|Made minor change to heom run_dynamics docstring
e0b8e789a65e60f204b2512dddb29cd04dc7248e|2020-05-15|alexvakimov|Merge pull request #71 from bsmith24/devel
436a7ee3ded8f6be42d85f5c886df7157b6c5c4c|2020-05-13|Brendan Smith|Adding functions to step3 NBRA NAMd workflows to handle various processing demands of the data
f957d7f9a6b041c0ab0417098ae94056db97422b|2020-05-11|alexvakimov|Merge pull request #70 from bsmith24/devel
bae65653c9cdc14a750c9e0012c5299847d6783c|2020-05-09|Brendan Smith|Added a function to libra_py/workflows/nbra/step3 that builds a Slater Determinants basis
405f9d6bcd033b912ba89884368ff4c76d6882c5|2020-04-23|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
cdf19717ec7fd01f92c8f20e99719a7340679bd9|2020-04-23|Alexey V. Akimov|Added new covariance function to the special functions, moved one of the tutorials on the dynamics to the cybertraining repo
f0e6a3f38b201cccbe538f60e041461cce6cc589|2020-04-19|alexvakimov|Merge pull request #69 from MohammadShakiba/devel
daf2d752a3d22f48cf81092628b25c112ab3bc3c|2020-04-19|MohammadShakiba|Update data_read.py
5a03929598f82dbeae8db72a1ea999eda0adea30|2020-04-19|MohammadShakiba|Update data_read.py
c70e2287baa82896eacee87166f6df815c53b363|2020-04-19|MohammadShakiba|Delete CP2K_methods.py
6b10db5eeb9545d1427b606644afd166191c1381|2020-04-19|MohammadShakiba|Added CP2K_methods.py
92a47812529d6c585962f9e8f3cf5a0834479797|2020-04-16|Alexey V. Akimov|Removed the tutorial that is now on the cybertraining site
72ac2a5f7d2081bae9920e545db63791d66f236a|2020-04-12|Alexey V. Akimov|Fixed the degrees of freedom setup in the thermostats
efcb400d6d4c50793c7f2d4aa1bf1beceb72fc4d|2020-04-12|Alexey V. Akimov|Fixed the inclusion of the Nose-Hoover chain thermostats in the dynamics, both in C++ and Python levels
75b27ff8d26697d7cc311c446f4e7ad62d12a087|2020-04-11|Alexey V. Akimov|Added the initialization of the thermostat variables for the NVT runs
989b213397c4b705a8cb2327ae95e891a05ba85e|2020-04-11|alexvakimov|Merge pull request #67 from bsmith24/devel
5cfd9ddb8f4b874a04bd7318293cd39b13095e9f|2020-04-11|Brendan Smith|Updated the computation of forces to account for multiple degrees of freedom.
66373ed309b03239a7d54501cb8b072061087de2|2020-04-01|Alexey V. Akimov|Moved the opt and diis examples to the cybertraining
e37445850e154769530a2a540a7a3fe06e825708|2020-04-01|alexvakimov|Merge pull request #66 from bsmith24/devel
b899b87808242b1b8fa8ad989156c3a5f98303f4|2020-03-31|Brendan Smith|Added functionality to compute pDOS for SOC scf calculations. Cleaned up the function to compute pdos
2cc5748b16e53af17f6d7d5c3650223ca05bc941|2020-03-30|Alexey V. Akimov|Added the testing cases for workflows_nbra
6ae12051f0a17f1c4d94b47773b1c6c6eb1f55d3|2020-03-30|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
844d700997ffd10d8be96c44a406d3f6eb94b38f|2020-03-30|alexvakimov|Merge pull request #65 from bsmith24/devel3
d23d925c8656567a1adbbe25fd41cfa8c5a0d5f3|2020-03-30|Alexey V. Akimov|Removed the Example17_integrators and test_vector to present them as more complete tutorials in the compchem-cybertraining collection
cff5e9a2fd479b82ee1a64deb46b453d24703443|2020-03-30|Alexey V. Akimov|Fixed some type conversion problems with the matrix template
4af2147b647486e8a25d21a6b2a7807502517bc7|2020-03-30|Brendan Smith|Added simple tests for the NBRA workflows module
b1639ef55506e9e55a1e19fc5770ff563ad2beab|2020-03-27|Alexey V. Akimov|Revised the HEOM code, made the generation of the hierarchy much more efficient and less memory-consuming, cleaned up the code - removed all the deprecated stuff, SOME FUNCTIONS ARE NOW RENAMED, but this is also reflected in the corresponding Python modules, revised the tutorial and example to make sure it works and removed examples that use deprecated functions. Revised the IMATRIX and base_matrix data types, upladed the copyright dates and license in the files in the math_liblinalg, distributed some of the functions previousely defined in HEOM to the util library, where they are much more logical, added some new types exported to Python
ccfd95b3c199c0224cca168d36cb4f242fbbe94b|2020-03-20|Alexey V. Akimov|Removed an example on Rigid body setup. Please see the updated tutorial in the Compchem-Cybertraining
ab77456b691e31c4753da167a9076270f00f9570|2020-03-20|Alexey V. Akimov|Added an auxiliary function to print out matrices
71fec4be49df1642f116246a70d3bce6e0a9d919|2020-03-17|alexvakimov|Merge pull request #62 from bsmith24/devel2
ca0f1b7c2d6c0df758d6edfa3ee6206b4300d9ee|2020-03-14|Brendan Smith|LZ module now returns the same number of data regardless of whether or not probabilities are to be returned. Conditionals in the adjust_SD_probabilities function are removed. The documentation in this function is improved.
9417a454058564569b6ae235dfcedacdfd220675|2020-03-13|Brendan Smith|Added the functionality to the workflows/nbra/lz module to allow for biasing NA transitions for types of Slater determinant states. Also added an option to return the computed NA probabilities.
1df716b9aa677e2e90a7007fb720c163cc200438|2020-03-11|Alexey V. Akimov|Some corrections and in the HEOM module, revised the tutorial and exaplained what is going on in it in more details, the calculations now agree with the reported results
ab70c3608b115c27364ad91bfa80616f92ea1958|2020-03-05|Alexey V. Akimov|Fixed a bug in the scaled HEOM code and updated the tutorial to show the calculations with the scaled HEOM
e410eb60e28ee669cc4bd00379b02b2b938745e9|2020-03-02|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
da5f3c0e92bdb77a513bdf76f53a54f845dbe821|2020-03-02|Alexey V. Akimov|Important fixes in the tsh code to make suure we clearly distinguish the dynamically-consistent and raw variables
8e06005eb4eba92147e32145909499b02ef2fabb|2020-02-28|alexvakimov|Merge pull request #61 from bsmith24/devel2
14859d9ecc0d94714f87ff3eee8eeb6161c61c37|2020-02-28|Brendan Smith|Fixed a bug in the use of the single best Slater determinants with dftb+, they needed to be sorted due to potential degeneracies. Also added an option to track the excitations.
a010aaa3221b3e1606a8d19442a1f841e7603489|2020-02-27|alexvakimov|Merge pull request #60 from bsmith24/devel2
6eb65be50416b68f612c71fa49fed3e38a0d7a40|2020-02-27|Brendan Smith|Using the sqrt() of std::norm in computing phase corrections. Added a comment regarding this.
65e560843547ddef557948f6a4464819cc36cb62|2020-02-25|Alexey V. Akimov|Revised the spectrum calculations notebook and added a new FT function to libra_py
dad72e4c63e8f2b9a73fd1cf2c6d8f6b86f0ef47|2020-02-24|Alexey V. Akimov|Fixed the parallelization bug
ccbbdcaa1db17f660a376a159a77c4900ccac542|2020-02-24|Alexey V. Akimov|A rather massive update - a lot of revision of the HEOM module, added new functions to create the hierarchy, revised the calculations backbone, changes in indexing of some variables as well as the way to store them, revised tutorials and added some auxiliary scripts for testing purposes. Have spent a lot of time to figure out the scaling approach - it doesn't work for some reason, well at least for the parameters used. Likely one could use it only for larger reorganization energies and higher Matsubara amplitudes. Also, in this commit - added new data type - the integer matrices
cae652bb68d149225d90687812efc0d3e54789a2|2020-02-19|Alexey V. Akimov|Updated the HEOM code
eb5310025fa173999237bfadf02b4016ee9188fe|2020-02-17|alexvakimov|Merge pull request #59 from bsmith24/devel2
73d9fb6d036c9dcbc0ebe2cc8b747a21713ced3c|2020-02-17|Brendan Smith|Clarified a conditional regarding nspin and kpoints in step2.py. Clarified changed in QE_methods.
5ccf1006285d12b789a96893178bde09b57032e8|2020-02-17|Alexey V. Akimov|Made some of the options in the HEOM calculations controllable, generalized the type of the electron-phonon couplings allowable, revised the tutorial, documented the HEOM module
669228c489e7da383fcd8b20f85e2bad4a1cdc78|2020-02-12|Brendan A. Smith|Fixed some bugs in the code. In some place, functions were being called that were not longer defined. Minor bugs in other places. Also, more documentation and descriptions were added. Variable names were also made more descriptive where needed.
4fd7f9eb35c27ccb589bb351cb7aab7244c046bf|2020-02-11|Brendan A. Smith|Added more comments and verbosity options to the nbra/step2 module
6b2cbe974d3b76eaecf33c5b2d4dbce6bf07fa03|2020-02-11|alexvakimov|Merge pull request #58 from bsmith24/devel
f564dd83196dc54ab1a1b1c0134f7ceb8e098662|2020-02-10|Brendan A. Smith|Deleted heom in the __init__.py, as the module is not created yet
3fb5201910a5448b2ae11a4f8f1a8c009c1b8ce8|2020-02-10|Alexey V. Akimov|Added control of the number of threads in the HEOM calculations as well as a timing, fixed Ehrenfest recipes module inclusion
307a9755e3e6956c9a8c4d96b58d367520e69587|2020-02-06|Alexey V. Akimov|Updated devtools environment
64bb4189aca909982cda8bd152edf8a42ce8dd3c|2020-02-06|Alexey V. Akimov|Revised the Python doc generation files, revised the Travis-CI instructions, other minor fixes
12bf7a899e85c700e1a9bf699cdf038e9c757a74|2020-02-06|Alexey V. Akimov|Updating the development tools and packaging setups
5741b6f7b57999e605e99438cda24c571b0795af|2020-02-06|Alexey V. Akimov|changed the extension of the conda environment file
781d3c4eeee07629dd9dd4d8c6a89fe1965480e9|2020-02-06|Alexey V. Akimov|Added parallelization in HEOM, refactored dynamics modules, revised the corresponding tutorials - for TSH, HEOM, and exact, Added Tutorial on the savers classes, although it not yet a final one
1bd7fa8caecabd218f14f32007e990eefb10bb02|2020-02-03|Alexey V. Akimov|Some style edits in the recent update in the dftb+ module
2805d20685a63d04a040cc42d82bd744b86b73b8|2020-02-03|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
2cc62ef0400914fc0603334391db20dc4d9c3561|2020-02-03|Alexey V. Akimov|Added OMP parallelization to the HEOM code
f1b7d7df9b464079a9db212d8a962eec15cba2d0|2020-02-03|Alexey V. Akimov|Updated travis CI script
0b9674aee1f9184d5c2655665f3bc6b43764cd9a|2020-02-03|alexvakimov|Merge pull request #57 from bsmith24/devel
29320df4b1f646b69036af859dd2812a91cfab60|2020-02-02|Brendan A. Smith|Corrected the Copyright information, also added an option to use the energies for multi-configurational states as just the dominant single particle excitation for that configuration
a9ba8e08aad0f533a41c0984344704d3c5ad9a7e|2020-01-30|Brendan A. Smith|Added the option to use td-dftb energies in NBRA-LZ dynamics. Also implimented an option that allows users to use energies from the midpoints (E = 0.5(E_prev - E_curr) or directly from the current step E = E_curr)
70b8b4af3657da66fb5f472c95521364542d46a6|2020-01-30|Alexey V. Akimov|Added more docs, revised them too, added some of the MolSSI cookiecutter stuff
27b8934944340a754580e4b962b18554f16e9057|2020-01-26|Alexey V. Akimov|A lot of changes in the printing out of the results of TSH and exact dynamics calculation, now HDF5 files can be written much faster
7343c675ca45fe037cdd9fc54aebf4cb39f77688|2020-01-13|Alexey V. Akimov|Significantly extended the functionality of the exact dynamics module, added Colbert-Miller DVR, optimized integrators, tested them, developed new tutorials and tests
8ea00f67c33a7d0d252254e66e9d7b1622ac182d|2019-12-29|Alexey V. Akimov|Added Colbert-Miller DVR for computing action of the kinetic energy operator on the wavefunction. It works, but SOFT is still the way faster, probably becasue the Colbert-Miller method implementation is not optimized. Added the corresponding tests-examples. Corrected some code of the Holstein Hamiltonian - the Python 2 syntax was still there in couple places
4ae98ece4099604e07e92af82f9eeeed1e108024|2019-12-27|Alexey V. Akimov|Fixed the CMake instructions to always find the boost include
f05571b36d60f86ffd36846a670afcaa6114e835|2019-12-23|Alexey V. Akimov|Fixed the bug with p^n calculations in the wfcgrid2 class, updated the corresponding testing example
5b665c48232fd1ad1c79a9221a8a1016d142f3df|2019-12-20|Alexey V. Akimov|Added HEOM module - the refactored and translated version of the original code of Jain and Subotnik. Validated against the original code. Added examples and mini-tutorial
19a90b6435ed6dbcca16b416ca10bad293791771|2019-12-13|Alexey V. Akimov|Added the integrators library. At this point, the Runge-Kutta 4-th order integrator is implemented. A tutorial showing how to use it to integrate Hamiltonian equations of motion is developed
c1c19427f4d10917cddfe9d2fdc04dc0fddc1f8e|2019-12-13|Alexey V. Akimov|Revised the dynamics module to enable the use of the HDF5 format, added functions for plotting the results. Revised the corresponding analysis functions and all tutorials.
bbb1c092a6f190078aecf65fb288c79c32327a86|2019-12-06|Alexey V. Akimov|Ultimate fix to the LZ multistate problem
dcbd6c56094f2ff51ffc6001a2104f49d1eafe30|2019-12-03|Alexey V. Akimov|Fixed another conceptual problem of the LZ method - now it should have better size-consistency, in addition allowed to control whether the hops happen to the adjacent or all states
85c653707060b3c2290f4c913db47646e2254a04|2019-12-03|Alexey V. Akimov|Fixed some math and special cases in the LZ - now it should be working properly when there are large probabilities to go to many states
5e3a3db5638325feab57a094cc075504e16fb498|2019-11-27|Alexey V. Akimov|Fixed DISH implementation, now it makes a bit more sense. Updated the tutorial notebook showing it
8e785e0f94759305cc4a0cc62fb25a0dae4623ea|2019-11-27|Alexey V. Akimov|Additional revision in the LZ module - added more control options and documentation, enabled the hop acceptance corrections at the levels of BL probabilities or in the TSH scheme. Added an example showing how to run the Markov and TSH versions
4ad5ab6d8a3e13fc703563449f9501c65e5294a4|2019-11-27|Alexey V. Akimov|Fixed the LZ hopping probabilities via the correct interpolation scheme, optimized the TSH statistics functions
27295e6ddc20fc452ae25f2755ab936bd26dca06|2019-11-25|Alexey V. Akimov|Added DISH and the corresponding tests, added a fix affecting the SMD line of methods
621d0d0c033e6b6bc061b2f2b46e2cd45e9f4dfb|2019-11-10|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
945e50e2950001a6902ba8dcbfa7e2e5ccb6a68b|2019-11-10|Alexey V. Akimov|Substantial change to the dynamics module - removed a log of redundant or obsolete or otherwise inconsistent code, replaced with much more systematic and structured one. Introduced the concept of projectors - these are new auxiliary dynamical variable that track states identities and phases. Implemented options for decoherence in more systematic way, added new dcoherence schemes or options to compute decoherence times, added a class of control variables that can tune the dynamics, updated tutorials on the dynamics showing execution types with a variety of options. nHamiltonian class now contains only raw properties, all the reordering and phase corrections must be done outside, the remnants will be removed later.
83416c8b3dfa9450ca7c3e5d1d210086422c30f0|2019-10-22|alexvakimov|Merge pull request #56 from bsmith24/devel
d37f40ba6fc086fdb4caba2c09582c0ae971f14f|2019-10-22|Brendan A. Smith|Added flag to control output of workflows/nbra/step2 with quantum espresso. Removed an unneeded indentation in pdos.py.
4d9fd4865031f27ba37e6d940e400c94eee66ba8|2019-10-22|Brendan A. Smith|Commiting additional changes to the libra_py module. Includes small changes needed for using python v3
b139897a8af4c605dac48c1de54e4c2508b88d64|2019-10-22|Brendan A. Smith|Commiting various changes made to the libra_py module
30f06af2e4a80a0d987ea34f5db16083406461cf|2019-10-15|Alexey V. Akimov|Recomputed Tut 4 and 3 with the new dynamics module - needed to turn off the phase correction and state reordering in the NBRA case
fa3be06f511a8ee8a4834f49aad4a1122c2023fd|2019-10-15|Alexey V. Akimov|Added an important correction to the dynamics module such that the total energy in TSH calculations is conserved perfectly - needed to make sure the reorderings are all consistent. This works at least in the on-the-fly non-NBRA version of the code. The test example is added. Also extended Tutorial 4 to add 2 more Tully's models, but need to recompute the results with the new code. Have to go home now - it is getting too late here. Love my family.
a12a30b7d0943bac1fcc1c026e76eee238727694|2019-10-15|Alexey V. Akimov|Refactored printing of the data from the dynamics module, reorganized the dynamics-specific printout functions into a new module, added a function to read these produced files for further processing, added a new Tutorial showing how it all can be used as well as the scattering calculations on Tully model 1. Updated the documentation
7deb1181fa0e48de6260ca6170d6b8ea0f0da79f|2019-10-14|Alexey V. Akimov|Some reorganization of the interface of the dynamics module functions, also refactored their location, added printout of the dia-to-adi transformation matrices, when requested. Added new function to run over different initial conditions, but haven't tested it yet. Updated the Jupyter tutorials to reflect the new changes, adjusted some of the input parameters accordingly. Prettified and better organized the Tutorials. Updated the documentation of the functions in the Python modules, updated the Sphinx doc sources. Updated the README.md file with some principles of the function arguments ordering.
60e8efeb086a91a73162a6a19d1829a2e12a5bdb|2019-10-12|Alexey V. Akimov|Updated the dynamics Tutorial 3
bfb7e4eb30b356ceeef061d17cddea1f12a6af91|2019-10-09|Alexey V. Akimov|Added tutorial showing how to use the dynamics module to run the NBRA-like NA-MD with the input coming from the files. Added a number of auxiliary functions needed to make this possible. Importantly, added the mSDM as one of the practical options to the dynamical algorithm. The tutorial shows FSSH and mSDM withing and beyond the NBRA
ea2b84ca0c804ff3945a40fa8723c4adca87fb95|2019-10-08|Alexey V. Akimov|Revised the dynamics module, added more documentation, also for the Sphinx, added a new module with predefined recipes, added a new Tutorial showing how to use those recipes
a173ac3993014e558e0a4034f4cbd767846a1204|2019-10-07|Alexey V. Akimov|v3.2.0
4f25c8aa566d0c96302299104253ff0bf8b266dd|2019-09-23|Alexey V. Akimov|py docs website - try19
771d208fb1378b89b58759f92309eab4bd8d07ee|2019-09-21|Alexey V. Akimov|py docs website - try18
088c9b8b722768d6fb1c3cbec38f83a34b7ea4b8|2019-09-21|Alexey V. Akimov|py docs website - try17
bf15db36f889054833d4a5188dc61a33b8f962a8|2019-09-21|Alexey V. Akimov|py docs website - try16
3b32d5da9049e07c95554149e69c4e62a1aa5912|2019-09-21|Alexey V. Akimov|py docs website - try15
af71d34be3cdce870389bee0a4ad3e39d0188024|2019-09-21|Alexey V. Akimov|py docs website - try14
922598fab21deb9c46780b9099b878cf174d28ed|2019-09-21|Alexey V. Akimov|py docs website - try13
b5e0c4a86f0414a7d9b929894c6e0d2dc667e83d|2019-09-21|Alexey V. Akimov|py docs website - try12
018c982c262ca5fd65e18fde8e2b1e518a8926c4|2019-09-21|Alexey V. Akimov|py docs website - try11
aa611b88985d5e692ea8dd9f23cc3b16a6728e6c|2019-09-21|Alexey V. Akimov|py docs website - try10
70c96cd2efa65df1dc22af41b1172e296882fca8|2019-09-21|Alexey V. Akimov|py docs website - try9
c605f203dee36c5f386e681349894d4a34cc28d6|2019-09-21|Alexey V. Akimov|py docs website - try8
de7ffe8c2e5698838592ec38901d099ccec99838|2019-09-21|Alexey V. Akimov|py docs website - try7
a038fd2032e773a4bb5de0339aaf34e51eaeec12|2019-09-21|Alexey V. Akimov|py docs website - try6
1a1300cca7d770f759670836a4a943072535aef4|2019-09-21|Alexey V. Akimov|py docs website - try5
67fb27411f1bc1e6ce943fd4a0422cdb7a59897f|2019-09-21|Alexey V. Akimov|py docs website - try4
1caed03327234738c198a385a40262fb8b71a6fe|2019-09-21|Alexey V. Akimov|py docs website - try3
a156ad54d31aea96811f40a2f1b261467c3324c5|2019-09-21|Alexey V. Akimov|py docs website - try2
41f162cf50f8db9b99636e440f2536b1d1adf8c6|2019-09-21|Alexey V. Akimov|py docs website - try1
0cae0939eaf0dba01302d712ef6776a157f89491|2019-09-21|Alexey V. Akimov|Added Python docs, add some restructuring and revised the TSH functions, reorganized the structure of the libra_py module a bit, plan for a consistent website
ac74edb0ade57633a854ab16dcf0c1504498905a|2019-09-18|Alexey V. Akimov|Updated the cookbook
cd79f85776411f9726f87b36ba16ce6f1bcebdae|2019-09-18|Alexey V. Akimov|Initialized the idea of a cookbook for Libra. Updated the gitignore
fbd01f5a91c4f156d4e0d70684cf81e64e853119|2019-09-18|Alexey V. Akimov|Added a new function to handle a variety of dynamical situations - Ehrenfest, TSH, adiabatic MD, both withing NBRA and beyond. This new framework is there but still needs some testing before it should be used. Added misc additions to the libra_py module. Added a nice tutorial on analysis of MD trajectories - this is how we shall make the rest of tutorials - complete and detailed.
5a5b5f5f2e2ec1ca52d16eb9e1bb507a831358d6|2019-09-13|Alexey V. Akimov|Revised interface with ErgoSCF - now added option to use the MOs produced by ErgoSCF, added option to handle spin-polarized and non-polarized calculations. Added other auxiliary functions to deal with ErgoSCF output. Added some additional tests of these functions. Revised the tutorial about step2 calculations with ErgoSCF. Added some minor bug fixed related to Python2 to 3 transition.
d7d4fa6aabb44d3527dc263668824a62d4d7ca86|2019-09-03|Alexey V. Akimov|Revision and updates into the probabilities module
3e877eb16a288360221566b616bac5e91779c101|2019-09-03|Alexey V. Akimov|Added some new stuff into ETHD3 method
c87c013bb32502d3da693161ded217f8ca9b2570|2019-09-03|Alexey V. Akimov|Updated the tutorial
bc9cafc71d7c82d033ef115f3d362ec897748fd4|2019-08-20|Alexey V. Akimov|The original port to Python3.7 - fixed mode of the libra_py modules, revised most of the Jupyter notebook examples, the old examples in the tests directory are still oriented on Python2, so will need revisions. The CMakeLists is now oriented on Python3
affc7a42ff5f63970557c219477a88c706b70ac6|2019-08-09|Alexey V. Akimov|Merge branch 'master' into devel
724ae76fc2f3a3a24c835d379acbc7d58f30c39d|2019-08-09|Alexey V. Akimov|Added some missing files
e8bab110da9a6dc0ad3bed3d48f11e9414ad1879|2019-08-09|Alexey V. Akimov|Merge branch 'devel'
f6a951c6de70d1be94551f32ba6a1bd4d66fefd0|2019-08-09|Alexey V. Akimov|Committed some minor changes into the master before a large update
484fc9ee771090430213a3486232de96df4881ce|2019-08-09|Alexey V. Akimov|A lot of recent changes in various modules - getting ready to more to Python3
046d00d81cc2fb714b80555fcedffef501200742|2019-07-26|Alexey V. Akimov|Added a new version of the on-the-grid exact numerical integration of TDSE. This version is made to be more general - in principle extendable to higher dimentions and new methods like Colbert-Miller DVR. The data and workflow organization are made more logical, intuitive, and modular than before. An example of test script is added
92c98f0d3f0080e5462ad1743e9705ce89cfcd3c|2019-07-21|Alexey V. Akimov|Implemented the hungarian method in c++, made it available for use with the TSH, added options for state tracking in TSH, added parameters in the TSH, removed phase correction from the CMATRIX - it was not useful anyway, adjusted other codes accordingly, moved the reordering calculations from CMATRIX to the dyn folder, added the experimental state tracking procedure and made it available for use in TSH calculations
4da3b4bd94e65d6890bbb9a693f89348d883d6c9|2019-07-07|Alexey V. Akimov|Enabled printing out energies from the TSH calculations function, added new example showing FSSH vs LZ calculations on several Marcus models
f8b20163edf1813ff469ae6a0ae1fd455e486061|2019-07-06|Alexey V. Akimov|Added another Jupyter notebook demonstrating several Tully-1-like models (Tully 1 model with different parameters). A comparison of FSSH and LZ calculations is made
388634b5d52a633f3f8715aac5de590e94a1d8ff|2019-07-06|Alexey V. Akimov|Added Landau-Zener method to compute hopping probabilities, added a Jupyter notebook example showing it working for Tully model 1
060c7268c633754ede44f3bc26335a3160e5fc27|2019-07-03|Alexey V. Akimov|Updated the LZ module
bf6558b38b15e850afebb70e768b94060d99f46e|2019-06-13|Alexey V. Akimov|Added the module to remove COM translation and the overal rotation of a system along a pre-computed trajectory. Well, the rotation removal doesn't quite work yet
04b0b0bbe1d6c188000b672446f9dcaa51ebc3af|2019-06-10|Alexey V. Akimov|Fixed the way the dephasing times are computed
c5dcc1cd9af6965c55f5ff7759e371823aed893f|2019-06-08|alexvakimov|Merge pull request #54 from bsmith24/devel
4408625cbd8d121d5d7df43b0d45ef1fc2e12db8|2019-06-08|Brendan A. Smith|Reorganized the loops over initial conditions and nsteps to calculate the energy gap for every step for initial condition
3b1c05426d56d50a543c79bb483a158ee6e64f21|2019-06-05|Alexey V. Akimov|Revised the module to compute decoherence times, added theory document clarifying the math
884119ac44b42dab3ab2dd30c9319c4f7dc29ace|2019-06-05|Alexey V. Akimov|Added new functions for fragments rotation
188a2f9c06e45f5d4d69e46ae88b12af95f383d2|2019-05-09|Alexey V. Akimov|A fix in the libra-ergo interface : to deal with the active spaces
dfaf4ca9a8143aa5ca386532a14d833b35848260|2019-05-06|Alexey V. Akimov|Doc Challenge Day 100: Fixing the delta-SCF procedure - almost made it a stand-alone function
3a3d75eba2902bc1cc238ecaec3d465a4fd854a7|2019-05-05|Alexey V. Akimov|Doc Challenge Day 99: Further work to fix the Libra-X
f9edc35763be06b85179e8084c3b0bff63741781|2019-05-04|Alexey V. Akimov|Doc Challenge Day 98: Continue to clean up librax module
717ffb1ce4675a39450cdbb4010ae7e7bfe5dd62|2019-05-03|Alexey V. Akimov|Doc Challenge Day 97: Revised some of the Librax functions, also some of those in the QE_methods module, updated the Jupyter tutorial
43c9e7164ddbbdef0f35038bde2b16842acbb179|2019-05-02|Alexey V. Akimov|Added some functions to read the QE data schema files, also continue to simplify the librax module
85bcab4985aa57c7cd6baaf63d972e66de4efe5b|2019-05-01|Alexey V. Akimov|Enabled the output of step2 into an arbitrary directory
dd32fb2194a5d3e14e55695b6c4f20e45a483459|2019-05-01|Alexey V. Akimov|Doc Challenge Day 95: Added some utility functions for substitutions in files. Added an example
7f271996dd7882bb6bcc009119963063a4d82cf6|2019-05-01|Alexey V. Akimov|Doc Challenge Day 95: Revised the ErgoSCF calculations a bit - added the printout of the MO overlaps. Also, started adding the option for HOMO-LUMO -only calculations with the output of the ErgoSCF - to enable faster calculations
dca80936d3773953ba0cf84927c0f2205157b5d6|2019-04-30|Alexey V. Akimov|Doc Challenge Day 94: Added a complete example of running the NAMD of adamantane with Libra-ErgoSCF
6a2704cc5a03637d42ff19f8d54cc5a488082196|2019-04-29|Alexey V. Akimov|Doc Challenge Day 93: Continued cleaning up librax module, added a Jupyter example showing some of the functions in the new code. Also started a tutorial on capping systems with arbitrary fragments, added a function to find the undercoordinated atoms
553a3b16b17163d414eb2ad3e0573a136cd6e84e|2019-04-28|Alexey V. Akimov|Doc Challenge Day 92: Finally made the interface with ErgoSCF working
ed64cb87de2d4bad39ace67f8f920edeb55d2fc3|2019-04-27|Alexey V. Akimov|Doc Challenge Day 91: Figuring out the correct structure of some ErgoSCF output and possible options for the input
0c750a7c194f966bb7cc1eb0968e01f5364ea481|2019-04-26|Alexey V. Akimov|Doc Challenge Day 90: Cleaned up and better explained the NBRA workflow for ErgoSCF - just the step2
2db08cf59e440d3ec0d239afde83d8b3d0fb86e3|2019-04-25|Alexey V. Akimov|Doc Challenge Day 89: Added almost working version of the NBRA interface between Libra and ErgoSCF
1d4e92e0efa93dcfa177d99a737f34711440f1b1|2019-04-25|Alexey V. Akimov|Doc Challenge Day 88: Started interfacing Libra with ErgoSCF code to do the NBRA-type calculations
01fd10e1f34845229c068be6bf938dbd02156e7b|2019-04-24|Alexey V. Akimov|Doc Challenge Day 87: Added the option to fix translation of the atoms when doing  the molecule optimization or MD, updated the example. Added more docs and clean up some stuff in librax
617c1a89b5555ad009cd0be40a257ba0e1479b42|2019-04-22|Alexey V. Akimov|Doc Challenge Day 86: Cleaned up and documented a bit of the LibraX workflow - a lot work is yet to be done
074b24a86b96e1433b00b3eb7bac9beb62602d9a|2019-04-21|Alexey V. Akimov|Doc Challenge Day 85: Added a module to run the TSH with the Nose-Hoover thermostat, added this as an option to the Landry-Subotnik example. Revised the initialization and changed the parameters to be consistent with the paper
50058a386e3cd897ecf0415638a9b46fdddd4e3e|2019-04-21|Alexey V. Akimov|Doc Challange Day 84: Started adding the Landry-Subotnik model example
dc93963e5ce0cb86f1abcaa02869d442e62c995a|2019-04-19|Alexey V. Akimov|Doc Challange Day 83: Added an example explaining in more details what is going on in the DFTB_methods module and step2 that uses DFTB+
aaa2841593d66ea0cc9c7b65108114a864c8de63|2019-04-18|Alexey V. Akimov|Doc Challenge Day 82: Extended the MM optimization example, added the illustration of the capping functionality
89d8d59e008d2bc4cf1750d9e39f6915a5457897|2019-04-17|Alexey V. Akimov|Doc Challenge Day 81: Added a function to optimize a molecular structure with UFF force field using annealing approach, added an example showing how to use it
f71ea2745dd47958488298bf830282eaf0bb3475|2019-04-16|Alexey V. Akimov|Integrated Libra-X source into Libra as a workflow, started documenting it accordingly. It is not yet tested though, so may not even work
2c81da9cf16bf216dd2779addcd51ad7bdc93a76|2019-04-16|alexvakimov|Merge pull request #53 from tsiangsun/devel
eb3db7791c824632761eabdb5d9bad4818f72359|2019-04-15|Alexey V. Akimov|Doc Challenge Day 79: Added documentation in several Python files of libra_py, updated the theory doc for the probabilities module, added a PDF version as well, added a Jupyter example showing the classical Maxwell-Boltzmann probability vs energy
b1ac7cea02a6529a351d2ab1fc0a071a415f2eaa|2019-04-16|Xiang Sun|Added FGR example3 jupyter notebook
2eac3ea0655fda1751e2a2c43d40730013b3a6e4|2019-04-14|Alexey V. Akimov|Doc Challenge Day 78: Added an example of computing exponent of a non-Hermitian matrix, also added a doc with theory on this
3cd9be87cdf6a1d5aa2d258301723e970e962853|2019-04-13|Alexey V. Akimov|Doc Challenge Day 77: Added another example of how to extract the information from the set of files generated in the scan calculations
b95ca7ef4305a642b6b9c6a44139ef29a3ff13d5|2019-04-12|Alexey V. Akimov|Doc Challenge Day 76: Finalized the second example of the scan module, updated step2 module to also save other important files about the run - we can use them in the scans
d5e53fed55eeb4a747084a35fd3edba5b31558a9|2019-04-11|Alexey V. Akimov|Doc Challenge Day 75: Updated the FGR notebooks, fixed the bug with the scan module, finalized the tutorial on the scan module, started another one that does the PES scan with QE - still need to finalize it
8c78ee319211e4aa8194a0ea95335c048cc04f77|2019-04-11|alexvakimov|Merge pull request #51 from tsiangsun/devel
2f04230b64b00e3eec1b7a64a2fac18388aa0411|2019-04-11|alexvakimov|Merge pull request #52 from bsmith24/devel
1c199c4d15c4d8d6ed0747f6d566bff7df9ccb5d|2019-04-11|Brendan A. Smith|Fixed a bug that sometimes caused the hop function to crash.
2320dbdf11b48ec73f6c320e1919d3738efa2d8f|2019-04-10|Alexey V. Akimov|Doc Challenge Day 74: Added the scan module and developed a tutorial - this is only a beginning, need to fix some bugs
b7123c883506169124e98d8c8b469db7e68f2308|2019-04-09|Alexey V. Akimov|Doc Challenge Day 73: Added the Bastida method to the tsh module and the NBRA workflow, added the tutorial demonstrating its use
27a113974a7728475122360e89204cc5cd539ca3|2019-04-09|Xiang Sun|Fixed bugs in NEFGR code
ec9693e88845df21af621866106ed14a99135303|2019-04-08|Alexey V. Akimov|Doc Challenge Day 72: Added matrix exponential functions and the examples of their use
53c51304f6f5d57eb3b7e86b652a65399bc556f7|2019-04-07|Alexey V. Akimov|Doc Challenge Day 71: Updated an example for SVD use to propagate the TSDE with non-Hermitian Hamiltonian
d767cb8081cf1b7064b36cd5a36c5b5eb9312dc4|2019-04-06|Alexey V. Akimov|Doc Challenge 70: Fixed some bugs in the yesterdays implementation of the SVD Python wrapping. Now, it works correctly, but bewate the states may change in the course of time. Added the test demo and also started a new tutorial to study the evolution of the TDSE with non-Hermitian Hamiltonians - the results are somewhat strange so far - likely due to the reordering
057268cfb19a11aa047de889bbc8c44e876462d2|2019-04-05|Alexey V. Akimov|Doc Challenge Day 69: Wrapped the Eigen3 SVD decompositions, added a test, but it is not quite fixed yet
1178113abeb04b95b0c79f01acf0abb50fd4afc3|2019-04-05|Alexey V. Akimov|Updated Eigen version
6a2b3652979e4e790fbcc1625f83e164ba057b80|2019-04-04|Alexey V. Akimov|Doc Challenge Day 68: Fixed some bugs introduced yesterday, tested the c++ implementation of the check_input function, deprecated pure python implementation - started py2cpp_code folder of the older python codes that are now translated into c++. Updated all the Python dependencies, checked the notebooks, updated the build procedure and added init.py files to be able to access the c++ libraries separately
453bf21b50dcfc7e9e4c3cf155bdcbd14993910c|2019-04-03|Alexey V. Akimov|Doc Challenge Day 67: finished documenting the tsh module, implemented some of its functions at the c++ level, added the check_params function to c++, but need to test it
6eec5d5a3b9c2052465a941d4f6e9cbe4a743948|2019-04-02|Alexey V. Akimov|Doc Challenge Day 66: Documenting the tsh module, removed some redundancy
37f2fbc7fa573888a91041ce6f4823ce82c1e6ee|2019-04-01|Alexey V. Akimov|Doc Challenge Day 65: Added an example of plotting NACs in the the index space rather than energy space
83b3a33bcb39699834b70af65d1c1916717e8c7a|2019-03-31|Alexey V. Akimov|Doc Challenge Day 64: Documented some of the functions in the tsh module
a7bdce85be3f763d7f6b27978f7a56f308921eb2|2019-03-30|Alexey V. Akimov|Doc Challenge Day 63: Added Tully models 2 and 3, added another auxiliary function to compute scattering probabilities, fixed a couple of small bugs
425a6bf8da0dc6a18b931c86613eb09935a1e73c|2019-03-29|Alexey V. Akimov|Doc Challenge Day 62: Revised a bit the tsh algo1 module, completed the Tully1 example
1250ca0f3fad5bd88fa5142675dad6a38785f2eb|2019-03-28|Alexey V. Akimov|Doc Challenge Day 61: Finalize the tsh_algo1 recipe for TSH calculations and tested it in the TSH example - updated the Tully example
2ed7b073de11a936a65e950c569da74cfcb35183|2019-03-27|Alexey V. Akimov|Doc Challenge Day 60: Added examples of using NBRA workflow to study relaxation dynamics in MoS2 with the help of NAC scaling approach
f51b640f6e87cb76d47fd57df6d2343c4ef3f169|2019-03-26|Alexey V. Akimov|Doc Challenge Day 59: Fixed a few bugs caused by the yesterdays refactoring, started putting together a tutorial showing the TSH calculations with Tully model, started implementing a new module tsh_algo1 with a well-documented function for running TSH calculations with multiple trajectories
1416563f7f976190d75bae983e23a543b15e8901|2019-03-25|Alexey V. Akimov|Doc Challenge Day 58: Added more documentation to the tsh module, split the original tsh module into tsh_stat module with the statistics counting functions and tsh module with everything else
cd6b4996d758f2411e26005a9371919b0c51f878|2019-03-24|Alexey V. Akimov|Doc Challenge Days 56-57: Added documentation in several Python modules, removed some redundant functions, updated one tutorial
df01955b93887823b1575ed2b8946566ad148134|2019-03-22|Alexey V. Akimov|Doc Challenge Day 55: Finalized the documentation of the models Libra
5e0ff939680c873359803b3c08fd6f7a0ec40517|2019-03-21|Alexey V. Akimov|Doc Challenge Day 54: Added function to map the spin-boson Hamiltonian of Landry and Subotnik with to the model1 parameters, added to function to fetch the parameters of the Landry-Subotnik models
5868799e29c316a969731c0de10796dc97a734c3|2019-03-20|Alexey V. Akimov|Doc Challenge Day 53: Documented Tully models, some of the Libra models, fixed a bug in the influence_spectrum module
8ae5e31bcdd9cfa0909242442fb37c3f520043e6|2019-03-19|Alexey V. Akimov|Doc Challenge Day 52: Addded documentation of the model Hamiltonians
00b96271b7f56ed80e08cd81782673b6e9a0aef6|2019-03-18|Alexey V. Akimov|Doc Challenge Day 51: Added Henon-Heiles and Faist-Levine models to the demo script, revised the Faist-Levine model, fixed some internal bugs, documented the module
8aff42b2fccab916a98387f4a46be54e413225b6|2019-03-17|Alexey V. Akimov|Doc Challenge Day 50: added a tutorial showing some of the models implemented in Libra
605874bc28ecfe8ab043789b2b04dae74e4b51ae|2019-03-16|Alexey V. Akimov|Doc Challenge Day 49: Added yet another example function for the FGR module
a2cc864383b4b29a0f7e1081aa26a752b319fd53|2019-03-15|Alexey V. Akimov|Doc Challenge Day 48: Extended the documentation of the fgr_py module. Improved the first FGR Jupyter tutorial - added a convergence study and comparison of different methods
5bf04969518c2a73b8e69ff9b148cf7779c63bba|2019-03-14|Alexey V. Akimov|Doc Challenge Day 47: Started adding the FGR Jupter tutorials and the corresponding fgr_py auxiliary module for easier life with FGR stuff
8a82dbb9deec928c6225d1366e2dc920cf210482|2019-03-13|Alexey V. Akimov|Doc Challenge Day 46: Fixed the bugs in the Pyxaid2Libra conversion and developed a tutorial
e0f5e7266aa86da357dac9334dee1fc897c81084|2019-03-12|Alexey V. Akimov|Doc Challenge Day 45: Added a function to convert Hvib in the KS basis as in Pyxaid to the Hvib in the CI basis as in the present workflow
98bc0af513e9e62d2efc624e9b2e973bf5f2e899|2019-03-11|Alexey V. Akimov|Doc Challenge Day 44: Documented the mapping module
91610b13bcd7366f485305355af0d5fbbe1531f8|2019-03-10|Alexey V. Akimov|Doc Challenge Day 43: Finalized documenting the step3 module, some other additions and small fixes, examples
29bf392706315d05843b9d90bdd2dbf3753d739d|2019-03-09|Alexey V. Akimov|Doc Challenge Day 42: Wrapped up the modules for doing step2 calculations with DFTB+ code, documented all the stuff, added a new tutorial
829dec9d02b5daad7862070603a759f59ab88961|2019-03-08|Alexey V. Akimov|Doc Challenge Day 41: Created the core functions for running step2 with DFTB+, developed an example Jupyter notebook - it works, but I still need to generalize the interface of the module functions and add more docs before it can be considered complete
9f9355eaf6d98763d733778e777ff7635991e3c9|2019-03-07|Alexey V. Akimov|Doc Challenge Day 40: Added a new module with functions for dealing with the output of the DFTB+ code. Developed an example of how to submit an MD with it and how to extract gen files from the resulting trajectory file
88aa680fbc98e1cb6c8e82bd2c061384868e1f33|2019-03-06|Alexey V. Akimov|Doc Challenge Day 39: Started implementing interface with DFTB+ to run NBRA - or a bit beyond - calculations with this code. With a bit more work, can implement the full scheme. The added code is so far in the Jupyter notebook, but the functions will constitute a new module once it is more or less shaped
4be64758d383d16ad2e4a2167eb3172ddacacd5c|2019-03-05|Alexey V. Akimov|Doc Challenge Day 38: Finalized the revision of the step3 module and the documentation of the run function. Developed a Jupyter tutorial showing how to convert KS data from step2 to the SD basis data for further use in step4
7052375725e14023902f60e16385df0d7f25fd29|2019-03-04|Alexey V. Akimov|Doc Challenge Day 37: Revised the LZ module - a tutorial is developed elsewhere. Revised the step3 of the nbra - some changes are made in the naming of parameter keys as well as in some functions interfaces, documentation is being written, but not yet finished - at this point, the step3 is likely not gonna work, but will fix this soon - maybe tomorrow.
56077d3ab1d7e7b38e993375fa7950df2d82e149|2019-03-03|Alexey V. Akimov|Doc Challenge Day 36: Documented the compute_hprime module, added new functions to the data_stat module, finalized and cleaned up the tutorial for spectra calculations
e6753eb65086e2db6196400eccd78d3413e107f7|2019-03-02|Alexey V. Akimov|Doc Challenge Day 35: Added some spectra calculations functions, developed a tutorial to demonstrate the new functions. This tutorial is yet to be improved and the functionality is to be extended
5764fbe0148d3dcdc87438d144ee548b50d3e164|2019-03-01|Alexey V. Akimov|Doc Challenge Day 34: Removed the ham_map function but added more generic functions to compute averages of the lists of matrices, also added a function to produce the statistics of the matrix elements. These new features are now demonstrated in the DO_NAMD tutorial, so now we can produce much more of useful graphical info
21a81bc03606822580ab4467a122aab1280014e6|2019-02-28|Alexey Akimov|Doc Challenge Day 33: Developed the Jupyter tutorial to run step2 calculations on HPC
abe56ee6421bd10b3ed93e7db6822996c9806928|2019-02-28|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
509b189059d10c89c7c7baac2c23a426b769da96|2019-02-27|Alexey V. Akimov|Doc Challenge Day 32: Made a lot of changes - revised a lot the step2 of the NBRA workflow, now it is possible to run it on sinlge laptop, without batch system, revised the internals of the functions, regularized all the options and documented interfaces. Developed a tutorial notebook for running step2 with Hprime and plotting all the maps. Refactored some of the functions - now we have general get_data functions which will replace the get_Hvib. Started refactoring the calculations of the absorption spectra and averaged NAC maps - this stuff will not work for a while, but will be changed soon
687c21c67bf5fb60662e3c535863bb8965c347c5|2019-02-26|Alexey V. Akimov|Doc Challenge Day 31: Finalized the documentation of the step2, made some adjustments in it, fixed a small bug in the DO_NAMD notebook - now the decoherence times make more sense
35c00e7e35b33bccc053a11bced78abf9c3dd389|2019-02-25|Alexey V. Akimov|Doc Challenge Day 30: Added some documentation in step2 and QE_methods
e9a9a5ec6da9598fe7f19e022d6ad2352845248a|2019-02-24|Alexey V. Akimov|Doc Challenge Day 29: Removed some module re-exposure to Python, so we have less of the warnings. Developed a template for running NA-MD calculations on atomistic data - just take this Jupyter notebook and edit suitable variables according to your specifics and you should get all the NA-MD calculations done in one click. Added some auxiliary functions for data modifications
ca1dbf9271d8b58da952b16032f68383f824267c|2019-02-24|Alexey V. Akimov|Fixed min-bugs in the unpacking of the results of TSH calculations in examples. Also, revised the model Hamiltonian definition - there was a wrong sign in one place. Also adjusted the parameters of such models - now both the QSH methods work nicely
6845810ecb6e9a13c3e77a53d101b3e61291a871|2019-02-23|Alexey V. Akimov|Fixed the 2-level example with correct assignment of SH and SE quantities, also added both types of plots, so now the thermal equilibrium is reached better
474e3c789becc0bc07979c3c1c3abaa0322c4d52|2019-02-23|Alexey V. Akimov|Doc Challenge Day 28: Added docs to the decoherence times module and a bit in step2 module
a0d2cdf4b06cd6ab5ee6ad154a94f503cd5e4931|2019-02-22|Alexey V. Akimov|Some post-refactoring fixed of ghost imports
5ab0275367c237c11ae9ece1d07244fd9dae89e6|2019-02-22|Alexey V. Akimov|Doc Challenge Day 27: some more refactoring, added new auxiliary functions in the libra_py, developed a tutorial on the QSH2 - how to reconstruct the data with the FT and how to use it to run longer simulations
005f0f7c6d1bc58752cb060540a90ae414f602a7|2019-02-21|Alexey V. Akimov|Doc Challenge Day 26: Finalized the revision of the QSH module in NBRA workflow, made some suitable changes in the codes, finished a QSH notebook tutorial - other than writing suitable markup comments
11a4b7ecede6d06344746372768ac14144add1e8|2019-02-20|Alexey V. Akimov|Doc Challenge Day 25: Revised the QSH module including its documentation the functionality. Now just need to test it working - that is for tomorrow
0c01defb3d13194f4500ef96f66651e0a1f27ad2|2019-02-19|Alexey V. Akimov|Doc Challenge Day 24: Finalized some of the re-factoring I started yesterday, revised notebook examples - they now work fine.
6bbcbccc89518944c46dd02cad413613b5f1c1be|2019-02-18|Alexey V. Akimov|Doc Challenge Day 23: Started some re-factory of the libra_py library - got rid of some redundancies and organized the functions in a more logical way, added more documentation. Beware - this commit will likely break some of the existing functionality, so the latter needs to be adjusted after the refactoring is complete. This also means that some of the tutorials will also break down.
19b094d273fd09c5d573eb8c573dce7bb2a345f6|2019-02-17|Alexey V. Akimov|Added an example showing the convergence of the the ACF and FT spectra, depending on the length of the data used
197ae679ce2ea4f16e761deeaf1a380716bbee8b|2019-02-17|Alexey V. Akimov|Doc Challenge Day 22: Finished the acf_matrix module, added examples showing how to compute ACFs and their FTs using the recipe1 function. Also, demonstrates the difference of two types of ACF definitions
884c87a64e9d35bd6d57b44ca5a114dfd33a948e|2019-02-16|Alexey V. Akimov|Doc Challenge Day 21: Documented fit module, changed some defaults, developed an example showing how to use it
ed890cb09d0b75524a12fb9cb5708896607e1304|2019-02-15|Alexey V. Akimov|Doc Challenge Day 20:  Documented LoadMolecule, a bit of the acf_matrix, and added the notebook with the molecular orbital visualization
3213a91726f035491e8759487bb0a6a6c4750474|2019-02-14|Alexey V. Akimov|Doc Challenge Day 19: Started documenting the acf_matrix module, added a new - py_cdf function to do complex Fourier transform of the data
8d9b2575020af9f85078af22be9af3b271c93347|2019-02-13|Alexey V. Akimov|Doc Challenge Day 18: Revised the acf_matrix module - merged two definitions of ACF in a single function with the option to select each one, corrected one of the definitions to account for proper normalization, revised the influence_spectrum and qsh modules - these changes are not yet finalized and some dependencies still need to be changed, but the new changes make the code more convenient and systematic. Added new Jupyter notebooks - to show the influence spectra calculations as well as the Fourier transform of the data series and the reconstruction of the time-series.
7aeec3855c9e834ec0da61152f2afd4bd97da566|2019-02-12|Alexey V. Akimov|Doc Challenge Day 17: Finalized the documentation of the step4 module, removed obsolete parameters - both in the documentation and in the actual implementation - especially in the run function of step4. Updated example notebooks, now we need not explicitly specify the number of states in the params - this is determined from the Hvib data. In the example for 2 state system added the analysis of the equilibrium boltzmann populations. In addition, added the illustration of how to transform data
0a95981baba85a56c832e20945eab55b1db0ce79|2019-02-11|Alexey V. Akimov|Doc Challenge Day 16: Started documenting step4, fixed a bit in step2, added couple Jupyter examples on how to run NBRA-TSH calculations in 2-level and 4-level systems
2c06893115a1cba19920fe7aa87aca6813cdd593|2019-02-10|Alexey V. Akimov|Doc Challenge Day 15: Finished documenting build module, started working on the autoconnect module, started working on the nbra modules
2103cd5df6e746f813b6540147e2da0c0c0a26d4|2019-02-09|Alexey V. Akimov|Doc Challenge Day 14: Added a new tutorial on running diffusion simulations - developed the working files, still need to write the explanation
23bfeba8b4cb5f385b711a740d1f0297dfe27d5c|2019-02-08|Alexey V. Akimov|Doc Challenge Day 13: added some documentation to build and QE_methods modules, revised couple Jupyter notebook examples
28e2ae1c04100be64d0a3a597122461030da4e3e|2019-02-07|Alexey V. Akimov|Doc Challange Day 12: Revised the mEigen library to organize various kinds of functions and remove obsolete ones, in particular added the eigensolvers that do not sort the eigenvalues. These eigensolvers are now used in the normal_modes module, to maintain consistency of the eigenvectors of R and V variance matrices although this is not a final result. Revised some of the tutorials accordingly. Also, the xyz trajectory reading in QE_methods now has correct unit conversion
f688fa76042bae04da53a5e933004c17b16b71ec|2019-02-06|Alexey V. Akimov|Doc Challenge Day 11: Added a function to read in an MD trajectory in the format of xyz file, added compute_cov1 function to compute normal modes from MD data - no accelerations needed, developed a complete example to visualize the MD from xyz file and to compute the normal modes and spectra and visualize them - all in one file. The xyz file is not supplied with this example at this point.
94aa6d0a430a4f72beb2bccaf68151fc1d9a34a2|2019-02-05|Alexey V. Akimov|Doc Challenge Day 10: Added some documentation of QE_methods
3bdec59daf3546651df26ec40f18ba63ed216d3a|2019-02-04|Alexey V. Akimov|Doc Challenge Day 9: Added a notebook on lattice MD simulations with visualization supported by py3Dmol and matplotlib
b7124a63bb45bb583f9aa72e16a3048acc249d2e|2019-02-03|Alexey V. Akimov|Added another Jupyter tutorial on the build module, added some fixes in the build functions and fixed a bug in the units module, revised one of the older examples
fc0efab7030224db59cd784b6d43a88621ce9a1e|2019-02-03|Alexey V. Akimov|Doc Challenge Day 8: Documented units, partially - build, added new functions to the build and units modules, updated the README
d30247cd52850bb569ecbb702d78a89d869d1846|2019-02-02|Alexey V. Akimov|Doc Challenge Day 7: Added documentation to pdos and probabilities modules
30a87a82ce68ce06efeb5074ce03ee6e0ebbbe66|2019-02-01|Alexey V. Akimov|Doc Challenge day 6: Added new function to System class to generate a string representing an xyz file - for easier integration with py3Dmol. Cleaned up docs for namd and normal_modes modules in libra_py. Moreover, the conventions on formatting of the comments in Python files has been formed
f065c4cbee145cb693d666f2171fb90bb52d6321|2019-01-31|Alexey V. Akimov|Renaming files
a4e838b8cdb4b0f15a8d822ad53a8a59aa47c898|2019-01-31|Alexey V. Akimov|Doc Challenge Day 5: Revised the DATA type and codes, added some functions, added a Jupyter illustration, combined with matplotlib to show the distributions computed from the data provided
be9e4f4a0f03b808d8120484630abf676928d946|2019-01-30|Alexey V. Akimov|Doc Challenge day 4: Figured out the Google style documentation for Sphinx using Napoleon extension. Edited some of the docs in the normal_modes module, to prettify the autodocs produced.
cb75f721e2a441841c2f79a2a181fe154eeea809|2019-01-29|Alexey V. Akimov|Doc Challenge day 3: Added functions and examples showing how to deal with the normal modes computed with QE package
cd56732e45b70fd9b42bbf6af38f9e80a8d15b42|2019-01-28|Alexey V. Akimov|Doc Challenge day 2: set up the grounds to write documentation of the Python codes with Sphinx adapted a couple files accordingly, but this is only a beginning
20a18943ae23cde616caefa140d3ea26c3a8bf20|2019-01-27|Alexey V. Akimov|Updated Normal modes example 1
bfd375f92157c3d43540511669d8632238d336cb|2019-01-26|Alexey V. Akimov|Updated the notebook showing the normal modes example
3f1c5a292b9b412d6b9556370bdbb86a4d58aa61|2019-01-26|Alexey V. Akimov|Updated README with the added functions
31a9ef2380dd8fa3720f7694fdd2a0a2cb6ca813|2019-01-26|Alexey V. Akimov|Fixed a bug in reading MD coordinates and forces correctly. Added the function to read unit cell parameters along the trajectory
719d164b18194d6262233e09076c2cf9878dfb23|2019-01-26|Alexey V. Akimov|Added fold_coords function - on the c++ level to return all atoms into the unit cell
de71a5d016542fca3fa3666e96afedc404993880|2019-01-25|Alexey V. Akimov|Updated the normal modes libra_py module, to control printout options. Added a Jupyter notebook showing the normal modes calculations
c2179a3320227d56ec3f4a106f02ef2bb4b34a8e|2019-01-25|Alexey V. Akimov|Another little fix
047fa3d598c5a18e7e8ec34965ca7851542d72f8|2019-01-25|Alexey V. Akimov|Allowed to use only a subset of the read orbitals
0fd06b9f2ad369a6939288f4680fcb73a6d53b64|2019-01-25|Alexey V. Akimov|Changed the QSH.run function - now it takes the Hvib data in the input directly, the reading needs to be done outside
58ac48750df4013875975e5abe27f994bd77271c|2019-01-24|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
394fd14fbd10ff780b6751752e5a1e8cb614ed70|2019-01-24|Alexey V. Akimov|Generalized the fit and regression functions
a508902e8bf2186c30087d5366d7626fc76b3a25|2019-01-20|alexvakimov|Merge pull request #47 from bsmith24/devel
be299d8982eccd70a3b8a9b5f7274178207facae|2019-01-20|Brendan A. Smith|Documented the function, sac_matricies(...)
74b52e5e3094f6319678f19b0561cb4d8ed1c51e|2019-01-19|Brendan A. Smith|Removed the comments in the funciton that shifts and scales Hvib
00030d81755b62575c0f7065aa834d8a415546b8|2019-01-19|Brendan A. Smith|Removed the .H() from the scaling of Hvib.
2677ce7ce4c2e930315f9df121f3aa7670d0b46b|2019-01-19|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
a4bbd0e9154cdcf5340de3a690f3d95c435832f0|2019-01-19|Alexey V. Akimov|Another test in the same example
75dea00e2b5d82d2c5d20c3701a67231ddb99fab|2019-01-19|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
53bd3a5889a245a95e2099eda09769296652401c|2019-01-19|Alexey V. Akimov|Added an example of dot matrix product. This also tests the implementation of the method - it works as expected
779e2c6270a0aa7685039c525a7252e123353aef|2019-01-19|Brendan A. Smith|The energy of the ground state of the Phi basis is no longer set to 0.0. Normalization constants for the Chi basis are now computed based on SD overlaps. For the first of the two schemes for the computation of the autocorrelation function, the full data set provided by the user is now utilized.
5bbaf7930ffa284b5f2ba89e157c7e00ceddc270|2019-01-13|alexvakimov|Merge pull request #46 from bsmith24/devel
98e3044fe9b1b215556f3199f19de47edce11d8b|2019-01-13|Brendan A. Smith|In tsh.hopping(), we now make a deep copy of Coeff.
a5d08342c2935d195cb186160ed3d2540b9566ed|2019-01-12|Brendan A. Smith|Uncommented Coeff1 in tsh.hopping() so that the ID-A decoherence scheme can be used. Also made a small adjustment to step4.transform().
ce6599a8db1bf5ce5eb57a7adfb012c994efab29|2019-01-12|alexvakimov|Merge pull request #45 from bsmith24/devel
d4bca27b18fc790e89875c4a9b7dd53f4ff9c587|2019-01-12|Brendan A. Smith|Fixing a small a bug in step3. The idealized matrix used for normlaizaiton should be the size of the active space, not total number of spin orbitals.
f627db44bd5b470bc13b10b24191e65f04424e9f|2019-01-11|Alexey V. Akimov|Organized the FGR tests, added the description of files and possible computational recipes to run the tests and corresponding visualization
806f78b32b0ffe2459f9e039e88ff2de06c74b04|2019-01-11|Alexey V. Akimov|Made a few more changes in the functions signatures, to make them more consistent with each other. Revised non-Condon case, now the V**2 is added as it is supposed to be. Added more examples and tests showing how the functions work
231a95a973590c27e77a4ee37a91f0e4947fd173|2019-01-11|Alexey V. Akimov|Updated the FGR module - the order of the variables is changes, the ACF function is added, the loop over normal modes is moved from the rates function to the ACF, updated the examples - the Brownian cas works better, but for the exact case the rates go down linearly for long time - might be some intrinsic problem or the choice of parameters in the example
80cdcf919791f363b536e367aa4f0d212ae80107|2019-01-10|Alexey V. Akimov|Further modularized the execution of the run function in the step4 - now there is more explicit control on the user side, for the cost of having to have a few more lines in the execution script. Need to update examples according to this new convention
36147c88aa020533e4fae8ff78bfd6082c7d2478|2019-01-10|Alexey V. Akimov|Added popping Sab and Sba matrices in the phase correction function
b40f8fe9f32d55003d4a3fc550b172d5f24ad25d|2019-01-09|Alexey V. Akimov|Revised the phase correction again - this is the correct way of doing it
c86bd858a306361fc601b960f5befa4ef8ddf48e|2019-01-07|Alexey V. Akimov|Added an option for Hvib shifts and rescaling
7ed8ed27b50c6fb6547964cbbce77fb684ef5b3d|2019-01-07|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
74d72eac12c5c9d8e0aa27259347a4fc94eff908|2019-01-07|Alexey V. Akimov|Fixed import problem
25a89c8857e99eca6ff0c55755f4bf96506c444d|2019-01-05|alexvakimov|Merge pull request #44 from bsmith24/devel
26a5ffa23a06dac53f5b788f964f101ef8b4d7a7|2019-01-05|Brendan A. Smith|Removed a small bug from testing.
20125bc60643af9c7d7aa7047eb23c92a01539d8|2019-01-05|Brendan A. Smith|Chi wavefunctions are now normalized based on an idealized overlap matrix of Phi states.
f2fcf5f189d6dd31608cb061072157fb5917d0e0|2019-01-05|Alexey V. Akimov|Started the SAC normalization stuff
5a1af1e6fed3921b789569b7f7037a1a2c91bb20|2019-01-05|Alexey V. Akimov|Made a number of cosmetic changes, added documentation, changed the order of arguments in the do_phase_corr function, changed the phase correction factor - this is the most important change
d94a056ed2a6a1579bd62f2b3400049967a598f0|2019-01-05|alexvakimov|Merge pull request #43 from bsmith24/devel
2c5de8e84aa2f0bb511538a3f9d007822b772778|2019-01-04|Brendan A. Smith|Now the complex part of S is accounted for in mapping.py
f462494d704857ed67ac78e160bea53df00bf21c|2019-01-04|Brendan A. Smith|The indexing convention used in step3 reflects that which is described in the manuscript. Changed the internal notation scheme in accordance with the new indexing scheme.
45e342bd7f8fd50967f3bdfdc6ac893e2f5dbee8|2019-01-03|alexvakimov|Merge pull request #42 from bsmith24/devel
83135eb3fdbee4261d9bae16a73301e6ea666482|2019-01-03|Brendan A. Smith|Simplified the notation in the state-reordering function. The function that handles phase corrections now does so for the alpha and beta sub-blocks, as well as the alpha-beta, beta-alpha sub-blocks.
30b5c43bb21192998ebd7b7a0b0bfe2d053f929d|2019-01-03|Brendan A. Smith|Futher modularized the state-reordering fucntion in step3
926091834b0c3cc3404516c8924a7bffc9802d55|2019-01-02|Brendan A. Smith|The state-reordering algorithm can now handle alpha and beta spin-orbtials in sub-sections. In step2, the wavefuncitons are no longer 0 in the off-diagonal blocks.
4f2e4023892299b12527d0bf286947e0cc613556|2019-01-02|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
25f820551c4e5a0aad09fbdd79dcb23f82806c1d|2019-01-02|Alexey V. Akimov|Added the optional orthogonalization of the orbitals
f6fa60fb51d76a6e8bcc20a511cb46cedeb87d19|2018-12-28|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
4fd7eafd57782e2a514ff8375af44a76445bedb3|2018-12-28|alexvakimov|Merge pull request #41 from bsmith24/devel
459a177da8b70c6ce06f597b4c0be0eb98969bba|2018-12-28|Brendan A. Smith|Fixed small bugs in the code. Dt is now passed as a parameter in step2's submit file. Internal conversions of dt to atomic units should be removed. The directories needed for step3 are now automatically made.
62f5d891fc565ed00077421d64125ab8077d838a|2018-12-28|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
585f7b6e38bbac32caa64d2815791b6c28779be3|2018-12-25|Alexey V. Akimov|A number of corrections to the QSH and other related scripts, updated the tutorials. Also enabled running the QSH calculations without generating intermediate files
776f8e2af6e21a5dd5c0e34f82dda75d165956ac|2018-12-24|Alexey V. Akimov|Updated the documentation to the QSH tutorial
4e97af50a9458ef057eeb37404abc70313cc1a08|2018-12-24|Alexey V. Akimov|Fixed several important bugs in the fgr code, added some functions, added another parameters sets, updated the examples - now, they make more sense
04e44bf2ddb154bc8b59b623b75e516fd1384910|2018-12-23|Alexey V. Akimov|Revised the QSH workflow and added the corresponding examples. Now it works hand in hands with the Pyxaid workflow
ea7388629820ce30015a192d79adb3f712fe1db9|2018-12-22|Alexey V. Akimov|Updated Pyxaid workflow and set up examples for step3 and step4. Now these steps work well. Step2 and some auxiliary functions are yet to be tested though
e3a51fb8d18d4c10b0670504fed80391c0dd2fc5|2018-12-21|Alexey V. Akimov|Fixed a bug in the averaging function
03d2cea8815dd880b1b3bf3e3790a48a217630bf|2018-12-21|Alexey V. Akimov|Significant restructuring of the workflows library - now, it is only an NBRA workflow, modules renamed, some are generalized to be able to run on multiple trajectories and initial times, the QSH and TSH workflows are now more related, but not yet to the point they actually should. The present changes are mainly to start this restructuring, but will likely have many bugs and will likely fail running.
d2a239b6bdf9bb21dce965137663d373cb2d9a36|2018-12-20|Alexey V. Akimov|revised documentation for the FGR functions, added example for Brownian bath in the FGR calculations, but this still doesn't quite work.
f38ba171520d3bb86a86a688450dc76a7edda4e7|2018-12-19|Alexey V. Akimov|Changes in the DISH implementation - some bug fixes and corrections
00dcdc7c7768748bb01f0b1e81e78cde21c0857c|2018-12-19|alexvakimov|Merge pull request #38 from bsmith24/devel
fadc2b691409572c5b06c94603be147476e18757|2018-12-19|Brendan A. Smith|Included a square root term to the phase correcting factor.
8ff6857862bac8612e070adeb2123a908f522fcf|2018-12-15|Alexey V. Akimov|Added the initial implementation of some functions for FGR calculations. The code is based on original codes of Xiang Sun and Eitan Geva, but refactors and revises them substantially. This initial implementation compiles and runs, but yet needs to be verified with the available models
7afb52b3d8bf0461a4f805c1b983b4f5db49fb76|2018-12-12|alexvakimov|Merge pull request #37 from WeiLiweili/devel
0377d0a93065120f414b4571d5c98c5071c80592|2018-12-13|Wei Li|revisions of qsh scripts and example
4f06e02fc3b294d040cebdfc484018ce0ad635d0|2018-12-11|alexvakimov|Merge pull request #36 from bsmith24/devel
54f56c8f17e45f0a560a488bd81c1a1e553afe28|2018-12-11|Brendan A. Smith|Drastically simplified the scaling function in namd.py. Energy is now converted to Ha in run_step3.py
4c679a22d3a20f12b7bd0f735c42d199f9ba918a|2018-12-11|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
fab3b7e15c73b05f6713bebd900b7d1fc6d29524|2018-12-11|Alexey V. Akimov|Added new examples of pDOS calculations
c0c91905f61e9a4d923ecfbf9541aab8f9f4e60c|2018-12-11|Brendan A. Smith|The energies and NACs can now be scaled in the Chi basis. NACs can be scaled either manually, or by the inverse of the change of the energies of the states consdiered. The needed paramaters are added to run_step3.py.
66f0e7b16934e763fcc159c5a2dc65e43de9344c|2018-12-11|Wei Li|revision of qsh scripts and example
92b7728de2e5aeeb3ebdea5874ead2a225452fbf|2018-12-11|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
0a325ca5ae0fdecf4dcad64353989bad04a5e466|2018-12-11|alexvakimov|Merge pull request #33 from bsmith24/devel
a5d14d02a5f2709348efd8c09d54b44489941c10|2018-12-11|Alexey V. Akimov|Totally revised the proj_dos.py module, removed the old functions and left only the QE-relevant stuff. Made sure this one works correctly, including when the convolution is turned on. I dont know what was going on in the older file, but some stuff was questionable
ac718a741ae9d054e41d40abe6208d59afc4f187|2018-12-10|Brendan A. Smith|Switch the pseudo_dir back to the permanant one located at /util/academic, and chnaged the pseudopotential accordingly.
470c34fccb86bffed3bf146c404b9c6edf2d3ec6|2018-12-10|Brendan A. Smith|The matrix elements for Hvib are now printed automatricall for the user in step3. The pw.x scf input-file in step2 now contains the flag diago_full_acc = .TRUE., made a minor change to the excitation_spectrm file to now be compatable with the 2-spinor format for orbitals.
a5f58d7e671773cf62d7c68117e49bff13042182|2018-12-03|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
7f29a79bcb939b51a5dfc2209f15e6682561e8a4|2018-12-03|Alexey V. Akimov|Added DISH and updated the example for it
5b6a1bd5e09f3716eb6a4ce612dd549dc7a25f82|2018-12-01|Alexey V. Akimov|Revised the keywords in the pyxaid2 workflow, added decoherence options, added parameters verification in the lz module
ac0d169e5b091f4d4ee876055b40c815224667fd|2018-12-01|Alexey V. Akimov|Added option to re-use old pyxaid-style output of step2, added parameters key check with default values assignment, simplified the key names for some parameters, added more documentation, updated the example script
21b1c429227fa1f98a8f56585830781ddd8e0499|2018-11-30|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
53a187c0212ece0a669655bf10f02dc393f0b5fa|2018-11-30|Alexey V. Akimov|Refactored workflows a bit - now a common block is used in lz and pyxaid2 to do a printout, removed energy reordering in the state reordering algorithm - it should not be happening, only the identity of the wavefunction changes, not its energy
2378ebd57d788e449529b603dff5cc684afb7b25|2018-11-30|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
e7d93a57fc0e523febcdd76282a62515c9ef9e24|2018-11-30|Alexey V. Akimov|Revised the interface, enabled the use of a subset of orbitals, updated the example and included a descriptive documentation
9928bc79260528e23478f1713a697fe102854d3b|2018-11-30|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
366771c188a7dd302de6eed6e4b4c0daa8f0c4bf|2018-11-30|Alexey V. Akimov|Fixed decoherence times output
3259aa6065f7a46716384d3209c58ea0da5ba5c6|2018-11-29|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
f5d472e9a99df1d629705a4afbbf79e6cb4a6d4f|2018-11-29|Alexey V. Akimov|Revised state reordering algorithm
f39cb1001de01b2f70ca004603aef22781ccab8a|2018-11-27|alexvakimov|Merge pull request #31 from bsmith24/devel
0e5e043d88e81788d5ad5dc2d674ecf73695dc88|2018-11-27|Brendan A. Smith|Made a correction to the __init__.py file in workflows/pyxaid2
d19d12da12295db0eabc1499feb6cc1258a494d1|2018-11-26|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
bfb30ce6422541a873a3d00d9f5540ab463325db|2018-11-26|Alexey V. Akimov|Added the Landau-Zener hopping probabilities workflow
c76a854d0d88df5ed678e939d82e480dae73883e|2018-11-26|Alexey V. Akimov|Revised the workflows codes and modularized some of them!
a826128af3f1db51c6a5c6b7e367321fae3a6ce5|2018-11-26|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
a8617da46bbdf4ec850d7a9d07783e245c8aeb43|2018-11-26|Alexey V. Akimov|A couple more fixes
f00f41b72f7c9ba1235691fae95d177a4254ca40|2018-11-26|Alexey V. Akimov|Fix a minor bug
a7b26f59a291a434493e4a82425f0e3be27ac381|2018-11-26|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
e826c4970e409a20121759994aa02f49590ea92f|2018-11-26|Alexey V. Akimov|Updated the Boltzmann probabilities calculation
497c6f43a785e9fa7f0558bca94e6fcd081c46c4|2018-11-26|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
fecb43f6c2ae8eb53f3a05cc38917a06005cb996|2018-11-26|Alexey V. Akimov|Updated reordering procedures
c6b041e0ae3b9941d29b768abd22d4b5a4f42e9a|2018-11-25|Alexey V. Akimov|Added the Beswick Jortner model Hamiltonian, but this one is not yet finished - needs to be completed!
0c8482acc3bb685f486bfae97484f95681bbc8a1|2018-11-25|Alexey V. Akimov|Updated the tsh module - revised the id-a when the Electronic objects are used, added new options for the proposed hop acceptance - now using a more rigorous approach, added the get_matrix and checked the namd module works with it, updated the example script
d372cc75bf4d37184f8bca69f979895a548af91e|2018-11-25|Alexey V. Akimov|Added the probabilities module and its theory document, updated the README file
eba7fb6e2575f254198d1f28dcfcdd8d1e6ed79c|2018-11-24|Alexey V. Akimov|Updated the description of the libra_py modules
06a6985b5ecaf57b50caa949f65e3ed9279062f1|2018-11-24|Alexey V. Akimov|Revised QSH and PYXAID2 workflows to remove redundancies
eff2a7e5b3eb9deb86cedd41d2a2e6f7545be200|2018-11-21|Alexey V. Akimov|Some changes and additions to the QSH module - this module needs to be carefully revised and generalized
5d4378ee75b5ebdf6f7aaaf6f07e9c2bcf92b4e0|2018-11-21|Alexey V. Akimov|Updated the units module
e92ea875afe6e2c150e5f4f421ae4aa3b4a7ccdd|2018-11-21|Alexey V. Akimov|Some updates on the QSH module and examples
b536481763a31946fb0d38a317f10cd2297d26a7|2018-11-20|alexvakimov|Merge pull request #28 from WeiLiweili/devel
4995f6ff210d68a60960a18a6e5db39c24a530ee|2018-11-20|alexvakimov|Merge branch 'devel' into devel
e7613e24272db6efd271d7a9a83a9f5818de735c|2018-11-19|Alexey V. Akimov|Added the state reordering algorithm to the Pyxaid2 workflows. Updated the tutorial
393a398afb3c0e4faa1298158515161f5079b840|2018-11-19|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
470486bcb4e1556432e58cb1b6e85ab37f82e880|2018-11-19|Alexey V. Akimov|Added the Kuhn-Munkres algorithm for optimal assignment - also known as the Hungarian algorithm. For now only the libra_py level
e090eaa83e182b3be3c514c120569e0afbceaf7d|2018-11-16|Wei Li|minor changes
8034d4f953712a2d6f95d5929afba73598d54ce9|2018-11-16|Wei Li|add scripts running quasi-stochastic Ham NAMD
3712cb552e9202d577b900ccb2a6abae7c2271a4|2018-11-14|alexvakimov|Merge pull request #27 from bsmith24/devel
bc9e9a5e1ca416811b5d90f165d11cdfffa22baa|2018-11-14|Brendan A. Smith|Added a new scheme to compute the ACF function for data sets containing elements of type MATRIX. While this method contains more bias than the other scheme, it is less sensitive to noise for large values of "k". Also updated the README.md file.
e9f0fe3e61d6e10fc58759e60d114f6c61ce8edd|2018-11-13|Alexey Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
b8505402bd734af31fee97c3ef7fdddfd2c796c5|2018-11-13|Alexey Akimov|tmp
e986a607ea1d83a160edd9f19b58aa6a1c2183ac|2018-11-10|Alexey V. Akimov|Added state reordering in the Pyxaid2 workflow
1db315b905ca1611351f7e5678bbbf61b8a55555|2018-11-10|Alexey V. Akimov|Revised the phase correction scheme in the workflows
9a04c7636240f4131ef944e952ca16667e7435be|2018-11-10|Alexey V. Akimov|Revised phase consistency correction in the workflows
8875c848e9775eab2888ec9f9edd667461468636|2018-11-07|Alexey V. Akimov|A fix in the LAMMPS normal modes example
154194267ee3de08165a5f7de1c0ba961ff15477|2018-11-07|Alexey V. Akimov|Fix in LAMMPS_methods
73378617406dd7e07d8d44fdfe6c7808c2fbd7f7|2018-11-07|Alexey V. Akimov|Fix in LAMMPS_methods
e33a3222b90f7df4492282c91b303fc3737afc6e|2018-11-07|Alexey V. Akimov|Don't know why these files show as updated, but let me add them here
dfbcfe82afc3ca2107658477f9726630a0d6badd|2018-11-07|Alexey V. Akimov|Updated normal modes examples and implementation
260707441934ba73a28313d27225626af86b7380|2018-11-07|alexvakimov|Merge pull request #26 from bsmith24/devel
b1dea3f5fb7bd1a89756e6143b72fb77c05fe9bd|2018-11-07|Brendan A. Smith|Reverted the file acf_matrix.py back to its previous state. Made small adjustments to the workflows.
86c63248eabae806b78a5935cdacbba1c71c9626|2018-11-07|Alexey V. Akimov|Added new modules to libra_py - normal_modes, units, and LAMMPS_methods, updated QE_methods with a new function, developed a detailed tutorial on the normal modes analysis from MD data, added new functions to compute deviations, mean and covariance matrices of the MATRIX and CMATRIX datatype, sketched couple more tutorials on the normal modes, but will add it a bit later
d10ab51553c3e6a35443db95135bb2f4518bbdb2|2018-11-07|Brendan A. Smith|Updated the copyright information
599316b73a6ab47aed3423c50e63c091715ca2c9|2018-11-07|Brendan A. Smith|Adding step3 to the pyxaid2 workflows. Some files/funcitons in step2 have been generalized, such as step2__noSOC.py -> run_step2.py. Wavefunctions are now expressed in the block diagonal 2-spinor format regardless of the parameter "nspin" chosen by the user.
e0a4206a8b3084e0f54a79ddcf929c99b25505a4|2018-11-07|Alexey V. Akimov|Added a method to read the MD data from the MD xml file and represent it in a convenient way
ed462837bcb7d506146ac832d9dd3c2fc52866e6|2018-11-01|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
1436862efd9dc0df172aa834f9453743724643bf|2018-11-01|Alexey V. Akimov|Added another example, organized examples, added the documentation of these examples turning them into a reasonably complete tutorial - it does cover most of the basic use cases
9eb1d204df81f7f3655a359364598df3c5666f9d|2018-11-01|Alexey V. Akimov|A number of updates on the Context class - added many new functions that make the access to xml files more convenient and intuitive
d680d6f49303666c4086cb767b72985b243dfc14|2018-10-29|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
aeb88fff3dafae1d59190e84e19d11a9732e58c7|2018-10-27|Alexey V. Akimov|Added some new infrastructure to nHamiltonian class to simplify its usage, updated some dynamics algorithms, added a new test tsh2 method, but it is only a development so far
b8ce3eb0c81a76d59c45272a93032a205f77ac49|2018-10-21|Brendan A. Smith|Wavefunctions are now expressed in two-component spinors format (block style), and as a result, minor structural changes have been to the workflows.A preliminary version of Step3 is added to workflows. Also, users can now chose nspin = 2 in step2.
c087e657dc5d92a1db68feb6eb6b1a346b3a961e|2018-10-19|Alexey V. Akimov|Added the demo animated png
6da3a38be439363d1258fa0ebfb50b4d6da07187|2018-10-19|Alexey V. Akimov|Updated the tutorial on rotations
5bfdee2e2798f10606e6d597e91cd02d8fde1b7c|2018-10-19|Alexey V. Akimov|Fixed the rigid body rotation functions used for the bodies manipulations
d187d4788774e5ecc54bd5971a5d1ed8f064fa1c|2018-10-17|Alexey V. Akimov|Added a new format
da10affd9d04946faf0cc42c740f6e23664c21f2|2018-10-14|Alexey V. Akimov|Added instructions to the workflows example
7459392657023e79a62b295e1a421cd15decd84a|2018-10-14|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
c4d972b940f847b4f342faa77d908a26def3170f|2018-10-14|alexvakimov|Merge pull request #25 from bsmith24/devel
711749f2f3a7d842be5c1c22f99fadb9ebc26c14|2018-10-13|Alexey V. Akimov|Added the Faist-Levine Hamiltonian for alkali-halogen collision
4197bc59eb9dc4abd02c981159539b24a3839a34|2018-10-13|Alexey V. Akimov|Added the LVC model in the init file. Added the Shenvi Subotnik Yang model
8a446c666722caed6d96f06082eb8c2eb9facebe|2018-10-11|Brendan A. Smith|Added plotting scripts to step2 of the pyxaid2 workflows. Added back the python implimentation of the computation of Hprime, and fixed a bug.
83e24756529bf2605bfaa28a0e8eee8ef2c34ae2|2018-10-11|Brendan A. Smith|Moved the workflows directory to the libra_py module. Users of the pyxaid2 workflow can now compute Hprime during step2.
733dc8e98fd0ac557111f9ef4cbcf6d3b313d2cc|2018-10-08|Alexey V. Akimov|Added a Linear vibronic coupling model
3acf28479e594e9a688415d1de53d685e6249adf|2018-10-08|Alexey V. Akimov|Fixed some bugs in the Holstein Ham
6b7fc63eedb56ce8aa31e4929f07d320002b5735|2018-10-07|Alexey V. Akimov|Updated files for analytic dynamics of HO problems, added arbitrary HO eigenstates quantum numbers
eff60c23210cac2baa52f876f08aaef83bbdaae4|2018-10-07|alexvakimov|Merge pull request #24 from bsmith24/devel
21587bf5f0e3c02281459a2434b533c3cb11131f|2018-10-07|Brendan A. Smith|Removed instances of redundancies in the functions that compute the expectation values of the operators q^2 and p^2
abf3e342be3bd1d00551540f39f10a3c074e884b|2018-10-07|Brendan A. Smith|The derivations for the HO are now complete. The computation of the  expectation values for the q^2 and p^2 operators is now the same for the analytical and grid methodologies.
c5cc8ff9b556915a701ef74a58f07e78026b841a|2018-10-07|Alexey V. Akimov|Made the analytic and numerical results agree for the HO. Refactored some parts of the code, corrected some derivations. Still q2 and p2 need to be corrected both in the implementation and derivations
59b1a4693b0f68e3327beafb238118265dfaa58f|2018-10-06|alexvakimov|Merge pull request #23 from bsmith24/devel
a0b7b6fbcf179817457773421f084805fd110330|2018-10-06|Brendan A. Smith|Improved the descriptions in the file harmonic.py. Expectation values for the analytical case are now computed using t.
dfd921cb31a3d807ba0301015f19925d6ca6accb|2018-10-06|Brendan A. Smith|The analytical and grid simulations can be run using "run.py". Added the frequency to the updating of the coefficients in the analytical case. Updated the Derivations.
4f4396a93e77ceb3484d4727ec82a5ccc6eecdbf|2018-10-05|Brendan A. Smith|Had the update for "t" in the wrong loop
417392d65311dbbd4127cf6a9dc96d528f313b85|2018-10-05|Brendan A. Smith|Found a bug in the updating of the variable "t".
508365ab4a0b3e7b8dd0f0ba12fc2025b37afdb6|2018-10-05|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
623ca200503b91a8504621c394eff0256e4df176|2018-10-05|Brendan A. Smith|Moved the computation of sqrt(norm) outside of the double loop in the function normalize_wfc_1D(). Running Example_4 shows the comparison between the analytical (harmonic.py) and the grid solution (run.py) for a HO eigenstate superposition. *NOTE* The grid based results currently different from that obtained analytically.
871a01d9c94d8153d4802237ab7498bb01be921b|2018-10-05|Alexey V. Akimov|Added functions for faster processing QE output and computing transition dipole moments in the planewave basis
52dbd8012409170e8f36ad8b8b09afa4a31df4c0|2018-10-05|Brendan A. Smith|Commiting the files to evaulate the HO potential analytical
e66847415d2d37bc8563b01573f665434cc7bc16|2018-10-05|Brendan A. Smith|Found an error and fixed it
5e85b9903a21b08c48845bf502dc16f830b67e31|2018-10-05|Brendan A. Smith|Added a function to the Wfcgrid class that normalizes a 1D wavefunction. Added a script to solve the HO problem analytically for an arbitrary superposition of HO eigenstates.
5aeada295a446a3aa27a71fcd315d650526ccf10|2018-10-05|Alexey V. Akimov|Added Holstein Hamiltonians, fixed Henon-Heiles, restructured TSH examples, removed redundant function in the dyn library, corrected levels in some functions in the nHamiltonian class
196f18116a26e78b22ec6f6b88e79ee8706ada63|2018-09-29|Alexey V. Akimov|Added functions to compute the powers of x and px for 1D wavefunctions
e9b197913c10deba5c9d4b759a018f29d3b3564d|2018-09-29|Alexey V. Akimov|Added printout of parameters when constructing initial wavefunction as a superposition of harmonic oscillators
ab5ba3447c1479fc196af0bdf9ca2e0e3dcb17f1|2018-09-27|Alexey V. Akimov|Added a new tutorial to show the construction of the initial functions as arbitrary superpostions of moving HO eigenstates. We can evolve these states and compute some of the properties that were added recently, such as the wavefunction norm, expectation values of x, px, etc.
64866c954bb6c16eda860bc04a955b10f6afafcb|2018-09-27|Alexey V. Akimov|Minor fix in plotting scripts
33e1bdeb048b3b06d1dfd43770bfe9c4ce9434f8|2018-09-27|Alexey V. Akimov|Added new funcitons to initialize the 1D wavefunctions on a grid - now we can have superpositions of moving Harmonic Oscillator eigenstates, as well as any arbitrary Python-defined functions
d53c23d24be8597b42f31940c7d963da7025de9b|2018-09-27|Alexey V. Akimov|Eposed a converter for complex list data type
7d5123db864371099bb595fb315070430aca56d7|2018-09-24|Alexey V. Akimov|Added new functions - to initialize the wavefunction as an arbitrary superposition of Gaussians. Only for 1D so far.
30b3282d5cae5ad7fe97fee20c0fb2a96dfb70dd|2018-09-24|Alexey V. Akimov|Added a number of functions for calculations with 2D wavefunctions, revised 1D and 2D calculations - so far there was no summation over coherence contributions. Added a small math writeup on the operations used in the underlying computations. Added a so-far empty readme file. Revised the kinetic energy propagator for 2D case - now it can take different or same masses for the 2 DOFs
14ddfff67b92ce90450c3387590970c23864a11d|2018-09-21|Alexey V. Akimov|Updated one of the tutorials on the quantum dynamics simulation, including the documentation
ad63c7b52b2345af6d2497049c29254e080d910e|2018-09-21|Alexey V. Akimov|Exposed another function to compute the barrier passing rates - via computing the flux through a dividing surface
3258477d0d41d8c710b1b466a926e7dfc20e2149|2018-09-21|Alexey V. Akimov|Added new example showing simulations with the Wfcgrid class - how to set up simulation and print out properties, etc. The older tutorial is moved to a corresponding sub-directory
a9266ca5dff9cda5683da71858fa8511ba942747|2018-09-21|Alexey V. Akimov|Added new functions to the Wfcgrid class, corrected the printout of the Kx and Ky axes, exposed more data members of the Wfcgrid to Python
2b81fcc97c6f771e317c3ee8ab43a1e7d75b7618|2018-09-21|Alexey V. Akimov|Some fixes with the FT function deprecation
a60d39df18624c16312f50eb69df3aa2862f3e2e|2018-09-21|Alexey V. Akimov|Added example script and unittest script for validation of Fourier Transforms
e78deae2ac5f664034c3fe5330c02af4e6729f8f|2018-09-21|Alexey V. Akimov|Hide the CFT functions that take dk as an input - their effect is not certain, but something doesn't work well
eebb56a29d86338a9e5bf151dcc0bb67c140d5c1|2018-09-20|Alexey V. Akimov|Fixed a bug in initializing momenta of the wavepackets
8e1f58cff8d2bd3ab0765adfb3869c86db092038|2018-09-20|alexvakimov|Merge pull request #22 from bsmith24/devel
7f4d3091fffd14baf80d0f641a7752b81e378dcb|2018-09-20|Brendan A. Smith|Now calling the reciprocal grid, instead of the real-space grid.
7dba29fcfb594cc60d8e81aa67097c173df99f57|2018-09-20|Brendan A. Smith|Added a function to print the reciprocal wavefunction in 2D.
5607a0a111a7ada0c6fe8926a9c1136cdb17dd35|2018-09-15|Alexey V. Akimov|Merge branch 'devel'
be85303aadcf57982cfdad8ef6ab9d061259337d|2018-09-15|Alexey V. Akimov|Potentially fixed the possible memory leak issue recently reported by xielm12
28e11dfc740f9f4cdcf42621dd33e135ce84803e|2018-09-15|Alexey V. Akimov|Filename fix
d130081901a8476da2e5d4ebf1f213f127604fa6|2018-09-15|Alexey V. Akimov|Filename fix in the libra params
ac9d526254963064bb60b93784339cc156d6fd9f|2018-09-15|Alexey V. Akimov|Updated CMakeLists to reflect the recent move of the Libra workflows inside of the libra_py module
a5998153e81b1980821ca3eadb1c3f09096b16d4|2018-09-15|Alexey V. Akimov|Added an extended test set for reordering algorithm implemented in the C++ backend
7ae13be58435351909eabbbe8711010ae6520d42|2018-09-15|Alexey V. Akimov|Updated the Si QD example
ff0fb3453a84cdc566ddbb781e57a11429ee8947|2018-09-15|Alexey V. Akimov|Added gitignore and instructions to the lattice MC example
6c726a0efbda9f2ac603a7cebe8fa9a6583e58ee|2018-09-15|Alexey V. Akimov|Finally learned Markdown and revised the README file
011300d17fed4fbaa0dec6c6c2f8c396d6127e45|2018-09-15|Alexey V. Akimov|Updated file tracking in the wavefunction example
85647afaedccb0ede0db3cd20129a057f8ce898c|2018-09-15|Alexey V. Akimov|Added gnuplot scripts essential for generating a movie of quantum wavepacket evolution
2e56aeb70efe34944359573d81488fa92180ece8|2018-09-15|Alexey V. Akimov|Added animated picture showing the rotation of a rigid body as computed in one of the test scripts
7767b5ccd567f022df36205ece53937f00718e16|2018-09-15|Alexey V. Akimov|Added pictures of the example output
2509d6f2c81215c8b059a6c44d285e10a564209f|2018-09-15|Alexey V. Akimov|Added an example on doing computations with SOC and noSOC wavefunctions obtained from QE. Also the input files are present
5937c600abf8d55214034f6fd97df93220a8ba25|2018-09-15|Alexey V. Akimov|Added an example of Libra-PySCF interface
15da26a9edf62316e2014200e8a7a272b7ea3b20|2018-09-15|Alexey V. Akimov|Adding same commits as those that are already in the master
7fa47a9526b44e73688050e33f9aff4b373295bc|2018-09-15|Alexey V. Akimov|Maintenance
71be9884340856ad63d626ba592cf7e39618398e|2018-09-15|Alexey V. Akimov|Added stuff manually in the master
0476f38585788486e7a03cfa47a5ea6762e2e0e8|2018-09-15|Alexey V. Akimov|Merge branch 'devel'
d302ff9d9772d09dba0a26d2f58c117fa871c60f|2018-09-15|Alexey V. Akimov|Old changes on master branch
879da0711445b971390160d419bcb36a99434197|2018-09-15|Alexey V. Akimov|Brendan's new developments of the pyxaid2 workflow are added
90fe980c9f3e3eff7e64591f4100979b4d915651|2018-09-15|Alexey V. Akimov|Filename fixes
3e6b128f22fa824f4139a48fe72e63464d72a19a|2018-09-15|Alexey V. Akimov|Added the Ehrenfest2 function which has a simplified interface wrt Ehtrenfest1, added new models to the Libra collection
c613e6f3825ffcce904789c09d89d0d8872e7628|2018-09-14|alexvakimov|Merge pull request #21 from bsmith24/devel
7cc2a4b0e6723c66604e79dbf9a17ee4442cf9e7|2018-09-14|Brendan A. Smith|Made additional corrections to the file compute_hprime.py.
db579999c8053967b9595f35f0a045b9e05072d2|2018-09-14|Brendan A. Smith|Fixed mistakes in the computation of Hprime.
10fbf29dd7f2e5b3bcd1553d81fefaa0aac15c0c|2018-09-14|Brendan A. Smith|Added descriptions to each function located in workflows/pyxaid2. Loops in compute_Hprime are revised for optimization.
1a9c50f1f5b595f8c97ee2fd8a4dac88c0c8afcc|2018-09-13|Brendan A. Smith|Adding the Pyxaid2 workflow and a working example using Si.
9aeb52033846840dd187136b0ec868fb90596f6d|2018-09-07|Alexey V. Akimov|Added an example of fully quantum simulations using new features of Libra
3ac08d27cc5fa5bc92ca4d460b18a4d225028220|2018-09-06|Alexey V. Akimov|Float convention fix
e3623f1ce059787bf6cb2108a0d3e58c67c5bdda|2018-09-04|Alexey V. Akimov|Added phase correction function
e3fe8cf73de37af4e9dad126b6af3db42ec75e6d|2018-08-28|Alexey V. Akimov|Moved workflows to the same level as libra_py
cf29f3660c0ec33b64ab9b284351cbcbb057dbb1|2018-08-28|Alexey V. Akimov|Added rep and act_state to Verlet and Verlet_nvt
e278c9e84906a04ba55d00c2015f589946c5d106|2018-08-05|Alexey V. Akimov|Enabled the use of external functions setting up the nHamiltonian data members in adiabatic representation to be an option in Verlet integration schemes. Added ECTR model of Tully at C++ level. Exposed DAC in new style to PYthon. Defined Tully models 1, 2, and 3 in terms of the C++ defined functions
657614d9725b05ce1e03d5d98dd3984ce69bb146|2018-08-02|Alexey V. Akimov|Fixed mathematics bugs in the ETHD3 formulation
832889b097f7df610ac5dae6cffed672e9ed9741|2018-08-02|Alexey V. Akimov|Added Henon-Heiles model
e4ba965eaf6fa6e452f506ca8bb4983dcb127fc0|2018-08-02|Alexey V. Akimov|updated the entanglement options in the NVT Verlet integrator
49ab0b0b170dd9fa0e9aae075b52e18ab30b0340|2018-08-02|Alexey V. Akimov|Added another convenient setup of the fully-quantum calculations with a customized Python potentials
957685bb9f81d49aabd7e111e7bc82c234ace037|2018-07-24|Alexey V. Akimov|Added ar.xyz file to the lattice monte carlo tutorial
7daa4fc6b567292ffb72391f63d3500113e2c308|2018-07-23|Alexey V. Akimov|Fast fix of acf
69d7bf2263b19dffbda6be46e5fcd4517d101011|2018-07-22|Alexey V. Akimov|Added ETHD3 codes, which is only an experimental feature
7c2164d536bf22abd87cf3c79981d891690671fc|2018-07-20|Alexey V. Akimov|Fixed the bugs in the MSDM function and also exposed it to Python
f51607b0392d2b5d94290d1feef73bb64b9e59be|2018-07-19|Alexey V. Akimov|Added SDM and new modified SDM methods for decoherence corrections
2843aab434e8a49c94d4481a7423119b77c3c584|2018-07-19|Alexey V. Akimov|Added methods to compute sum, products, and sum of powers of matrix elements of columns or rows of the matrices
6496cad74fd909d6b1aeec4a86a3438bf9a8d871|2018-07-11|Alexey V. Akimov|Added the proj_dos script and fixed bugs
8fb12162ff2998b28c1ce212b8131dceccbd34cf|2018-06-25|Alexey V. Akimov|Reorganized tutorials for day 1. Now they are in folders Tut1.* Added new tutorials for day 2. Tut2.* Tut2.1 - simulation of water cluster with all-atomic or rigid-body MD methods in NVT ensemble. Tut2.2 - NVT simulation of SubPc/C60 system. Here, we use the most compact function for simulations,          available via State class Tut2.3 - NVT simulation of periodic solud (Gold). Also, added functions to compute specific heat capacity of gold.          With a sufficiently long calculation, the agreement with experiment is quite good. Tut2.4 - NPT simulation of gold. In order to get going, I had to re-implement the function of the State class in Python.          This helped to find the bugs and fix them. The missing elements were added in the previous couple of commits.          Well, the energy is not quite conserved yet, but I think I just miss the conversion factor in the barostat energy.          Other than that, simulation works good.
3dc9f0814ce49e7420f5eec241ae5b3ca919ddde|2018-06-25|Alexey V. Akimov|Exposed extra members and functions in Barostat, MATRIX3x3, and QUATERNION classes. Added new function in Hamiltonian_Atomistic class - to compute atomic virial. Also, fixed two Vdw_LJ functions to compute atomic virial contributions, not only the fragment one. These corrections should be sufficient to make NPT calculations running
4ff72b162708850169d8711ba60d604b1d8e933a|2018-06-22|Alexey V. Akimov|Added tutorials 6 and 7, made further corrections in thermostat used in other tutorials
d7e1f528b6d8331aa5bfd8cc408a216cf427f561|2018-06-22|Alexey V. Akimov|Added Tut 5 and updated other tutorials
45353f8df53fb494395859ae39c50c039a203b98|2018-06-22|Alexey V. Akimov|Initial version of some of the tutorials and examples for the Summer School 2018
589cad8ed0620f53aecfaf9a0d1314e22c9fcce6|2018-06-21|Alexey V. Akimov|Updated acf module - the former one now becomes acf_vector and a new, more general, version is added - acf_matrix - which can compute ACF of a multidimensional data
68a87c039ec6b8ac29a1690aceff3714bfa23964|2018-06-19|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
9e8c1fdfd9c1341c1e09a2b30f02bb67306160ab|2018-06-19|Alexey V. Akimov|Added the workflows module - something that is meant to replace Pyxaid and Pyxaid2
cd7b1426d0e9bab673c6756a2683b36e475dc5ac|2018-06-19|Alexey V. Akimov|Added examples using the workflows module
536ea970335fe8dc3fdfddbd930c8eca82c8c0a8|2018-06-19|Alexey V. Akimov|Misc updates in the tutorials
ad4323af222675773065d083c014b97efd2e3660|2018-06-19|Alexey V. Akimov|Enabled scaling of the columns and rows of the matrices
d4d446aa42966435e4dfd78834f55df5089a4252|2018-06-19|Alexey V. Akimov|Added Verlet algorithm coupled to a thermostat
c9e52e90c8473d9173dbd25ffde6cf7f842f4de3|2018-06-05|alexvakimov|Merge pull request #18 from kosukesato/devel
11e6d0e13ed51f5a85791058610ce869f9a1ae7c|2018-06-05|kosukesato|added another Surface Hopping method under neglect of back-reaction approximation
80ea77aa5ad96e05bee6f3394657f40de82de11c|2018-06-05|kosukesato|added a MSSH method with Boltzmann factor
ef9216f64f516ab2c611785844b780f4d12ad02f|2018-06-05|kosukesato|tsh probabilities are scaled by Boltzmann factor
dc728a6a880ff055502990515cd7402ce41a06e1|2018-06-03|Alexey V. Akimov|Moved some of the common-use functions from Pyxaid/Pyxaid2 to libra_py
05742b66aa64f7dc5d3a605740f4cf991e35a135|2018-06-01|Alexey V. Akimov|added the forgotten file
a707c3cf52a83728d8ee4178e60282660263681a|2018-06-01|Alexey V. Akimov|Added the regelib module and used in the LoadMolecule module
cc3738a9b09e525c94666b92c6437d6bb56e7348|2018-05-29|kosukesato|older version is recovered.
09d642adc1fd9beb441d0d576c3d5fc0b1ee0b36|2018-05-29|kosukesato|Alexey's version is recovered
29cc268ce8735bd9ff9943d9a3b3cdd33b9b051f|2018-05-29|kosukesato|deleted
dcf8c6b442664595a62a3fb28a1b0a5025b58124|2018-05-25|kosukesato|back to the previous version
1878de30b7557ded668a208da33da66ebeead240|2018-05-25|kosukesato|keep original version
384f0bb3969437aafa8b0d4e9cdd049c4a5cbf16|2018-05-25|kosukesato|delete g_*
6d80dbfd72920750f947bdad0401cff3fd1cfb79|2018-05-25|kosukesato|merged conflict
c02852fb727f6d03be90d0d81c59bd56809a2b7c|2018-05-25|kosukesato|MSSH probablity can be scaled by Boltzmann factor
757e7b291b819bbbc11554202b5bd215cf87527b|2018-05-20|Alexey V. Akimov|Implemented the phase correction and reordering with the multiple trajectories TSH
83ba981ba2cabe5a900743095163e36aea6ee02e|2018-05-20|Alexey V. Akimov|Implemented the phase correction in the C++ tsh0 function, added necessary auxiliary infrastructure - both in the nHamiltonian class and free functions.
168db69e3d92e90179da59ad7ef16b98fd80717e|2018-05-19|Alexey V. Akimov|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
8ea1f6438f01f1f8d92a1ee9097e2c6510c22a5b|2018-05-19|Alexey V. Akimov|Finally resolved the problem with the state reordering - we also need to take care of the state re-phasing, which is now implemented in the test_tsh0.py script - with it the Tully model 0 seems to work correctly.
1dcd150df52f3ca2267e5a181e339f8b5a2d587f|2018-05-15|alexvakimov|Merge pull request #17 from bsmith24/devel
d4b18a2d26b1e6b7823136cc23abfaf457dc32f9|2018-05-15|Brendan A. Smith|Users can now specify the name of the output files in ETHD simulations. Organized a plotting file and clarified its name for 1D ETHD
12d493596cdd764b6b3cf806bf02a31ba6ffdf2b|2018-05-15|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
e28f436475c6aa00a9d195c36eaef55ce626e5bd|2018-05-12|Alexey V. Akimov|Revised the tutorial example to reflect changes in the TSH1 function
45e481368cd0991f18d72e77071e2893ea8e36db|2018-05-12|Alexey V. Akimov|Adjusted the functions for computation of the observable properties to the new signatures of the TSH1 function
a234e12d7171fbed8376c17e1ee6f49633c56b47|2018-05-12|Alexey V. Akimov|Revised the structure of the TSH1 function in view of the new convention (in the preparation) for state reordering and associated mappings. Revised the function signature. Re-exposed a number of auxiliary functions to Python
1fb5a99ab4ae9f6fa433a75e748949ca95dbb9c6|2018-05-12|Alexey V. Akimov|Added more auxiliary functions for permutations, also the function to compute an inverse of a permutation
e975410032145ce23a3c7388704efdcb2a03c9c2|2018-05-12|Alexey V. Akimov|Reimplemented the reordering function from libra_py.unavoided Now the function is in the core of Libra code. Importantly - there was a bug in the Python implementation, so the Python implementation is discontinued, but the bug is fixed in the C++ implementation. Added a few other utility function in C++. Added an extended test suite validating the reordering algorithm implementation.
831efd2061a3f028041d9f3bfa85797fabeb026f|2018-05-11|Alexey V. Akimov|Added TSH test scripts 0 - for testing phase correction and re-ordering, 1 - for doing single trajectory calculations, 2 - for douing many trajectory calculations, but for a single initial condition, 3 - for doing many trajectories and multiple initial conditions (scattering)
56d1d1149228be36bb0c3b518334a8e414119795|2018-05-11|Alexey V. Akimov|Updated the TSH related functions that compute various properties (density matrices, energies) according to possible state reordering
3df4275b6c2d751e198e283e37c2d12239df2fc9|2018-05-11|Alexey V. Akimov|Further elaborated TSH functions and related auxiliary routines, added more interfaces - function variants, revised modularity of the code, took care of the state reordering in TSH - this is yet to be finalized - Tully's model is not yet working, but the reordering is taken care of at least to some extent. Further modularized the implementation.
6c769a8a6bad8583af37817185f4a78bdb62fd15|2018-05-11|Alexey V. Akimov|Implemented a number of utility function in the nHamiltonian class - such as reordering and related getters and setters
52d1ff95744916d8dbeef3ebabd686b813c13397|2018-05-11|Alexey V. Akimov|Added a number of utility functions to handle permutations, test function to keep track of reordering of eigenvectors in some of the eigensolvers and related functions (experimental). Added new functions in the base_matrix class to reorder columns or rows of matrices according to given permutation
f9b6f14b8be3b0ac44caaeeb8ca2172973a9d9d3|2018-05-09|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
8704ef14ed1e2cad0d1eea203ac73dde5c3a2ce0|2018-05-09|Brendan A. Smith|test_verlet.py and test_verlet_ens.py have been altered for clarity w.r.t to the tutorial for the Nuclear Dynamics module. A plotting script has also been added.
86a7d969ca6364d8b44a15ee0bdd00d2990807ff|2018-05-06|Alexey V. Akimov|Removed plotting the movie snapshots from the main plotting script
bc9c072de08f10b81b48448175085a6fe97b2fae|2018-05-06|Alexey V. Akimov|Revised the 2D ETHD model scripts - minor fixes in the plotting
43b8bb5819988ebd385baf45e760d64e93c66972|2018-05-06|alexvakimov|Merge pull request #16 from bsmith24/devel
771a9b6ee7db0148d4891860a88505a9b2ef41c1|2018-05-06|Brendan A. Smith|Adding Martens' potentials to the libra_py module
a1d4d036e3846fa1240cff02d82970a49d9c87dd|2018-05-06|alexvakimov|Merge pull request #15 from bsmith24/devel
5528bf237cf201a66c3ea0a91c8820ac0df2047f|2018-05-06|Brendan A. Smith|The sample to generate trajectory distributions is now defined in tsh.py, which is located in the libra_py module.
f993ac022c97e27a70ffc965d63f71bb84b01c92|2018-05-06|Brendan A. Smith|Moved the models for 2D_ETHD to models_Libra and models_Martens, in the libra_py module, and changed the format so that it is consistent to that found in the libra_py module. Also removed unnecessary function calls.
7e8eb8c2dd78b18f71b6522f6472d3979c13d4a8|2018-05-06|Brendan A. Smith|Adding a test script for running ETHD in 2-dimensions. Various 2D potentials have been added. Also, plotting scripts for viewing 2D potential surfaces, reaction probabilities, and trajectory ensemble evolution "movies" have been added.
59fbc23e0ed4f2cbbb6620118176c56e5f2e8c69|2018-05-06|Alexey V. Akimov|Made sure that the dynamical tutorials work with the new re-implementation of many Libra classes. The new updates allowed simplify the scripts handling multiple trajectories - we do not need to have the nasty loops over the trajectories in Python, at least in most of the places - such loops are handled inside of the called functions, when appropriate parameters are used. I have made sure that all - Verlet, ETHD, Ehrenfest, and TSH methods work reasonably well with one or many trajectories. Some of the tutorial files are renamed for more logical file system. There is one important problem remains to be solved - in the TSH method we do observe the inadvertent re-ordering of the states (very likely due to do some degeneracies in the Hamiltonian). This leads to a drastic mis-representation of the scattering probabilities in the Tully1 model as well as to the abrupt changes of the state indices (identity). This problem seems to appear only when we work in the adiabatic representation - if the diabatic representation is utilized, not changes of the state nature occurs but we do not have surface hopping in the diabatic basis either.
aec5f3ccb8e13fba39cfec3475e900d9d7fc1b67|2018-05-06|Alexey V. Akimov|Revised the code substantially and introduced a lot of new stuff to make handling of multiple trajectories convenient. The trajectories can be handled by the Hamiltonian of the top level or by the sub-Hamiltonians. Generalized the propagation of multiple copies of electronic DOFs, decomposed files implementing Ehrenfest-related stuff into several more specialized files. Add the TSH functions, including those needed to handle multiple trajectories. Added a number of model problems (e.g. those used in the former Ehrenfest tutorials as well as the first Tully model to the libra_py module, so we do not need to re-implement these models several times in different places. Added some of the common functions used in Ehrenfest and TSH calculations into the libra_py tsh module for re-use and better consistency
b91ade032ba3ee4b4dfcf3dd1ad2d8f6c1ee2d8e|2018-05-01|Alexey V. Akimov|Fixed the FSSH hopping probabilities implementation in a more general way. This fixes some of the problems we had with the TSH algorithm. The example is added showing nice performance of the TSH algorithm for 1 trajectory - hopping occurs and the total energy is conserved
78aaef47a1a60efb7d200857ebb1601285894f46|2018-04-30|Alexey V. Akimov|Added the first tutorial on TSH testing the revised version of the library, but I haven't tested it yet.
ffccd9f77b8823137e495f775747740c5e48941f|2018-04-30|Alexey V. Akimov|The TSH modularization and extension is almost done. The generic TSH method is implemented and exposed to Python.
e18d2753172653e0e1badbab3c5eb0e19c573f78|2018-04-30|Alexey V. Akimov|Modularized the TSH functions and organized their implementation in a more transparent way. Added new functions, also including the nHamiltonian class input
e43b351c2f2a786dbedc1f156b86ff5098b6a0ec|2018-04-29|Alexey V. Akimov|Added a new tutorial on sampling points from arbitrary distributions using Metropolis algorithm. Demonstrated its use for sampling quantum distributions corresponding to particle in the box wavefunctions and the Harmonic oscillator states and their superpositions
ceebbaed670c3cbc6d5ae135357f3fc8c318b2bc|2018-04-26|Alexey V. Akimov|Cleaned up the ETHD example
b3ef8f9dbc5ac33bf00ef61c2bcb975b59c422e5|2018-04-26|alexvakimov|Merge pull request #14 from bsmith24/devel
0f6d50ad08e519cae3d0b11e02b9a38f63a4d5af|2018-04-26|Brendan A. Smith|Added comments to run_test1(), ETHD reference. Also added the plotting script, test_ethd2.plt.
7c9f7bf8d6997ba895d82666804bf65fb4543cf5|2018-04-26|Brendan A. Smith|Removed the creation multiple folders in run_test1()
90b5a2a6ef2a1270a2d9693f9d112d7a16c8be0c|2018-04-26|Brendan A. Smith|Reverted back to the original format, and added a new test, run_test1, to test the symmetric double well potential. Also, plots the phase space, tunneling, etc, for multiple trajectory simulations.
c90341f6722e0346c281ce4c26d66a00a3303984|2018-04-26|Brendan A. Smith|Made a minor change to compute_etot function and added the symmetric double well model
9a675cd2f19c30ee5da63c806f00010790abbe57|2018-04-26|Alexey V. Akimov|Fixed yet anouther bug with the ETHD - I was adding the ETHD force to the regulard gradient. Should have been adding the gradient - now the sign is changed. Also, updated the test script a bit. Well, the dynamics work, although the total energy is not well conserved, probably because of the stiffness of the entanglement potential
1b5e8021f4e3a112fe181bb5b53fc33c67e2d938|2018-04-26|Alexey V. Akimov|Fixed a few bugs with the ETHD, but something is still not quite right. Added the test demonstrating the ETHD run
f8f512b9931ca85502489910eb5b9ec4e2ce6db7|2018-04-25|Alexey V. Akimov|Added the ETHD Hamiltonian correction and its used in the Verlet1 function - Now we can propagate ensembles of coupled trajectories
1fbd527bb20c454f2d38772ed62da3dc44ce9915|2018-04-25|Alexey V. Akimov|Added the ETHD forces and energies module
7defb3ba34226b08c7b7ac7eeb9b3749b029bf07|2018-04-25|Alexey V. Akimov|Extended the functionality of the nHamiltonian class, including checking the dimensions of the input matrices passed tvia the Python-function return. The Ehrenfest dynamics methods are fixed, including fixing a few importnat bugs in the electronic DOF propagation. Added a tuturial showing how to run Ehrenfest dynamics for an ensemble of trajectories - using the Ehrenfest1 function
cdd79ecc6d3c08b9b0f20f4f088d169d2716bf72|2018-04-23|Alexey V. Akimov|Oops, the updates on the demonstration examples are actually in this commit
da94e430f83be9beadb774ff377815f47c3a2e4a|2018-04-23|Alexey V. Akimov|Revised Hamiltonian class again and extended it to allow handling hierarchies of Hamiltonians, added many suitable member function to this class. Revised some of the dynamical algorithms to allow running them with the hierarchy of Hamiltonians objects. Added the examples demonstrating the velocity Verlet scheeme for single vs. ensemble of trajectories. Updated the Ehrenfest method demonstrations - works as before. The example of an ensemble of Ehrenfest trajectories is yet to be developed. Also in this commit - added the file with the EHT parameters - in the Python file format, so one could start directly with it rather than an input file. This development is only in the progress, the file is not ready to use, but I think I would put it here anyway.
5e35bc37520ae211ad7412dec1025d91b2f4db14|2018-04-20|Alexey V. Akimov|Introduced a number of fixes into the rigid body and fragment rotation procedures. Added an example showing the rotation function of the RB class in action. This is not yet fully working - some math should be revised.
9a76ef7e5163aae65cf9118d5767f0109356a0e9|2018-04-16|Alexey V. Akimov|Updated CMakeLists - works with WSL
ba6ac649cc23415ef66c89fe1525b57e5af88d4a|2018-04-09|Alexey V. Akimov|Switch the default build option to be the one for the Cygwin
b11647e8c66443e8b1b412299426e4d5c2450c42|2018-04-09|Alexey V. Akimov|Updated the dynamical algorithm to reflect the update of the nHamiltonian class - now we do pass the dynamical variable to the corresponding algorithms (e.g. Ehrenfest of Surface hopping to update them) rather than evolving the variables that are connected to the nHamiltonian class tightly which was inconvenient and non-modular
3c07585d04e6aebeda45fdeff9fbca47ebf3f5a9|2018-04-09|Alexey V. Akimov|Updated the Ehrenfest examples to reflect the updates in the nHamiltonian class
f57a0c0580a5052d5744454feccd666534f57242|2018-04-09|Alexey V. Akimov|Disentangled dynamical variables (amplitudes and density matrices) from the nHamiltonian class
05c649fbdf95dba29dd6adce593f84136ca675e5|2018-04-07|alexvakimov|Merge pull request #11 from matt-chan/devel
2a671282540afcdf1b25b773aacbeae503847739|2018-04-07|Matthew Chan|added conda recipes
bc4a14eec657d172010b4935558c8a2cb2c820d8|2018-04-04|Alexey|Added an example showing the capabilities of the Ehrenfest dynamics algorithm that relies on the nHamiltonian class. Updated the older Python-based example and plotting script
20499f742235dbff10653cfe016cb10d4b72c140|2018-04-04|Alexey|Misc fixes and clean up for the Ehrenfest dynamics
d9280fdd3d26fe4afc2d5307db26248084b8eacc|2018-04-04|Alexey|Added the functions for propagating electronic DOFs using the nHamiltonian class. Also, implemented the Ehrenfest dynamics algorithm (in two representations) which uses the nHamiltonian class
ae87fb2b817b87ce0c49ed063bd2cdd196906a91|2018-04-04|Alexey|Added functions for dealing with NAC and vibronic Hamiltonian in nHamiltonian class
b538ccf22cdbf872fe7709063615e3e86b7c3647|2018-04-03|Alexey|Added an example showing how the new Verlet function works
c0c8fa3c7c7a5f9d313a22380c22cbc363038104|2018-04-03|Alexey|Added a dynamical algorithm that uses the hHamiltonian class to organize the computation of Hemiltonian and related properties. This is also interfaced with Python in such a way that one may define the function that computes the Hamiltonian in diabatic representation directly in the Python layer
a16a2c27008740adaf4e3369bcc77e741acc06ab|2018-03-16|Alexey|Included the opt and montecarlo libraries into the core module
77b3450b750535419d46069326b5847db66c2d91|2018-03-02|Alexey|A fix in the filename
5949d60197629e3ea121c69083c5eeaae2cdc26d|2018-03-02|Alexey|Added printing out the energy and added a gnuplot script to plot it
48914d942e8fe9361c5ee199e9361655d1e2f51c|2018-03-02|Alexey|Added an example showing a Metropolis-based MC optimization of a doped lattice
8047649a7e9e36a728285b54ce2b8e7c872594c0|2018-03-01|Alexey|Added another example showing how to prepare a supercells from the unit cells in different coordinate systems
390ca1e3a5325965d6eaf61110845bcd11af7156|2018-02-28|Alexey|Added new library - implementing the Metropolis scheme. Added an example showing how it works
98cafee5aa526e0ff09c9d0d30e6d6956b09a38c|2018-02-28|Alexey|Added an optimizer library. So far it only has a gradient descent functions. The function can be applied to Python functions to optimize them
168049abef45a077169ce9b748d5b81aa9eb6bd5|2018-02-28|Alexey|Added an example showing how to use the external Python functions to compute diabatic Hamiltonian inside of the nHamiltonian object
38e757fa43dccbe6de9dbcdbb94c1d8bacac644b|2018-02-28|Alexey|Added copy-constructor methods to MATRIX and CMATRIX classes
60d56901bce42a0bbfb30798422b299c6de8ceb9|2018-02-28|Alexey|Modularized-refactored the files corresponding to the nHamiltonian method and added the functions to compute the diabatic Hamiltonian via calling an external Python function
6447cdf0e927a1598ff450accbacb3b0cb6b90bc|2018-02-23|Alexey|Added the read_xyz_crystal function to read the crystal coordinates in the xyz format
486a455d7068dfdbbcbbae67567c1d3d549052ff|2018-02-20|Alexey|Added a few fixes in the main script. Added missing files that are needed for running the calculations
28d47267dfacfbd95eac0c94b8add03935e5751c|2018-02-19|Alexey|Added a new example with the script to run atomistic NA-MD with EHT in Slater determinant basis. The script also shows how to perform a single point calculations - with absorption spectrum, pDOS, and orbital generation
44296effa8579c8feaa946c6744d4c85f2116647|2018-02-18|Alexey|Added the functions to compute the overlaps of the Slater determinants
2706dd4aca050b591be05f13f616145911536dce|2018-02-18|Alexey|Added new data types to represent lists of lists of simple data types - e.g. intList2 to represent a list or lists of integers
aec1f1d301bd5ad839ebfd11ed2ce4f445b8a412|2018-02-18|Alexey|Added new modules - scf - for convenient SCF calculations with atomistic Hamiltonian and namd - with the functions to compute the vibronic Hamiltonian in the Slater determinant basis
607930b21eeec5bbe342c216a5780948012a2f7f|2018-02-16|Alexey|Added some auxiliary functions for dealing with the pre-computed electronic structure. For now, I have added an option of computing the electronic spectrum and printing orbitals out
fd5ffcf105e2ffe974c39954bf9899c1048fa6a8|2018-02-16|Alexey|Added an option of not capping all atoms
514311df1e7a68412c21e4c0c54b3e2b672e4c92|2018-02-15|Alexey|Fixed a bug in crop_sphere_xyz3 - now we don't place more than 1 atom as the capping atom
54e6890f0e09ebe487558aa954de9d47ed85fb38|2018-02-15|Alexey|Added an example showing how to generate a QD of needed size
12dfc26c9264aec9ce84c3103806f5951f7307a6|2018-02-12|Alexey|Got rid of the older tests that relied on Hamiltonian or Model_Hamiltonian classes. Since we are going to switch to the nHamiltonian class, only the examples that rely on it are remained (together with a few older files that still need a revision). The new TSH test is added - it is ensured that the total energy is conserved when hops hapen. The Ehrenfest example was tested a while ago - now just renamed the file.
4041876efe2ad1b0434316dafee32198639115f7|2018-02-12|Alexey|Corrected a bug in the TSH function (only the new one) Bug - we used the derivative coupling between the old state and the old state (zero by definition). Also, added the precausion measures to ensure we don't run into divizion by zero, when coupling is negligible
d7fcb6c180bc921ff683cfbc6aed5fe16d110606|2018-02-12|kosukesato|added another functions where hopping probability is rescaled by Boltzmann factor
9057929b53a83f2618b894802c3996718a2b14fd|2018-02-11|Alexey|Made sure we don't call the eigensolver for the 1x1 matrices (1 diabatic and 1 adiabatic states). This would be unnecessary - just copy the diabatic Hamiltonian to the adiabatic one and set the transformation to the identity
ac9a2623365c67421674ee8891b287a8e644b394|2018-02-11|Alexey|Added a return statement in the helper function
954834e6aed1c71260d3b03380b5db263005e225|2018-02-11|Alexey|Revised the example file. Cleaned up and generalized.
7e07e06fbf05b6b73452694f10d3454479637074|2018-02-11|alexvakimov|Merge pull request #10 from bsmith24/devel
322de62a42ec26b197ceb3a999727c27b3d9ee50|2018-02-10|Brendan A. Smith|Added a return call to the helper functions
f7fb38a009b0100bb07389a8c0867850562b6b21|2018-02-10|Brendan A. Smith|Added a return call to the helper functions
a3e13c0b3fce68842097c5006cabf60547c3b028|2018-02-09|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
9b3fddefd39b577aee71f03f63aa8d7909dd93b5|2018-02-09|Alexey|Added the 2-state 2D sine model potential
bf00877f575ce9005c083f9830a8dfc9e0c3cf00|2018-02-09|Alexey|Added the 2 state - tanh barrier model Hamiltonian
b1a1de8bde77e9b5d8776b8398ffa55d119cab58|2018-02-09|Alexey|Removed the double well potential on its own, extending the potential classification, added the helper function to setup model parameters to values reported in the published works, added the 2 state SIN potential - generalized it in comparison to the earlier version
2c9008cda88832a8dce033fa96ff95645bdc7b90|2018-02-09|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
0a93640561cb327d47dd17b63003f2dca6b48f18|2018-02-09|Alexey|Added an example showing how to convert between C++ types exposed to Python via Libra and the native Python types
44f6dd2bc3da2f93926d7b25919354a8dd4ba5dc|2018-02-09|Alexey|Further re-organization and systematization of the model potentials
e864f13169d8a573b8b961c29c3b1dcaffe2a70f|2018-02-09|Alexey|Fixed a strange bug in the converters
a311a95e49d3688f0327989dba458fc8c198fa05|2018-02-09|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
08366cd4150ec36d72a5b9a3779cdcd16a1e2da7|2018-02-09|Alexey|Reorganized the collection of potentials, introduces classification, and added harmonic and anharmonic potentials
9249446455d12a76d3d20e8d53dc3a724bc79ba9|2018-02-09|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
3e8972ca3db5eb68fde309484c2f6c173e5a8c6c|2018-02-09|Alexey|Added a few fixes
8498da599778fc0fb1d3336f46a8001cc63329e9|2018-02-08|Brendan A. Smith|Tully's DAC model is now working with nHam class
802be6da9e79cf4c1382a70d28ec7244c8321490|2018-02-08|Brendan A. Smith|Tully's DAC model is now working with nHam class
4dcbf77bb270b88dfa0eb7971e43b184a7028aa8|2018-02-08|Brendan A. Smith|Nuclear propagation using nHam class.
4bd23ee04c94311cf9019c6d0b41fba66917804a|2018-02-08|Brendan A. Smith|Nuclear propagation using nHam class.
3701188f4487dd05c5c592288674f8a015030627|2018-02-08|Alexey|Updated the build functions
780a80be25f919f14d33d0093f81f85ac867e2ab|2018-02-08|alexvakimov|Merge pull request #9 from bsmith24/devel
14cfd7629f23640b91a831d6e9f92cf50919f995|2018-02-08|Brendan A. Smith|The symmetric double well potential is now working with nHam class.
09ebe2faeaaa729e8f254d3ab5f6d75a870a365d|2018-02-08|Brendan A. Smith| Using Boost 1.60
3e32371687973917383e73ee3a47de6e49179182|2018-02-08|Brendan A. Smith|Symmetric double well potential can now be used through nHamiltonian class.
4595a2a41e8e1c9965c854dc1341af3991e077ab|2018-02-07|Brendan A. Smith|Modified Model_double_well.cpp
5315c194bfdd4b01c0cf24f02bf65ae3c7e5c5ad|2018-02-07|Brendan A. Smith|Modified double_well potential to be used w/ nHam
056e6d630ab0917397e3840537506f93161e8fa6|2018-02-07|Brendan A. Smith|Modified CMakeLists.txt
e6ca9eea72bf9edc4e641e545d42b236d9451270|2018-02-07|Brendan A. Smith|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
d6499f559ef63bfbe51027f53075c8bd15e6747a|2018-02-07|Alexey|Continue the code re-factoring toward the use of nHamiltonian class - now for the TSH. Added an example of such calculations.
bc673f74911c971a7a12f5b2cd388ef269e5fe33|2018-02-06|Brendan A. Smith|Merge branch 'devel' of https://github.com/bsmith24/libra-code into devel
a77204bf26ecbeeccf270c3e3319fa01bcc70528|2018-02-05|Alexey|Added the model Hamiltonian construction (in diabatic basis) function for the SAC model. This is the way to work with the new nHamiltonian class to which we will eventually transition
0bf7b014f7083029576a4c0ac071752a82d39f38|2018-02-05|Alexey|Exposed status_adi and status_dia to Python
35e419accb2543b2682a449ea30c378e2f353785|2018-02-06|kosukesato|added new MSSH method
ad5f75c2f2cd2572d0e789cd951ff98c85878040|2018-02-05|kosukesato|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
fa0b7bca3e7c9c04069d3e91fe39f4575f9eddbe|2018-02-05|kosukesato|updated __init__.py
50bc4f2df2a272eab04dac69b12cb860b38e33f4|2018-02-05|kosukesato|new MSSH method is added.
3edd45f9bf88dc71e17787c597e422216e43cb8b|2018-02-05|kosukesato|previous code was recovered
e542474c458e4b23b827f2401de2fdc2380c6b1a|2018-02-05|kosukesato|__init__.py is updated
93859c9f24439f75b706d3e09d38b44fd9a63ee4|2018-02-05|kosukesato|updated for install
ef5d7c1ae656baa62a4058ad848e79189aa284ac|2018-02-04|Alexey|Added another versions of the State methods - now, such that we don't need an external Nuclear object - the one is created temporarily inside of the corresponding functions
709e37b569216b8ea71528efb4a49b77f16f9499|2018-02-04|Alexey|Fixed the TSH procedure - now, the total energy is conserved
f6b634282f4e150fada4342ab2ef01f0c9b85cef|2018-02-02|Alexey|Added a function to compute the population-weighted, ensemble-averaged energies
836f3120508171b512d747474d2fc7f7e9ac21df|2018-02-02|Alexey|Added the equality checking operator - this seems to be especially important when handling lists of the objects. Also, added an assignment operator for the Electronic_Structure class
cafac8a51ed9873535cdbe859ae592a19a44c566|2018-02-02|Alexey|Added the Cd3+2 type - perhaps some other UFF types may not be properly set up, so this needs a revision
134f6aacf37e07034c154237c2c4fa885499c3eb|2018-02-01|Alexey|Renamed the 2-nd example folder to make it more informative. Added the lattice.py code that sets up and runs MD and normal mode calculations for a 1D, 2D, or 3D model. So far, the interactions are just Harmonic spring between the nearest neighbour atoms, but the interactions can be periodic in any dimension
4a78a13c60063dbaa835536f7be2fd997d28a728|2018-02-01|Alexey|Reorganized the most recent Ehrenfest NA-MD example into a separate folder
19e624c5a64292d9a3238c2f86c65c1110f6c605|2018-01-30|Alexey|Updated the autoconnect function to work with periodic cells with arbitrary periodicity
de8ad6f0ae1ad30d137d169996d76c828739db6d|2018-01-26|Alexey|Extended the autoconnect function to pericodic setup
7372e8566d7381fa6b9ce225c400e3fbbd6b8f26|2018-01-18|Alexey|Added another tutorial on Ehrenfest with the nHamiltonian class. Misc changes in the nHamiltonian code
0bd611625e07e40d64e340903b6c5d8be0f6d2fe|2018-01-17|Alexey|Added a new module to convert and transform VESTA files and print out the QE input files
ebae1833665ac60ebf89662887ac243959971b44|2018-01-11|Alexey|Added a few fixes as per comments of Dr. Haowei Peng to compile the code with g++-6.4.0
110fee3f40c3ef2c53fa3e9309622e13cda25572|2018-01-10|Alexey|Made the ivr library linked to the core Libra library
082773aeb659a41eb675a7799584e5d530f5226f|2018-01-07|Alexey|Added time-correlation functions, changed the interfaces of some of the implemented functions, introduced the convenience classes
2a90a529a4cee89a8747e2a1391b4cd1f929cb91|2018-01-05|Alexey|Further translation of the SC-IVR code from the Ananth group - implement IVR matrix elements, prefactors, the symplectic integrator, exposed the stuff to Python
eae98885a1c96b4c75d7265661bb87451cdb2e1f|2018-01-03|Alexey|Translating the SC-IVR code by the Ananth group - re-coded the IVR sampling functions to C++ and exposed to the Python. Tested that the functions do work. Not tested whether the distributions are what they are supposed to be
75f23ee5a8a5b2bf3d5d5ae3abd502b483d30258|2018-01-01|alexvakimov|Create LICENSE
21adcaac082fe5d8932bf3bad3a8457105a47e96|2017-12-19|Alexey|Make the nHamiltonian class accessible as a part of the libra_core
4bcd3f3565813d001fbc52e694541cb6b75b6e7b|2017-12-19|alexvakimov|Merge branch 'devel' into devel
405d5f622466e12a94e054b493ad4b17847d5d92|2017-12-19|alexvakimov|Merge branch 'devel' into devel
c69092ed0b7b158c20ceae3858961ca7d84cdcfc|2017-12-18|Alexey|Another simple (somewhat old) test-example
171a2d88b044964b6a476cdfef37787b095b4c3f|2017-12-18|Alexey|Finally, organized and systematized various functions related to the Hamiltonian transformation - energy derivatives, Ehrenfest energy and forces, different representations. Finalized the test with 3 model Hamiltonians. Updated the unit test
5d6c6052db0fe0cc842c5f08fbd489822de78df9|2017-12-17|Alexey|Testing the Ehrenfest dynamics in two representations
4c2c1dbc047963c2fd6e17feca546b1e4d1a75fd|2017-12-17|Alexey|Add a new MM Hamiltonian example
4f80d30862f627f2715d31c76a37af241005c1f5|2017-12-17|Alexey|Added a first version of the unittest for the new Hamiltonian class. This still needs a revisions and more tests
6db03d692730f861ba40c3dbce34f312dedf3c7d|2017-12-17|Alexey|Misc changes and trials
3698f583631869281f9f16a0377448cfc8ce9aea|2017-12-17|Alexey|Added new, much more convenient Hamiltonian class - it can now work for atomistics, model, and external Hamiltonian cases. The adiabatic and Ehrenfest energies and forces are added
2a3221798ee7de8c8d0cee1af4aca857980a7d42|2017-11-18|Alexey|Added new versions of the Ehrenfest potentials-forces, changed the names of the Python-exposed functions
ae873bd7024e2deee96e5a2951df37cad4c0d488|2017-11-17|Alexey|Revised Ehrenfest forces - now made these calculations more convenient
0771f2986d38b0177afce3e850c31a726237da42|2017-11-16|Alexey|Added set_basis_overlap_ and set_basis_overlap_derivs_ methods to the Hamiltonian_Model class, added corresponding internal pointers, generalized the eigensolver procedure so that the basis overlap is taken into account in the calculations of the adiabatic Hamiltonians and in derivative couplings - so now we can play with more complicated models, beyond those formulated in trivial basis
c1b7284e264c3f25adc4f93b23f67abb235ca070|2017-11-16|Alexey|The earlier example, now using the Chemsystem object - so now it is more compact and simpler
b6041c4dfa58f3d03e575f9bf05dc62340d7d966|2017-11-16|Alexey|Added calculation of the kinetic energy of the atomic system
cb037bbfae8b779dc1be7000d10b3f9c14e7e040|2017-11-16|Alexey|Added another overloaded version of set_ functions - now, to bind objects one by one
2bb20ef2a0df6c93c1e5c806b4fd0c23d230c004|2017-11-16|Alexey|Exposed couple of the inverse_matrix functions to Python - they now take real-valued matrices
d3a1d1ec167e05a50d0c3d9cdb71e678a75d2c09|2017-11-16|Alexey|Added another example of usage of the model Hamiltonians available in the Libra
292d21b158ac91216322cad04132a71277f330fd|2017-11-12|Alexey|Added an example showing how to perform vibrational frequencies analysis for a 1D chain of particles connected by harmonic springs. We can get the frequencies from the MD or normal modes calculations. The normal modes can also be obtained from the Hessian matrix diagonalization
1ddd9aaa8cab150708f0803f8e6efd812ef721bd|2017-11-12|Alexey|Added the computation of Hessian matrix in the 2-Body interactions. So far, only in the Harmonic bond as a prototype. Now, we also have a more flexible version of this functional - we can request to compute only the function, the function and its first order derivatives, or the function, gradients and Hessian
af8bff846871d5105afdd3fdf808f42b5697d9c0|2017-11-12|Alexey|Added the add_submatrix functions for incrementing some of the matrixes with other matrices according to the specified stencils. These functions are similar to the push_submatrix functions, except they accumulate values in all calls
35dde84022eb711971c7798c60bee352e80e1036|2017-11-12|Alexey|Added more documentation to the acf module, made the behavior of the recipe1 function more flexible
57ea0172f976471081aa917dcb161bcb709c4120|2017-11-09|Alexey|Added the Ewald-based summation of the dispersion interactions ( attractive part of the LJ potential). The unittests are almost finished - at this point it seems the calculations work quite good, just need to clean them out. Forces and stress are yet to be verified and or implemented
731376d46b67d5bf2afac0d43a54417f02fe48d5|2017-11-09|Alexey|Added the calculation of the Hessian in the Harmonic bond potential and exposed the function to Python
0f002d499f5b7a4fb30506ebcb52d03a778d218b|2017-11-09|Alexey|Fixed the ACF script for multiple atoms - now it works, but one needs to take care of the data centering
8a65ebfb091df0ebfa0395c027c45b72f88feb60|2017-11-09|Alexey|Added a new functionality in the ACF module
f231e75c9f8677707640b48481c8a2291059cce0|2017-11-07|Alexey|Revised the Ewald electrostatic sum. The Python version is added and the unittest is developed to validate the implementation and show how the function works. Note that the versions with the exclusions are not finalizied yet
ac81076b26931b6b9daa7b3e91344d9cc219eed2|2017-11-06|Alexey|Started re-write of the classical MM Hamiltonian - for ease of periodic calculations with bonded interactions, and for simpler user-friendly interface. The old methods are still here, but my hope is that the new classes will be easier to use, so that they may get more of usage later
6949501bf6e9a3355e9f8e8c105e0ca53813d1f4|2017-11-02|Alexey|Fixed a minor bug
bec09b13844da9510e34bbf856f6fe3b6be97751|2017-11-02|Alexey|Added the autoconnect module for determining the connectivities in the set of 3D points
8861be7e32c3d232e972c485285ef41dfd6d341c|2017-10-31|Alexey Akimov|Added reference data needed for overlap and kinetic integral unittests
bc9d73764acac5355c4cfec5608116b4d31b1c2c|2017-10-31|Alexey Akimov|Added generator of the test cases (compare Libra and PyQuante) and the unittest for further maintenance of Libra
5070f875ae8639e4b21f4df7fd2327155e7ffc3c|2017-10-31|Alexey Akimov|Fixed a bug in the overlap integral code - the FACTORIAL was used instead of the correct DFACTORIAL. This affected only the overlaps of the 2 d-type orbitals
a260d7512e624c183b777ec493569265499f16d4|2017-10-25|Alexey|Fixed primitive normalization problem
d2d03885ecaf500ae5f18616d12492241785e764|2017-10-23|kosukesato|velocities are initialized, again.
1627be614c31f2cc5dddeb31c2aac7faba6544d6|2017-10-23|kosukesato|syst object extracts coordinates from mol one.
65706b93e2a28240cbad46058728b824d4a5c66a|2017-10-23|kosukesato|gfsh and mssh methods are modified to compute transition probability with Boltzmann factor (as well as fssh)
1ce59ded6dbc614f197eb6bd53b9d13d896c4aaf|2017-10-23|kosukesato|updated SH methods are called
9d3c861657814d4bb95ffaf9d009e914622fc151|2017-10-23|kosukesato|fssh, gfsh, and mssh method is modified; transition probability is rescaled by Boltzmann factor
53bd747cf9ebead76e0a7dc95e86e81073935aec|2017-10-20|kosukesato|transition probabilities are averaged and printed out
324b8469360ad013f8f48b3bac35fe6f9e4c7675|2017-10-20|kosukesato|transition probability is averaged over SH trajectories and printed out
5133d16320106ecc4a6096b4feb183b478064f0f|2017-10-20|kosukesato|After thermalization, atoms are moved randomly; this is useful when we would like to average quantities (such as populations, Non-Adiabatic Couplings, etc...) over several nuclear trajectories.
2b559fb7b5acd0f5b003dfb057e808a0d22f2927|2017-10-20|kosukesato|hop probabilities can be printed in fragment-namd tutorial. Also, tsh.py is updated following Libra-X
1e2d0e9c3cff8a310539ca0d1594759c79021da6|2017-10-18|kosukesato|added reorder_matrices.py in libra_py directory. This function is called in the script of fragments-namd.
334dc50021294514b0f26f0dcf5196cf37bdc0f0|2017-10-18|kosukesato|unavoided.py is updated; this module came from unavoided_tmp.py in Libra-X.
67a37a158cd21e06ac99a377d3a631cf5afb1b45|2017-10-17|kosukesato|Matrix elements of Hvib can be printed out at each step.
e4a4597b46a029a744e067c2d35d1da9f0ef7f4c|2017-10-04|kosukesato|modifed to accord with the updated codes in Libra-X
bd7dce3e21e433dea8f8a5534fbcff35cdec7708|2017-09-28|kosukesato|modified the code computing the time-derivative of density matrix
7f6a7546816ed10df96f7cfdcb6884cb43b11e79|2017-09-28|kosukesato|added 'return g;'
f6f87558ff2318627f1ac65b0d5c3304a90f8392|2017-09-28|kosukesato|added 'return g;'
88d1eea44d03b9c056b0c04b64120fdc12e27f48|2017-09-28|kosukesato|changed to DOS(windows) format
7abf849587eaac4d888beab32e1dd5e56d119f42|2017-09-28|kosukesato|added 'return g;'
768822397bb075012d6f7d8b997bea8707aee945|2017-09-28|kosukesato|added sys.exit(0) statement when sh_method has an illegal value.
6fba427ce91598dde49873c7020a1223c82c243b|2017-09-26|kosukesato|bring back to original one
d8786f707bd6243d5e6c25bac679df4689dc5ca3|2017-09-26|kosukesato|GFSH probability can be calculated
406d82f0ae37b8f3d0d165fb312fc003819554ec|2017-09-26|kosukesato|modified the file for my server
8d4d791c560f2279e6ca097757bdaac24ab7a0df|2017-09-26|kosukesato|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code
2fa9467d1014bcaf44ab57936c3fdd2d5f9c44d9|2017-09-25|Alexey|Exposed another version of GFSH to Python
c61397812e3219d6fa647775889876a7a0799a91|2017-09-25|Alexey|Made the names of the new functions in the libdyn more consistent
1c06d0754d2691123d2ce0db2a6f292f1a33b9a9|2017-09-25|Alexey|Added a build module for creation of complex molecular structures - like QDs - and added an example of its use
ff518cae533fe8a4cc24aa520c74b8df3f90ab5a|2017-09-25|Alexey|Exposed some of the functions to work with neighbor lists and periodic systems (libcell)
b7d326c9da8496a946cdbf07887c9cbcc36bf038|2017-09-25|alexvakimov|Merge pull request #5 from bsmith24/test_branch
7bbaaaf7f386fd5ad82334b0b617597f4683cb70|2017-09-24|Brendan A. Smith|Added the symmetric double well potential to Hamiltonian_Model
63be57e71cd7b3d2010c8e3af7063a28f70dc341|2017-09-24|Brendan A. Smith|Added a test for the symmetric double well potential
c14405934f547cb1b4428cf94fe882d6095aa159|2017-09-22|Alexey|Added an example of practical simulation of NA-MD in molecular system
3b1b80a2e210867c245d47da64339fa3b14d5edc|2017-09-22|Alexey|Added new functions for the generation of ensembles of systems, thermostats, Hamiltonians
96b5885357834ce173ec1b1220f3f3caf140b2e6|2017-09-21|Alexey|Merge branch 'devel' of https://github.com/Quantum-Dynamics-Hub/libra-code into devel
0403fe7f7f5cc1fe698c2035aa906701bb6df949|2017-09-21|Alexey|Removed the reference to the tsh module in the tsh module
b00884ec400b03159545ce1ce2d892af9dc02ca2|2017-09-21|Alexey|Added some auxiliary functions for TSH dynamics
66deb3bd76c36ea23c70acc8ac8b9e41d5bbc0b3|2017-09-12|alexvakimov|Merge pull request #3 from kosukesato/master
41402c1ce03118ed7a63512c6694a106b27e0c9b|2017-09-12|kosukesato|do_collapse is set 0 (modified in linux)
d544c78d3e6209381315ef7a0d04395476cea367|2017-09-12|kosuke|do_collapse is set 0 (modified in linux)
2bfa251e093848fd18e9a9f70ebd1fbff9a302cd|2017-09-12|kosukesato|do_collapse is set 0 as default.
6bba1bb87d33108fa341110efa902b287bbcd0d7|2017-09-12|kosukesato|do_collapse is set 0 as default.
8a325b5d014c841ac86a1d0b5f3490bf79c43822|2017-09-12|kosukesato|symm is set 0 as a default value.
fdfac08ed3423247aa99a9df81ab516a6d129049|2017-09-12|kosuke|symm is set 0 as a default value.
df0649752ffb60bf460be950d41f26baa888cecc|2017-09-12|kosukesato|added the link of the Google Groups (Quantum-Dynamics-Hub)
c21b83630e602e50339c5708cb440fc9274906b9|2017-09-12|kosuke|added the link of the Google Groups (Quantum-Dynamics-Hub)
f2f45e2fe9d63b1bacf81e0d38c9bbbac23254b8|2017-09-11|kosukesato|modified run_aa_md-eht_2c.py
5cb3ae2f9465eed8a1fb698410cdc1bbacf32eca|2017-09-11|kosuke|modified run_aa_md-eht_2c.py
012e5fec850f8d4dc1fcd1a998fa60b81c081fcd|2017-09-11|kosukesato|added _build
12e368f79c906f5e66dd8088bc6b4c2318ea59f7|2017-09-11|kosuke|added _build
1cd000b2a4b8ba486e172d7a85c20ceba57affe0|2017-09-11|kosukesato|take CMakeLists.txt back to the old state
7f5d5f646998c53f3e8fa6dd73babd58e686eefd|2017-09-11|kosuke|take CMakeLists.txt back to the old state
e4bbd234cbdffaf8f860fa24cf53ae68e024c377|2017-09-11|kosukesato|modified CMakeLists.txt according to the machine
0a218607644759bc46bc74ea92836bfba55d0c63|2017-09-11|kosuke|modified CMakeLists.txt according to the machine
dd7d3d0961888e953319b95210cdc2e166542a4a|2017-09-05|Alexey|Added the complex-valued version of the Fock_to_P and compute_density_matrix functions
0ad9b3829629d263d41bbf9564c2b2de64ebc63f|2017-08-28|Alexey|...
ad58b7b4aa34a94eb364c29ef9c58e70a8408c71|2017-08-28|Alexey|Added import of the acf module in the datautils, and fixed prefix in the matrix_freqs
e420f9072a10b355e36cda211ff50f34fb4e6b8e|2017-08-28|Alexey|Fix another bug: missing conversion constants in datautils
498747a2c3bb647cf600d2635412668b1cd44674|2017-08-28|Alexey|Fixed a bug in sdm_py function
b36a9b52ab2cedb591b850ca9b125a15852d0c0a|2017-08-28|Alexey|Added a new module to libra_py - functions for analyzing time-series of data, including the computations of the frequencies for the time-series of matrices. The initial set of unittests is developed, but not for all functions yes
fbb7cee8f8acd565e2d91f693de626b2bc7dba3a|2017-08-28|Alexey|Add new methods - to compute coherence intervals and to perform DISH calculations, the functions are exposed to Python, but not yet fully tested. The general flow follows that in original Pyxaid implementation, but revised and generalized
1892031505f9baea70c89a2578c1fb1df0f4c76a|2017-08-27|Alexey|Added new methods to Electronic class - to return amplitudes and density matrix in the matrix format, to project a given state out, or to collapse the wavefunction onto a given state
cc9c29397d688b1ab9d9229454284aacd3fb7411|2017-08-27|Alexey|Extended sdm_py to take the Electronic object as an argument
b65b71b8eed1766c11e82a9caf2c9b0538e4f520|2017-08-26|alexvakimov|Update README.md
aa81efce1029d51cd84963f2a4a1fc155f68278d|2017-08-24|Alexey|Added the simplified decay of mixing algorithm of Granucci and Persico
3e35accfd6c5cf7373ae805826265c803755fe64|2017-08-24|Alexey|Fixed a bug in computing the surface hopping probabilities in FSSH (opposite sign)
a653315f976452c451716860f160a9355b5ccf95|2017-08-24|alexvakimov|Update README.md
76c9779bf047eefdebecaffa5b9ab54a02046988|2017-08-24|Alexey|Update Readme
55dd61b998f070bdcb7b7fcc994bc1289d09dc1a|2017-08-22|Alexey|Merge branch 'master' of https://github.com/Quantum-Dynamics-Hub/libra-code
caf438111d4a2cb8991c06dc4e1dd954565183ef|2017-08-22|Alexey|Convert the Fermi energy as read from the QE output from the Rydberg to Ha
c4840fd80d6606d5fdc3bb9df8677675f2e244ca|2017-08-22|alexvakimov|Update README.md
2169f0128ae9bed75d704fc4e999b3037beab9c3|2017-08-22|Alexey|Fix a bug )
e3b203dbdde7e7cc76f7a9c3bb67750b262c0ac3|2017-08-22|Alexey|Exposed Fermi populations for electrons and holes
79b9174fc8b9a850d9d39b99352ea0c81f1e5e7b|2017-08-22|Alexey|extended the travis build time limit
00a29098bc421366c329afc4c703cd7c287efadb|2017-08-22|Alexey|Ok, added LaTeX
53a07a0d2f2b0e79ce52a5486a62a42964bf6e60|2017-08-22|Alexey|Updated Doxygen to be less verbose, not to produce LaTeX and to exclude documenting external dependencies like Eigen
f48a00074bcd4cc56e37b87951a34efc04cc4ae0|2017-08-22|Alexey|Add the autodoc generation
a8a90b133c342afc87462e7f427f687627af1e78|2017-08-20|Alexey|Fixed the sign in the I_1D and pw_overlaps
b6946a199a985e22da240f2bba6aaea304e5bfb2|2017-08-20|Alexey|Fixed a bug in I_1D and made the pw_overlaps more efficient via smaller function calls
3ca844ef3d190f115a9e7dd009df78560ea4c225|2017-08-19|Alexey|Added the script for the stochastic and quasi-stochastic Hamiltonian calculations in a model system (submitted manuscript)
76c4bbc241868cd00202e5a6777a221da293dae5|2017-08-05|Alexey|Tiny bug fix
ce38df7263ba01f7c840ccd1c4152dd0c075e69b|2017-08-05|Alexey|Added a function for computing SH populations based on the states of all trajectories
80f0ec8e956ee98d73d3bd2bf5a405b0790d4649|2017-08-05|Alexey|Exposed the merge_sort function to Python
99493b77502e29737ae9dc06d85e0d753f922874|2017-08-05|Alexey|Fixed the bug Kosuke reported about the ida function
413c030644d2e8421a45001fcca54fd582a03160|2017-06-16|Alexey|Fixed bugs due to recent redefinition of the solve_eigen interface. Added Mulliken population analysis functionality and exposed it to Python
ac9143e2a6a08109583d76b18ebd7d373b3bb029|2017-06-14|Alexey|Updated the call of the eigensolver in the Fock to density matrix procedures. Also, updated some of the tutorials to properly use the eigensolver functions - the recently updated format
10ffa0b0e6faca9fd266a894a5a316a12207a443|2017-06-10|Alexey|Use vector container instead of c-type arrays in model parameters
74144330bb2d0b745c97709de1b8fb68bce2bfd3|2017-05-12|Alexey|Started adding stuff from ErgoSCF into Libra in a modular way. So far added new classes TimeMeter for timing, added ergo-defined numeric types and added libergoscf namespace - this is actually a very convenient concept when integrating other codes into Libra - just put their native datatypes into corresponding namespaces. Very importantly - the data types for storing atomic basis functions are now included, but in a more OOP and modular way. The tests (not yet true unittests) are added for new classes and their methods.
e9f16dbd71f4cf49460212bb9d6c389f615079e0|2017-05-09|Alexey|A major modification: the underlying MATRIX and CMATRIX classes are now derived from a common template class, hence they now consistently share similar algorithms and methods. The package has also been refactores, to reduce the existing dependencies and improve the modularity, so hopefully it becomes easier to use and faster to complile or re-compile. Also, I have started putting systematic unit tests at the Python level. So far, they are available for the MATRIX and CMATRIX classes and related methods, but the oder tests in the tests directory should still be working
f6729130309a7b46aa9c5366f90c753bc8af45fc|2017-04-23|Alexey|Added README
e47ea9cc128afe2f750ff98ecf7839e2651c84bd|2017-04-16|Alexey V Akimov|Added a resorting algorithm that finds the permutations that occur during unavoided crossings. The algorithm uses new functionality added to Libra matrix classes. An exemplary unittest is added to this module - this could be a good example for further unittests.
8c9d16f156bcfbed01f6195e499e45e19e9f2e40|2017-04-16|Alexey V Akimov|Added some useful methods of the CMATRIX and MATRIX classes and exposed them to PYthon. We can now: swap columns or rows, find maximal and minimal elements and their indices in rows or columns
d1e308d991096b7e14fc1400660703314c443f2f|2017-04-11|Alexey V Akimov|Merge branch 'master' of https://github.com/alexvakimov/libra-code
fe089b67d1bcf051daf9338fdbdf784baeb9c922|2017-04-11|Alexey V Akimov|Fixing and maintaining some of the ANN stuff... still need to make it more modular and compact
3e764991bf61d51999df179e22315bded0ef9c6b|2017-04-09|alexvakimov|Merge pull request #5 from WeiLiweili/master
e12ef04f3028c1f5b48d7118cdf622c1f00dcd94|2017-04-08|weili|Tutorial for calculating IR for a given MD xyz trajectory
282eca4e0fdfa45546f1ecbac6922e77e3f1d546|2017-03-25|Alexey V Akimov|Merge branch 'master' of https://github.com/alexvakimov/libra-code
71f6652a1a6e24d507f6563e6e83b917a682bad7|2017-03-25|Alexey V Akimov|Added the module for computing the ACF of time series of VECTOR objects. The example is also added to illustrate how to use the new functions
a3c79902b1be6e3ac6618f045a61995ff359fb0d|2017-02-20|alexvakimov|Create README.md
1985471176f4c670f23ef32a5d5f5df3100c6275|2017-02-19|Alexey V Akimov|Fixed indentation bug in tsh.py
44cb9ae46dc77c54a76f32abaac079314a788de7|2017-02-18|Alexey V Akimov|Added a module for fitting data to several fit functions (add more) using linear regression method. Also, an example is added showing how to use these modules
f8ec3e8a29e308d1e31bb21abaf22dbb9bd0aa4f|2017-02-18|Alexey V Akimov|Updated the tsh module of libra_py - added ID-A decoherence method and some auxiliary functions for counting SH and SE statistics
a7b1430fc967fd878a4a041a52062fe4b01a4c4c|2017-02-10|Alexey V Akimov|Added a Python-level function for reading GAMESS format basis functions. This info is represented as a dictionary. An example is added showing how to read the STO-2G basis for a few elements
d8d1a7ab918327a5289b0e76e141dcc81713fa45|2017-02-06|Alexey V Akimov|Added Pm_m_n space group
bc6319e96636294783fd02c4078f70f39e4e92fb|2017-01-08|Alexey V Akimov|Restructured the ForceField files, added some more functionality (class methods and operators), also revised the CMakeLists files and made them almost the same for Linux and Cygwin. As for right now, with the proper installation of the Cygwin (32 bit), Libra compiles with Python2.7.12 and Boost1.60.0
0f91485d33fa28606dbabc776aed793aa3e1b8f6|2017-01-05|Alexey V Akimov|Exposed copy-constructor and deep copy methods for some of the classes. Revised some of the class functions to add const specifier
07b1cb7bbefea698a3d208d682cc4fae57a66e80|2017-01-04|Alexey V Akimov|forgot to add in the previous commit
b3ae445b4b965123d81b62f6b29ebb80f7656cfa|2017-01-04|Alexey V Akimov|Adjusted many places to comply with the newer convension for the for statement, exposed some of the functions to Python - Fourier transforms, corrected signatures of the member functions of several classes - to comply with new standards, also added a code for solving system of linear equations, but can not yet compile it, added some new changes to the CMakeLists files. In all, this version is supposed to be suitable for the compilation with fresh Boost and GNU compilers - On Cygwin in compiles well with Boost 1.60.0 and with the gcc5.4.0 Not sure yet what will happed on Linux
49f117645d0ad31c2b8f695732c79b604ae87da8|2016-12-26|Alexey V Akimov|Misc changes
3205812c1a574807c7fdab1162f49477f0d4b7b9|2016-12-26|Alexey V Akimov|Added or modified the examples showing how to read wavefunctions and grids for multiple k-points
2bdd16858a711446c7509cfd9ce32a3dcdf0c69b|2016-12-26|Alexey V Akimov|Modified the types of the objects produced by the read_qe_wfc_grid function - now using VECTORList instead of a Python list of VECTORs
0244e0c3fbcd3777a875ed14cf8c268e353ccbe0|2016-12-26|Alexey V Akimov|Added C++ functions for computing the overlap matrix of the wavefunctions with multiple k-points. This is a much faster version of the corresponding Python version shown in the test-tutorial
fb77a14ddca83bfdef79c390ce164e0e4c30bfc8|2016-12-26|Alexey V Akimov|Added push_submatrix and pop_submatrix functions for CMATRIX class
050387114c2b542a9ba9d74b7fda8ab9f27a063d|2016-12-14|Alexey V Akimov|Added the test script showing how to read QE wavefunctions, grid, index, and what to do with them and what not to do (comments)
a4b46bdff6ab4378f5f7b61ab7afb48d62bd083d|2016-12-14|Alexey V Akimov|Removed the upper_tag parameters, since it is not practically used. Finished and tested the function for reading the wavefunction grid
aa0c2a15f3beece9546a85d563a53d158c9b243d|2016-12-14|Alexey V Akimov|Generalized functions for reading QE files: wavefunction info and the index, also added an optional printout of the read properties, the default values are now in accordance with the expected data type, but set to something unreasonable, so one could capture a bug if it develops. Changed the data type of the output results - returning dictionaries and lists, also some additional data elemend of these files are read. Added a function for reading wfc grids. Important change - now we are more careful with ngw - this is not necessarily the number of planewaves for each k-point, it may be different from the actual number of complex coefficients and the grid points. The correct one is igwx.
ab57756d8bc7eb258569b785d363a722c261a7ed|2016-12-08|Alexey V Akimov|Add a tutorial showing how to mix two force fields and to customize some of the parameters. A video tutorial will be released soon
9b920d330735d189a56bf758603ed91dde0b0d7d|2016-12-08|Alexey V Akimov|Fixed a bug in Angle_Record adding, also added some other features to ForceFields and atomistic (MM) Hamiltonians
5621ce1d5c569593714b2dbd854fc0ddcc4f44ad|2016-11-08|Alexey V Akimov|Added new function for info extraction
4b0a4bea1152b1ae4298839eaaed799e7dc734d1|2016-11-08|Alexey V Akimov|Return more descriptors about a read wavefunction
b455b9e2970ffdef9d778ef5dfae9e7e1af9cb16|2016-11-07|Alexey V Akimov|Some constraints on SOC
ba2bdd5e072808f74f53e06842840fb93ca94021|2016-11-07|Alexey V Akimov|Added an option to process spinor wavefunctions
f4b02f10b4b1c90fc9a32dfdc1313fa74609b883|2016-11-04|Alexey V Akimov|Adding one of the latest version of the NA-MD code with fragment states. This code may need a bit of further polishing and adaptation to a particular system, but it is deposited for completenes with my JCTC submitted manuscript
87e8fa5711b3b2099f1c3c7fe037e2b190f48b2d|2016-11-02|Alexey V Akimov|Fixed a memory management bug in wavefunction reconstruction snippet
9b2b24640bf242cc606e534c74e0fe2e16d1a7ce|2016-11-01|Alexey V Akimov|Added QE_methods module to libra_py layer. The module contains functions for processing QE output files: wavefunctions, index, grids(to be added), etc. A corresponding tutorial is added
f9bde48a6ba3fe4de830cf7c3ec0e652eed73c66|2016-10-30|Alexey V Akimov|Misc
6db930619799f82ce814b98950e31b690fc53c72|2016-10-30|Alexey V Akimov|Polished the CMakeLists files needed for installing the code on Linux and Cygwin
821e16913a7fdf31c14690a6f75e0696641031bb|2016-10-30|Alexey V Akimov|Misc files change
e8c9bd47906cc6ada4fe34e977c6aa3882444a17|2016-10-30|Alexey V Akimov|Edited all the tutorial Python files to work on Linux and Cygwin - and loading the entire libra module. but be careful -- the workability of the codes has not been really tested yet - there may be additional things to add before some of these scripts will work well
26cabe02689264a271e4a17d34f757649d3ad21e|2016-10-30|Alexey V Akimov|Adjusted CMakeLists files in the sub-directories such that we only use the Eigen distribution supplied with the Libra code
7340442ff356b0314459c51126e21a303cf6af87|2016-10-30|Alexey V Akimov|No changes
541f27590bc971f44c716aaadc14e14059ec0bc0|2016-10-30|Alexey V Akimov|Now, we'll add all the dependencies in the source - for the convenience of a user, especially when it comes to the installation. At this point, we add Eigen - version 3.2.10
245618ce152bf12bbbfb5b0472307075bb48d40d|2016-10-30|Alexey V Akimov|Made the RELEASE version to be a default build
411fbb45bdec4ad5365b8e3d4854aaded75a26ae|2016-10-30|Alexey V Akimov|Special functions update
c1f4c8633d65279816476b6831fe24e6eccf0314|2016-10-30|Alexey V Akimov|Added new functions for computing determinants and matrix inverse, but still need to test these capabilities
04d5afc6879a44c7836c323c2aee4ba51c4f7f76|2016-08-21|Alexey V Akimov|A bug of the same type in the division operation of a MATRIX object
e4cc2532c9f5bc01418d9c2c2e8822f3f4d56c6e|2016-08-20|Alexey V Akimov|Fixed a bug in MATRIX class: summation and subtraction returned a transposed matrix
29840a8eb9175b9939181e07eb068fb0b5267fc9|2016-08-05|Alexey V Akimov|Added new function that computes the superposition of the fragment MOs (as a cube file)
5f047ccb3284f4b04d9282c2219b57bfbba0a4a1|2016-07-26|Alexey V Akimov|Exported a function for computing FSSH hopping probabilities
b24f3259399f50f3ddb8dd64ecbdc2a8b9b3ffb1|2016-07-20|Alexey V Akimov|Added destructor for the listHamiltonian_QM class - now there are no memory leaks
529b8ca541c6683dc474e16dadfb2356ea36fad5|2016-07-19|Alexey V Akimov|Added new funtionality to listHamiltonian_QM
48d8148d441670064117eab7d4f4f726b03a5e0a|2016-07-19|Alexey V Akimov|Added new format for files that can be read
cd02f49052647a8aedcef59b785a76132ed01210|2016-07-17|Alexey V Akimov|Added extensive tutorials and examples (and also reference results) for running all-atomic classical MD in NVE and NVT ensembles, for clusters/molecules and for periodic solids
bfb77cc52c5cb8afe79e34cf1922fc01b4b57aa4|2016-07-17|Alexey V Akimov|Precluded use of LJ_Coulomb functional (which is only good for finite systems, at least for now) with PBC
ca1a68c9adf09739d03bbdfe68ebabc03804eb3e|2016-07-17|Alexey V Akimov|Fixed bugs with reading true PDB format. Now you can read it.
9b1eaac3575f6b663bce40c454fd6517c975a17c|2016-07-15|Alexey V Akimov|Updated the test-tutorial Python files so make them run both on Cygwin and Linux
c3e09c28a8027fb69f902b7d6dae5f83dea7597a|2016-07-15|Alexey V Akimov|Get rid of the randomness in the Electronic object setup. This helps to avoid hidden bugs associated with re-initialization of the seed of pseudorandom number generators
a7aa1f86e9444093a77cd3353c2a05c39f9a18cd|2016-07-15|Alexey V Akimov|All the initialization functions (in Chemsystem and State modules) are now explicitly dependent on the random number generator, which must be passed into them. Otherwise the creation of the Random object inside would reinitialize the random number generator seed, leading to poor sampling. Corresponding modules of the libra_py are updated. I have also added asimple test-tutorial to validate the implementation and demonstrate the usage
9d48b01eef8a78b3bbc12b837461b1bb4f567dc3|2016-07-14|Alexey V Akimov|Revised the context tutorial for reading QE-generated wavefunctions. See also the updated tutorial write up at the Libra website
b65a001fc262aec7e8bc01bae00a1411ad384e19|2016-07-14|Alexey V Akimov|Updated test-tutorials for RigidBody and Utils - now use the generic way of loading Libra modules
2016497f382a11555579545c604e01e36cbd7717|2016-07-14|Alexey V Akimov|Updated the test-tutorials for Random number generation and DATA class. A new detailed tutorial is developed for these examples - see the updated Libra website
8dc74bd0fa77d23ad0d202c0fd7cd09ae0af5d2e|2016-07-14|Alexey V Akimov|Fixed the unit conversion issue for system box (supercell translation vectors) printing in .ent and .xyz files. Now, these lattice vectors are properly converted into Angstroms from the Bohr units (internal convention)
2df4d429f23db9a1b4f82d1d1dffa6bb84dddbbe|2016-07-14|Alexey V Akimov|Fixed a bug in MATRIX: multiplication of an N x 1 matrix by a number would return a transposed matrix - 1 x N, so now it is correct - N x 1
106ecb433d4b69819299ade53ed7dc7b38efd0bd|2016-07-07|Alexey V Akimov|Exported is_ members of Atom, Group, and Molecule classes, so one could setup the corresponding variables externally
73d2b4f080458a203ca836a0648578d34704fd77|2016-07-06|Alexey V Akimov|Added a member function to Electronic class. This function propagates electronic states, but also accounts for non-orthogonality of the states via S matrix
b2846d0412e5dd547f37bafd6774f2a3252798ba|2016-07-02|Alexey V Akimov|Added functions for accessing occupations and eigenvalues (band) data in Electronic_Structure class
2a349d1bfee9bd59448607c7ac790b8f1761db59|2016-07-02|Alexey V Akimov|Added option to construct chemical systems from an .xyz format files
e1c5ced7f18566fb2c1f7033f12ec599e1b3fa75|2016-07-02|Alexey V Akimov|Added couple new functions to the listHamiltonianQM class
11ed76431fc8dc75b9543ca1cdd2e6de1f765ede|2016-07-02|Alexey V Akimov|Added new fragment rotation function
b4d7c020bef3687e4098d2622f1f783bc5e15099|2016-07-02|Alexey V Akimov|Added more general versions of the pop_matrix and push_matrix member-functions of the MATRIX class. Added the corresponding test-tutorial example. Tested the implementation - works pretty well
84334cbf451a426beaee333bb55a5d79d6834d74|2016-06-30|Alexey V Akimov|Added diabatic grid propagator for electron-nuclear dynamics. In the GWP module, added the dipole moment integral and also the function for GWP evaluation at arbitrary point
74ada9017a16af354f72829ac21cb4e5e1898abd|2016-06-29|Alexey V Akimov|Added long-wanted functions for computing S^{1/2}, S^{-1/2}, and S^{-1} of a given complex matrix S
f6aab62c895e07bf6c14d7ecc9f052b41287e2f1|2016-06-29|Alexey V Akimov|Fixed a bug: Removed Gaussian normalization factor from the Gaussian overlap
f4212f694e9deb11dbfdbdbff81bcfdb53f6fcde|2016-06-17|Alexey V Akimov|Added functions for computing overlaps of the SD functions. Also, improved the older example - now it also shows the triplet SD configurations. Some useful comments are added to the example file. Added one more example - showing that orbital mixing doesn't affect singlet-triplet coupling. Working on the breaking spatial symmetry across different spin components - but this is not yet added
64fc5db5c4e1466db9b2d0c53d18eb7f57d030c8|2016-06-16|Alexey V Akimov|Added new data type - SD (Slater Determinant) for representing N-electron wavefunctions. Added a test example demonstrating how to create SD objects from the pools of orbitals
41e567e4c18ef504448cc8c0fdc03d7449ee3bcd|2016-06-16|Alexey V Akimov|Added functions (wrappers of the Eigen utilities) for computing matrix determinants. Added a few new member functions of the CMATRIX class - to return real and imaginary components in the MATRIX format. Fixed a naming bug in special functions
85f9e0271a2b162644f7bb6099af640522c530e4|2016-06-16|Alexey V Akimov|Added overloaded MO_overlap functions - to deal with assumed-orthogonal AOs (e.g. like in semiempirical methods) and with the complex-valued MO coefficients (e.g. for the plane-wave codes)
836d65cbe65c7b7e7638261d36febe5814c3ea89|2016-06-06|Alexey V Akimov|Added (a while ago) the functions for computing integrals needed for Coherent State Dynamics in multiple dimensions
97a6ee60e96f55e40d868489b35843f27fd29f60|2016-06-06|Alexey V Akimov|Added opportunity to export the model Hamiltonians (adiabatic, diabatic, derivatives) to the matrix objects. In model Hamiltonian - can now access the basis transformation matrix
4fe7bdb1855584a2b9f13667d25dcbbd409bc1ec|2016-05-27|Alexey V Akimov|Fix a bug with effective Hamiltonian
fe36c6f6f447a5ebace81027995cc040d3ac4725|2016-05-27|Alexey V Akimov|Fix memory management issue - important when used in Python
f27808f3be1e5cdd94df0d4612faf2875e2100ef|2016-05-26|Alexey V Akimov|Fix memory leak in SCF function
b89c74497cce8bc8b083890a981fffd8e54a0094|2016-05-26|Alexey V Akimov|Added new hopping function, new hopping probabilities function (for MSSH), and the instantaneous decoherence at attempted hops (IDA) by Tretiak
3fff436c43cd7308b8e086d80f14edf1e04eb968|2016-05-26|Alexey V Akimov|Organized and revised electronic propagation schemes. Now, the theory is clear, so is the implementation (see my manuscript on the theoretical part)
fd027a7dd1d8d87a089a1cff6fe725061a48d310|2016-05-06|Alexey V Akimov|The example showing how to use the Context objects for reading the wavefunctions from Quantum Espresso (QE) calculations. We also consider transforming this information into the CMATRIX objects and using the latter for wavefunction overlaps calculations. The second example consideres the case of spin-orbit coupling (non-collinear calculations).
0689bf49eba97c853decbb2c0a6b25f1c56c0653|2016-05-06|Alexey V Akimov|Added a new test set for classical MD simulations: using the libra_py sub-module, and a more general (and faster) State object of the core modules. These examples can be used as the starting points for MD simulations of your systems - just change the system and parameters
f41b78da9dce72835b320a0198d57299f29e7470|2016-05-06|Alexey V Akimov|Added a new function to Basis_ovlp - to compute overlaps of different sets of MOs (with different AOs), corrections to the TD-SE with non-orthogonal basis, misc modifications to the OOP calculations, reorganized the Python modules from the /scripts to /libra_py directory - so now it is more convenient to use and is more consistent
95bd2e28f8e4819a6e3fe1f999e3a257b63c6946|2016-04-29|Alexey V Akimov|Added the function to determine the OOP potential parameters for a few atom types in UFF. Corrected the OOP potential in the library, so now it is consistent with the one defined in the UFF paper. Moreover, I have simplified the OOP code according to the Blondel, Karplus, J. Comput. Chem., 17, 1132 (1996)
ad4c9a6c77fc0c2639d206b8c77a14463c6d4d1b|2016-04-29|Alexey V Akimov|Printing of the atomic coordinates in .pdb and .xyz files is now in Angstroms
c22edd4f0a4315890ad423d89cf9d7896bee3ed1|2016-04-29|Alexey V Akimov|Commented excessive printout of the debug info
0706b99456274d63723ea15c6fdcd731d6b6eb0e|2016-04-29|Alexey V Akimov|Added new version of the Eigen code
98df8b9cd9044a3bf3c8097c9d75ae79f7b1871f|2016-04-25|Alexey V Akimov|Added a new test-tutorial showing how to run NVE MD with all-atomic (aa) or rigid-body (rb) descriptions
c7c34b008133f30e7babee596763967ed25ee5e2|2016-04-25|Alexey V Akimov|Added a new module to libra_py: functions for initialization and running classical MD with Rigid Bodies - in the NVE ensemble
d4e81cdb80b75ca30b7fb0b858b6dee8cb014067|2016-04-25|Alexey V Akimov|Simplified unit convesion in the Coulomb electrostatics functions. Added documentation to some of the potentials
5603dc8c635366334d0e99fd7c3e9b9929203011|2016-04-24|Alexey V Akimov|Added number of test-tutorials showing how to create (by loading data) various force fields
2e95c6b857e27066734b492077fae82a52e19af9|2016-04-24|Alexey V Akimov|Added a number of the force field loading scripts (in libra_py) and the corresponding default data
e654a5097bea9464c748077d77a6d66b9610c80c|2016-04-24|Alexey V Akimov|Reorganized file system in the libra_py tests. Added a new test - to show how to load molecules
3909e24828cfe5b1b5106aed7d83e358f22b9dec|2016-04-24|Alexey V Akimov|Added LoadUFF and LoadMolecule to the libra_py module
1bae9704b522a44b73ef15e1c7eb6c0eaef5b922|2016-04-24|Alexey V Akimov|Renamed Element class of Model_Parameters into pElement, to avoid name clashes (in Python) with Element class of chemobjects module.
f1ebb1722651b7cb9a5a3fb235c6db42e5088cc6|2016-04-24|Alexey V Akimov|Included the export of Basis_setups, Control_Parameters, and Model_Parameters into the core code, so one doesn't need to access those codes explicitly
7d90c19f210f65ccac7ecd7c9722a5f9c90a2d65|2016-04-24|Alexey V Akimov|implemented the initial idea in the TSH module - forgot to do this in the previous commit
bb9d45539a49ef171a0552296990e877558f8321|2016-04-23|Alexey V Akimov|Added the TSH module to the libra_py library
3df64974eef8751b0e4ffa7a4acf89a91874c0c2|2016-04-23|Alexey V Akimov|Added a new module to libra_py - for allocating objects for ensemble calculations. Added a corresponding test-tutorial. Added copyright info to the test1.py in the libra_py test directory
1030d31469a312438cea538c13353466a1f7037a|2016-04-10|Alexey V Akimov|Updated the test-tutorial file that shows how to use non-core (Python) scripts included in Libra
ee7e21d0332b2faa79edf15d4f1b0989edf90d6e|2016-04-10|Alexey V Akimov|Added all __init__ files and modified .gitignore file to not ignore such files any more
33aed01a72ba4650698507a007259a53fa5dcd9f|2016-04-10|Alexey V Akimov|Combined all Libra modules to produce a single one - for the convenience of use. Added new set of Libra components - Python scripts that use core Libra components. This Python snippets are sufficiently generic and will be used in several other applications. Added a custom target to CMake file, so to be able to update the Python scripts in the binary file. We now also assume more standard usage of the core Libra components - via their inclusion into PYTHONPATH and LD_LIBRARY_PATH
e39b8c7c0658904fccdbbdc2d3119d61f691fe8b|2016-04-08|Alexey V Akimov|Added test-tutorial showing how to use the libutil module - only some of the functions
65bd20d91a46da47ff35d8d1dee88f7dde02b433|2016-04-08|Alexey V Akimov|Added some fixes in the util functions and their signatures
a86cbbac960acb5e73d634024aea2032752d94cb|2016-04-08|Alexey V Akimov|Added converter between Python and C++ types lists
19849d3553141ca82f6ade4050bd980b863a353e|2016-04-08|Alexey V Akimov|Added functions for conversion between specialized C++-like data lists and Python lists
0b2bd86d93977e711c4786058bbbb722e800498f|2016-04-08|Alexey V Akimov|Added some new module - libutil - it will contain various auxiliary functions. At this point, new functions to deal with the lists of integers are included
83c22d6a8a1f28f8478d709db3f4e26c4e694bec|2016-04-08|Alexey V Akimov|Added new functions for IO operations in the libio module
be1d402550e1cfe401b95e7252ebb74f6e4f764d|2016-03-23|Alexey V Akimov|Updated the test-tutorial for the Timer object - now it is better explained. Two operation modes are considered
e0e40d67189addbffce57fbe3d22e629ea232fa2|2016-03-23|Alexey V Akimov|Updated the test-tutorial showing how to use the eigenvalue solver and how to form complex matrices from the real ones
b943ded45b7207b4c0dd100821ada3b6b0b0cc4a|2016-03-23|Alexey V Akimov|Added a new test-tutorial showing how to pop and push submatrices
294dd6b1297329f965b2524f6d9e7c36e9db0376|2016-03-23|Alexey V Akimov|Improved pop_submatrix and push_submatrix function and also exported them to the Python with two overloads - taking either Python list or vector<int> objects.
4161baedb5c522d1801b0c9d3a083fcc68dc310c|2016-03-21|Alexey V Akimov|Added better functionality for working with property trees and related data types: utilize template functions, learned how to export template functions to Python, context can now be customized with path separators other than dot (default) - this is important if the xml key/tag contains dots
a70d2607e39c584afd15282fcf9c5c657df3ed05|2016-03-11|Alexey V Akimov|Added a test-tutorial showing how to use external Hamiltonian for TSH calculations (only one trajectory so far)
44a7037ffdf70045897304ef8b1c81eac9416cb5|2016-03-11|Alexey V Akimov|Added binding of External Hamiltonian to a vibronic Hamiltonian matrix - this may be needed for some methods: for instance when we compute vibronic Hamiltonian without derivative couplings
0d68835bb9dda0e8cdc15473b77de04cd877fdff|2016-03-11|Alexey V Akimov|Added class for storing molecular orbitals in the plane wave basis
42f8fdd327cc8efe41cca73df43bc5698e56d300|2016-03-10|Alexey V Akimov|Added function for initialization of atomic momenta
a2db5b8836d2bd8a8002d4816d1e830d118b01bd|2016-03-04|Alexey V Akimov|Added a test-tutorial to show how to compute AO overlaps and moments
dd31e121abfebb50e69e92923ea824b6a669c831|2016-03-04|Alexey V Akimov|Increased the size of temporary arrays in the AO overlaps, moments, and pseudopotentials calculations
a5609de92275ffc61fb5e22d30f0569cf96f303a|2016-02-22|Alexey V Akimov|Fixed name of the included file
4e6030cf40877aa1619635b77722fe02a76c5571|2016-02-21|Alexey V Akimov|Updated an interface of the DIIS class - the update_diis_coefficients function is now private, because it should not be called outside, it is called when the objective and error matrices are added, so the extrapolation coefficients are updated right away. Also added two simple test-tutorials showing how the DIIS can be used for finding root of a 1D function
83c0252d577b209a17eb756279f277606708e964|2016-02-20|Alexey V Akimov|Actually added the DIIS functionality into the Libra code - new module libsolvers
c09058641082c4d2d3aa5d7c52ec24bc900aaea4|2016-02-17|Alexey V Akimov|Added options to compute pDOS and wavefunctions. The generated atomically-resolved pDOS can them be used to compute total pDOS for some atomic groups or for the whole system, as shown in the test_qd.py file. The results of the computations on the 0.6 nm Si(H) QD are included in this commit in the archive. The empty qd_6 folder is needed for the pdos/charge_density computations run properly, so if you don't have it - create before running calculations
d33e6559ca5f78174b88e26a443b1cbc62fce881|2016-02-17|Alexey V Akimov|Added DOS computation functions - in the qchem_tools. Also, the I placed the script for combining files produced by the compute_dos functions into necessary pDOSs - these files are now located in the /scripts directory, but they must be placed into the binary directory (or, eventually, to the installaion place). One can just use sys.path.insert function
ba6279ecb80cbd1afc760391304e6441c8606166|2016-02-17|Alexey V Akimov|Reorganized files in the test_qm directory. Also add new set of calculations - for Si quantum dots
1a1e4a216c3b6a551829f6069691d0a025e38c06|2016-02-17|Alexey V Akimov|Clean up Model parameters files, also reduce the amount of debug printing, and add some documentation
6f08fbd7842faa7c0838949c2a31c3697c409745|2016-02-17|Alexey V Akimov|Added the test showing how to compute charge density - for the azulene molecule. The corresponding HOMO and LUMO orbitals are shown
37049c8122be64742f215898126ebca68aaf0a72|2016-02-17|Alexey V Akimov|Added a new library - qchem_tools, which will contian a number of wavefunction analysis and manipulation methods. The first one, implemented in this commit, is the charge_density method - creates the charge density in the Gaussian .cube format - for easy visualization
840eabfef5ab211b1a764244e9a8efe178aa1612|2016-02-17|Alexey V Akimov|Added example showing how to compute electronic structure of simple molecules using EHT
fd556455b2ece664befb09cb915b550229f2dd68|2016-02-17|Alexey V Akimov|Fixed problem with assignment of the parameters for EHT model - now K and C constants can be set separately, if one of them is not defined - default values will be used. I have unified data types, using static arrays instead of several variables. Also, reduced the number of similar functions
dcbd79181c73690e3199f6002ce6982e70533114|2016-02-16|Alexey V Akimov|Mainenance
629511696cd6888f1190d30d01d2652c095fbd01|2016-02-15|Alexey V Akimov|Fixed the electronic propagator for the general case of the TD-SE with non-orthonormal time-dependent basis. This integrator will now produce a unitary dynamics, as it should be. Also, overloaded this procedure to take a CMATRIX coloumn-vector instead of the Electronic object
a34d8795242284bb2a8e2f85e17eff98209c32c2|2016-02-12|Alexey V Akimov|Added functions for computing potential and kinetic energy of the grid wavefunction
fcb7ffd3fd02b246936c57b57c3aa1bcedd03880|2016-02-12|Alexey V Akimov|Added one more test - decay from metastable potential
6f56e4db34b99593a8ece96ab54300eb9ba52e70|2016-02-12|Alexey V Akimov|Added excat calculations on the superexchange model - new compact script to run the calculations with different initial momenta
8f1f8dcc5d2d9985aeab81b59ecb8e140ec0c83a|2016-02-11|Alexey V Akimov|Added new model Hamiltonian - the decay from metastable cubic potential, for testing tunneling methods. Corrected documentation for DAC model Hamiltonian
51e7beb495e11a98f829589662e6999ef1559807|2016-02-05|Alexey V Akimov|Fixed memory leak in one of the electronic propagation functions
4758d106e30121b4a638a0bdab9bb588b020dba4|2016-02-02|Alexey V Akimov|Added more documentation + some little code edits
8bfc756ebb774ebc23614b930f7e529e25db3202|2016-01-31|Alexey V Akimov|Added more documentation + fixed some minor (editing) bugs
633c624aac0da0ef776cb79ddb0338d17a5a1e90|2016-01-29|Alexey V Akimov|Added more documentation: libchemobject, libdyn, libhamiltonian
b0caa8a6d49855f685f90c4f8cb5474f7da4c291|2016-01-27|Alexey V Akimov|Added some more documentation in the libchemsys
3050776bb00208ad1ffd40e24455788920a8717c|2016-01-27|Alexey V Akimov|Fixed a little bug with the namespace
5e89e8749f0f9c32b3d8317c7acb8904796fb0d0|2016-01-26|Alexey V Akimov|Added more documentation: in libdyn and libchemobjects
9c28d3fd859dfc57336acbf286a323c76244d2fb|2016-01-26|Alexey V Akimov|Fixed namespace misspeling: hopefully this fixes the bug
13030fa8db245965e0e6218305f524bb33deb65b|2016-01-24|Alexey V Akimov|Added more documentation: finished libdyn and commented a lot from libqobject - many uncommented functions there are very similar to what is already commented - complete later
c5b579eb83c990dc16d6302c2d4299dd654871f7|2016-01-22|Alexey V Akimov|Added more documentation: calculators, cell, most of the dyn subfolders. Removed some legacy code (well, still need to implement some features from it, but in a nicer way).
42e259eea9713143119bd69386c6eccab8f21c3e|2016-01-18|Alexey V Akimov|Fixed the memory leak in the non-Hermitian integration scheme. Also, started adding some Doxygen-style documentation
760d1d323e4c7ca59b54c159a21373e08a8998de|2016-01-18|Alexey V Akimov|Added Doxygen-style documentation to libcalculators and libcell
a26f0128305f33602a5247a054ce1367b1be837e|2016-01-10|Alexey V Akimov|Added some interfacing of Hamiltonian_Model
3a011fcc87442e50740265b94ad68e35b75f1817|2016-01-03|Alexey V Akimov|Exported to Python more general eigenvalue solvers - for non-Hermitian complex matrices. Also changed signtures of the propagate_electronic functions with overlap and added(exported) a new function which accounts for the time-dependence of the overap matrix (time-dependent basis) - this leads to non-Hermitian Hamiltonian, so the solution of the TD-SE does not conserve the norm, but this is okay for open systems
e7d476349c5b1e6b5f1c7ba4c1946764f27a3386|2015-12-27|Alexey V Akimov|Added new type of Hamiltonians - Hamiltonian_Extern. It is an interface for defining and updating Hamiltonian and its derivatives right in a Python script. In particular, this can be used to get Hamiltonians computed by the external programs. I have added an example on how this can be used in the Ehrenfest dynamics - see test-tutorial script test_ehrenfest_extern
301a739c7bfdff74c8adc90d980f46279d41f8ca|2015-12-27|Alexey V Akimov|Fixed some problems with generalized (nonorthogonal basis) TD-SE solver. Now it works properly. Exported integration procedures. Added some changes in CMATRIX interface functions - specifically set function. Exported additional versions of the eigenvalue solver procedure - with complex matrices and with complex overlap
8bcd7187566744310eeb859d1e39e746c2de17b1|2015-12-22|Alexey V Akimov|Fixed a little bug with dimensionality of the electronic Hamiltonian and the number of excitations included. Basically, we just remind the user to use add_excitation function
1743db11611993207be4c7edb8fde36f7038e99e|2015-12-22|Alexey V Akimov|Updated tutorial files: initialization of the atomistic QM Hamiltonian - set excitations, and the file about derivatives and derivative couplings in the AO basis
85f6dc66c4d4a3842aadaa630e4e1bfd87b60a3f|2015-12-21|Alexey V Akimov|Updated test-tutorial files for Hamiltonian_Atomistic/Hamiltonian_QM package. Also added options for EHT calculations.
0eef18fa6c89bcb772648a75e1c60d30ec90c56a|2015-12-21|Alexey V Akimov|Maintenance of the Hamiltonian_Atomistic package
65a6cf7705dbdbca75477f86704dcdf59719e4e5|2015-12-17|Alexey V Akimov|Slight tuning of the hamiltonian_mm test-tutorial files and plotting scripts
f92c5af0d55e0af6f4bfc40c4a1c953df62b3938|2015-12-15|Alexey V Akimov|Added functional (although not tested yet) EHT - derivatives are not yet fully functional too
59ab5f3d464d39837e44fc545c071d0fbbe3d7cd|2015-12-11|Alexey V. Akimov|Added set of the reference calculations for test_dyn directory
362b2e2b224477356cf54fd23dc65a73475830a7|2015-12-10|Alexey V. Akimov|Some updates of dyn and context test-tutorials directories
1361e34f60116c6ef26158c2c53af0b1375a6396|2015-11-30|Alexey V. Akimov|added reference case for atomistic NA-MD simulation of ethylene
70da84771ebbc019ef9fbb3e1f04c67bf52d1f74|2015-11-30|Alexey V. Akimov|Added numerous tests (and actually some interesting comparison) of different types of TSH-based algorithms, including FSSH, GFSH, and MSSH. Applied to 1D and 2D 2-level Rabi model with different parameters of perturbation.
0afd5c52c1b4e4ba59d0af6a1ec8e78a6e36714c|2015-11-30|Alexey V. Akimov|added scripts for nicer printing; some reference results are archived
0cb53dad5390e2d06da8fc89a16145b3a317c06a|2015-11-30|Alexey V. Akimov|added some more printing in the wfcgrid functions, added solvers based on real-valued solutions - now this works fine; added 2D 2-state Rabi model with parameters - in the model Hamiltonian library
479ebd9b9c2769855cb16e2bae0505af20d9aea9|2015-11-15|Alexey V. Akimov|Added one more test-tutorial showing the eigensolver with complex eigenvectors
4e5b72c72ad1e867fe4f0966df30793ba8afd923|2015-11-15|Alexey V. Akimov|Fixed a strange bug in wfc propagation on grid - it seems the problem was due to use of real eigenvectors in computing exp(-i*H*t) matrix using diagonalization - now we use the explicit Taylor-series based solution (only temporarily) - and it works well for Rabi oscillaiton model
acd93bbdafbbf93e646d728d8cf60497433240ca|2015-11-14|Alexey V. Akimov|Added eigensolver with complex eigenvectors
2e1d84f09c8e28af31916ce71f9fddf46663705a|2015-10-28|Alexey V. Akimov|New scripts for calculations: mostly for computing NA-MD of cis-azobenzene
6055d707d3fa1bc49f438fb9af3cc12efbdd096f|2015-10-28|Alexey V. Akimov|Added new model Hamiltonian - sin - for testing Boltzmann distribution in adiabatic basis. In atomistic Hamiltonian - made the changes to be able to combine ab initio/semiepirical and MM Hamiltonians, so we can do QM/MM - also with electronic excitations
e066056017beb094531a58fb2d235e32aa1aa808|2015-10-20|Alexey V. Akimov|Fixed azobenzene structure - removed 2 H atoms from N atoms
ff04a18ef3831ec6bde0041e2c2cacc2620e7b39|2015-10-20|Alexey V. Akimov|Commented excessive output
cc3717c4b572cb60d31460993b1015ddbfcdfc85|2015-10-20|Alexey V. Akimov|Improved computations of the lower gamma function: now it is more robust to overflow and should be more efficient, because it doesn't call so many multiplications and fabs() functions
ff1b0af92037f5cd4abdb1441145d97ccbd57727|2015-10-19|Alexey V. Akimov|Made a cleaner script to perform NA-MD dynamics with thermostat and pre-thermalization
52d1b03b7679bfa7877e03846bc79472d9f90768|2015-10-19|Alexey V. Akimov|Added a fix to velocity distribution function. Also printing some of the internal stuff from it
975083ffd4d2878fb72e0c1c514c238f886994fa|2015-10-15|Alexey V. Akimov|Added test-tutorial-computation showing FSSH calculation for the azobenzene molecule. With the scf.py script we tested the time performance. The test_tsh2.py script is used to run NA-MD - 250 fs with the 0.5 fs timestep, 1 trajectory, 2 states, using diis, for azobenzene - this takes about 1 of computational time on my laptop
8425b65ec1191a0dd2b34edae7ea0e0145c0f45a|2015-10-15|Alexey V. Akimov|Improved the efficiency of the calculations of the derivatives of the core parameters - in INDO calculations. Rational organization of computations allowed to save a lot of CPU time - over an order of magnitude. So now we can do MD of small-to-moderate molecules, like azobenzene on personal computer
3581d6ca6709dab07274b37d6976c67232b66e4e|2015-10-14|Alexey V. Akimov|Added test-tutorial for timing in atoistic FSSH method
21e38efab834598f68639fd2eb550f6ad48a5858|2015-10-14|Alexey V. Akimov|Added computations of the derivatives of the INDO parameters (precomputed functions) with respect to coordinates - such that this computation is done only once - the results are stored on disk in a binary format. So later we can just load the data we need - this gives HUGE acceleration in computations. This algorithm (writing to disk) is made the default in INDO calculations. We may need to add flexibility to this - allowing use to use some options
6ff8363b1c34cadcfa998669b3a44e6b51eab2bb|2015-10-14|Alexey V. Akimov|Computations of forces also computes energies (much less time consuming), so we don't need to call both potential and forces and can save some computations
5b6703868450debb9822d661e3f383849ff8de01|2015-10-14|Alexey V. Akimov|Computations of forces also computes energies (much less time consuming), so we don't need to call both potential and forces and can save some computations
7f5fc99ffc052f7d60a6fb676f0f9417eaf69df0|2015-10-14|Alexey V. Akimov|Added functionality to Timer class - now we can also measure the time since the latest call of the start(). The cumulative time functionality in show() is still present
315904bf57dbb5db9f10b0a9c7eaf757e91a0ea5|2015-10-14|Alexey V. Akimov|exclude binary files
c4a64adc835ab578205507ba777940f1b4fbe61a|2015-10-12|Alexey V. Akimov|Added a many-particle hopping algorithm
a88727614f8b6feaf397bcc48d39f1a34515f30d|2015-10-07|Alexey V. Akimov|Finally have managed to do the excited states dynamics on atomistic systems - ethylene - works! This is added in the test-tutorial. Also, in this commit i also add some of the output from the test NA-MD on ethylene. The code is now working, although very slow - we need some good effort to make it work much faster - there is a lot of savings we don't do yet.
6668894f35a8de78259802210ef34f521416b982|2015-10-06|Alexey V. Akimov|Added computation of excitations (we now make good use of the excitation class). We can now compute excitonic excited state energies - the total energies that correspond to excited (perturbed) occupation matrix - and hence the excited density matrix and corresponding Fock matrix. We have also added this capability into compute_adiabatic function of the Atomistic_Hamiltonian class. Moreover, we can now compute excited states forces - just using the same formulation as for ground state force, except that we use excited/perturbed density matrix everywhere. Added corresponding test-tutorials: they show how we can compute excited state energies and forces - using the interfaces of the abstract Hamiltonian. We also added the computation of these quantities for variable atom-atom distance (scan) and compared analytic and numerical forces - the agreement is reasonable, but there are of course some deviations + there is a big problem when we get to degeneracy - conical intersections. So need to think about those and fix them. Also, need to add computation of NACs.
3bce2a20414a972d3a028f848fd7670857976677|2015-10-02|Alexey V. Akimov|Added the buit-in routines to compute forces and energies, so we can do calculations for MD in a much simpler way. Added corresponding test-tutorial to show how it works. Tested vs. python implementation - works the same way
dfee7b968eccf481a4b261db0e31e555e5f551a8|2015-09-30|Alexey V. Akimov|Implement derivatives of Hao, Fao, etc, so we are in position to compute forces: Implemented and tested the test-tutorial scripts to compute derivatives numerically and analytically - figured out that contributions from the NACs are not needed in the computation of forces. Also implemented (finally) and tested the ab initio MD - it works, energy conserves. But there was a long struggle with a bug - due to stupid mistake - printing F_x instead of F_x - Now it is fixed. Also in this commit - in the assignment of the mathematical objects - return the value of the result, not the reference - thinking about not messing up with Python hidden desire to pass everything by reference. Also implemented computation of nuclear-nuclear interaction gradients. Added some more uniform set of functions for AO and PrimitiveG classes - set_position - instead of set_R.
9638eb555ccea0a6ececede9e1886bc41625675f|2015-09-24|Alexey V. Akimov|Added test-tutorial showing comupation of numerical and analytic gradients of total electronic energy - results do agree pretty-much
6f333f80b88757383f484e434f3671885da16aad|2015-09-24|Alexey V. Akimov|Added several test-tutorials: the show computation of the derivatives of core Hamiltonian and Fock matrix derivatives, then - computations of NACs and dEdR - derivatives of the eigenvalues. Eventually this comes to the computation of forces (derivative of the total electronic energy). I've also organized the computations in functions, so the internals can be hidden when a more elaborate (e.g. MD) computations are to be performed
5b3d515779ac6c1e4f616793363a4163e799d1da|2015-09-24|Alexey V. Akimov|Implemented calculation of derivatives of core Hamiltonian (dHdR), Fock matrices (dFdR) - only for INDO case, and also calculations of dSdR and derivative couplings in AO basis. Fixed minor bugs in SCF functions - now energy is returned. Added new feature for AO objects - setting the position of the orbital. Ok: now i've occasionally added my MM database - so let it be here..
7f65feb9d9869240867d4bf69c17029c78742b90|2015-09-13|Alexey V. Akimov|Fixed integration/interface of Hamiltonian_QM calculations and methods of atomistic Hamiltonian class. So now we have electronic energy levels. The only small issue is the orbital reordering in the calculations as well as sign of MOs. I have also added the corresponding test-tutorial showing setup for atomistic quantum Hamiltonian and corresponding computations of energy levels. We now need to implement forces. Also, note that in the present formulation, the excitation energies are just 1-electron orbital levels - we will need to use total energy and corresponding energies for excited density matrices & corresponding forces.
2bacdc4a25d370a44368d4fea67209f44eae1553|2015-09-12|Alexey V. Akimov|Integrated Hamiltonian_QM into Atoistic Hamiltonian computations. Still need to figure out how to use it and add some more interface functions
ed1ddfa9c67b898503a2ce19da1374974e845c2d|2015-09-12|Alexey V. Akimov|Exported a default SCF procedure (still need to work on ODA and ODA_disk). Fixed a small bug - now Hamiltonian_Fock and Hamiltonian_core are properly exported. Finally, added a test-tutorial showing how to use scf function (with default algorithm)
4c87f92475f0bbf4f8369875d2324f568aa82783|2015-09-07|Alexey V. Akimov|Clean up tests1.py script for massive calculations and also verified it worked for 3 types of thermostat
629e3146bf6db07e258af172fdf249c64a9a3f21|2015-09-07|Alexey V. Akimov|Added some more Ensemble functionality - mostly for Marcus problem, did some changes to ensure everything is consistent during the run. Was tracking down a bug - to reproduce older results, it turned out it all was about quality of Randum numbers generator in the botz() function. It was not good - now it is correct. Added corresponding changes in the test-tutorials
bc2f7da7c5cb2765e161f8154560bd78150ca44f|2015-09-04|Alexey V. Akimov|Redesigned interface of QM Hamiltonians (core and Fock), made a general Hamiltonian (core and Fock) - which takes particular choices as options. Added HF Hamiltonian (not yet tested) and INDO. Temporarily removed EHT and GEHT variants out of stage of atomistic Hamiltonians - to the qchem/main. Also changed V_AB and eri to be variables inside Model_Parameters class. Added one more version (older) of Fock_to_P - possibly will want to get rid of it later, and switch to the newer version - but for now it is just to make SCF files compile and work to some extent. Made SCF built-in functions and exported them to Python. In test-tutorials we have full SCF procedure without any acceleration algorithms - it works well and it is all explicit - step by step. Also, I have started new tutorial - to use built-in SCF function - it looks there is an internal bug/problem. Have modified call of Hamiltonians in earlier tutorials - according to redefined interface of the functions.
bffc1954a07860fc5b30c73412b1dfc8d8d318c6|2015-09-04|Alexey V. Akimov|Added test-tutorial showing how to perform QM cancluations: SCF with INDO Hamiltonian - checked for a number of small systems: BH, CO, CH4, etc.
09c4b7a4cbc15d0a369eab83610708809a02684f|2015-09-03|Alexey V. Akimov|Fixed bug with INDO core Hamiltonian - now all is computed correctly. Added new test molecues: CO, BH. Extended params_indo file to include parameters for H and Li-F elements
b4b418e888237b36741816c21dc17096bd7c0126|2015-09-03|Alexey V. Akimov|Added test-tutorials showing how to setup basis for atomistic systems and how to perform simple electronic structure calculations - in either step-by-step way or using built-in functions. Still working to figure out problems with CH4 system in INDO
f2b1309acd5194e88dd3da142f5b9e7c6d0e4059|2015-09-03|Alexey V. Akimov|Working on INDO Hamiltonian - so far tests show that all works well for C and C2 systems, but there is something else with CH4 - need to work on it more. Also fixed couple bugs in order version of procedures
ee8063a5adaea245cd7d8a84613ee9128dabebae|2015-09-03|Alexey V. Akimov|Added setups of x_exp, y_exp, z_exp variables of AOs of s and p type - for d orbitals we have superposition of cartesian ones, so there is no unique assignment. This change was important for get_integrals function in INDO would work properly
700604abd2ec4975ed8f30090d4106c0a6239324|2015-09-03|Alexey V. Akimov|Added solve_eigen function with references to MATRIX arguments, exported solve_eigen function to Python
54998c87c42dbd3f71a32b19c9bb3b83bb771f90|2015-09-03|Alexey V. Akimov|Added Elt_number handling and also Atom_Z setup in atom creation procedures
b58f8059c960fcfd3623c0b03d5116ef3d8c6d62|2015-09-01|Alexey V. Akimov|Preparing to create a test-tutorial showing how to do INDO calculations on selected molecule
26a1bcf13aedcf1b05fa891e18b52169dfb5ce04|2015-09-01|Alexey V. Akimov|Added built-in function for creation of STO-3G_DZ basis - it also sets AO to atom index mapping (and reverse)
d606cff148d886f5b4866e7ded22fbf38fe31300|2015-09-01|Alexey V. Akimov|Added more functions to deal with basis construction. Also added new test-tutorials showing how to do these operations - basis is constructed both manually and via a built-in function
ecd059cbdf32abf5fbecb26b6f7de9930b5fa5cc|2015-09-01|Alexey V. Akimov|Exported more verctor-like calsses to Python
9f867ff33910c0e45392369550ff809947817c9e|2015-08-31|Alexey V. Akimov|Added test-tutorial showing how to creat Control_Parameters, Model_Parameters, and AO objects.. this is a beginning before QM calculations
ef4dec77e1a4df00dad621e620fcb458ba6a9844|2015-08-31|Alexey V. Akimov|Changed syntaxis of add_basis_ao function and overloaded it for python::list, but this is not yet working properly - need to fix it
865a0fc05560119df9ca5cb44ecb42f8c031f7cd|2015-08-31|Alexey V. Akimov|Added more classes to export, and also defined new Pythonic vector and 2D arrays of elementary data types - this requires defining of == and != operators
5965e5eccce395c2b2258903cdddd7c3b23548dd|2015-08-31|Alexey V. Akimov|Added wrappers for map c++ classes, together with some extra functionality - son now we can export maps as dictionaries - right away. So far this is done only for some data types
7a21a7edce2ef49f44661c050a3b1c880895d724|2015-08-31|Alexey V. Akimov|Added basis functionality in the qchem library, started tutorial for that
de78a890a73001ea892407646d46d5ec5c09448e|2015-08-28|Alexey V. Akimov|Added Copyright notices and also exposed 2D arrays of mathematical data types
b12f08eda2be49bd165fbfd174115cc5e9d88f9e|2015-08-21|Alexey V. Akimov|Reorganized librar, to put all QM methods in Hamiltonian_QM rather than making distinct library for each method. In new directory added new sub-directories - sub-libraries: Control_Parameters and Model_Parameters. In the Hamiltonian_QM directory also added Electronic class and some related methods. Completed Hamiltonian_core and Hamiltonian_Fock functions for INDO/CNDO methods, also all auxiliary functions. Still need to test and find out the way to use these methods. But this is already a good setup for QM methods
dcd2e0ece833fea94f0cc1d3b23ae3319d15c2e2|2015-08-21|Alexey V. Akimov|Added several new members to Atom class: Z - atoic number, Z_eff - effective core charge, mull_charge_gross & mull_charge_net - Mulliken atomic charges
b985b9651b8eb54e6fc887299df2138b3852b6cb|2015-08-21|Alexey V. Akimov|Added new options for Mulliken atomic populations - no fragments, much more efficient. Added Mulliken.h to libcalculators.h
14f752eca2edc60e99aeee3a41e8a438a8d4fb1b|2015-08-20|Alexey V. Akimov|Added electronic_repulsion_integral, nuclear_attraction_integral, and derivative_coupling_integral families of functions to be used with PrimitiveG and AO data types
027ba0fcb37f94eede762785edb0c7f4bbd1da72|2015-08-20|Alexey V. Akimov|Added psoudopot02, transition_dipole_moment, and electronic_repulsion_integral families of functions to work with PrimitiveG and AO classes
77b48e094a6875ebab2916d579d5171df8d3a6f5|2015-08-20|Alexey V. Akimov|Added *= and /= operators to MATRIX3x3 class
0ec3dfd004356a50d7df58e2187e21fa262b8019|2015-08-19|Alexey V. Akimov|Started working on combining semiempirical methods and atomistic Hamiltonian
66054aafecf20c4430eb27abc14ed37f486444d4|2015-08-19|Alexey V. Akimov|Continue overloading molint functions for PrimitiveG and AO data types, so we can conveniently use these functions in ab initio and semiempirical functions
95132c2d9342ed2b623cc5deb050afae81ab92ac|2015-08-19|Alexey V. Akimov|Added test-tutorial showing Metropolis algorithm for sampling of initial distribution of points for MD simulations - from Boltzmann distribution. This also validates the boltz() function we will be using in other places
548abe5a85f5e925ff4988f04ecaec0f4fcf7ad0|2015-08-18|Alexey V. Akimov|Added study cases
9e128637c956aed5df4a72491858b7f8ea2d7609|2015-08-11|Alexey V. Akimov|A lot of changes: added tests-tutorials showing how to construct RB-MD algorithms that use System object and Nuclear, Electronic, and Hamiltonian classes as auxiliary - we can perform realistic MM calculaitons. Show how to set up initial momenta, angular momenta. A lot of members and functions have been exposed in the corresponding chemobjects and dyn libraries. We can also use thermostats and barostats (the latter not tested yet). Fixed units to atomic units in thermostat routines, so everything is consistent. Also added a new library - scripts - it is essentially a rather unstructured collection of hot pies - almost ready routines for specific types of calculations. So far, scripts implement RB-MD algorithms with thermostat and barostat, so all calculations can be done in few lines. We have tested that conserved quantity is conserved and that the target temperature is really maintained.
b0344383aa5db06bf732cd26d7a0e9a1ae70ff4a|2015-08-07|Alexey V. Akimov|Exposed more functions of chemsystem class, add one overload of propagate_dlml function, some fixes in MM calculations. Added test-tutorials showing how to perform MD calculations in atomistic system using combination of chemobject and Nuclear classes. Prepared the general script showing how to perform MD with rigid bodies using the chemobject objects directly. Still need to check that it runs properly, since the computation of vdw contribution appears to absent. By the way, the LJ_Coulomb many-body functional is added in Hamiltonian calculations
7f3401d258a093825aab309f9988486ddc5899a6|2015-07-31|Alexey V. Akimov|Now, finally implemented atomistic forces and potential - with MM. Added test to show md and its debug. Also included units conversion - the convention will be to use atomic units for all internal operations that compute energies and forces. Tested MD on a simple molecule - works.
d4cc4d134c694fb2198f67013bd05e2fcd4e2dd6|2015-07-31|Alexey V. Akimov|Exported more methods for System class, made calculations of energy and forces in atomistic Hamiltonian (using force fields), this is also interfaced with dynamical classes. Added new library - converters - to convert between different data types defined in other libraries. Added tutorials showing scattering calculations with Tully models and TSH mehods. Added new set of tutorials - hamiltonian_mm, showing how to set up atomistic MM calculations
8e70c20e595e66bf20e4085f958c96f23e7cdb75|2015-07-23|Alexey V. Akimov|Added setups for MM Hamiltonian - just to be able to run some actual force-field based calculations, not perfectly designed yet
2b1ce23e755f8c34d00fa8f8220b2acaaf4e3516|2015-07-23|Alexey V. Akimov|ForceField, Hamiltonian_MM, and Hamiltonian_Atomistic updates
f67017ddd3df016fb7febfd7ecf6c0cd5d03bf1c|2015-07-23|Alexey V. Akimov|Corresponding changes in CMake files
22e39e38276d9be70d1f366af6e1a1e464c5e064|2015-07-23|Alexey V. Akimov|Small changes made to libpot files, so that mmath functionality is visible, also wrapped some of the functions in the namespace. Some small changes to libcell files. Added Hamiltonian_MM class - this is what used to be Interactions class. So this class will contain classical molecular mechanics Hamiltonians of different types. The calculations on the overall atomistic system involves a list of such Hamiltonians, which can be tuned, turned off, etc.
23477b808012337ab3a86ab26d529216c4d3cd51|2015-07-22|Alexey V. Akimov|Various small features and maintenance changes
eb4e8456b0ad9ecba36e28ed80395abaaeec2882|2015-07-22|Alexey V. Akimov|Added extensive set of tutorials on chemobjects library - creating molecules manually and from files, topology, fragments, rings, and functiona group determination. Supplemented with LoadPT and LoadMolecule modules, which will be part of Libra, not just in this tutorial. Also comes with the set of test structures
aa205e6284c5cf1441b5e6408e4d593b2fc5a347|2015-07-22|Alexey V. Akimov|Reorganized Hamiltonian library. Beginning working on Atomistic Hamiltonian.
7241ad6ad7aa1c0fdcd34212493dfdeb6ac3c47f|2015-07-21|Alexey V. Akimov|Added new study case - later it will be added as test-tutorial showing Marcus-type model dynamics. At this point, this is just a base - it looks like there are some hidden bugs
98cbf823f3a5f322636c836f7581163f2455561f|2015-07-21|Alexey V. Akimov|Added more functions to ensenmble - moslty exported functions called by pointers to Hamiltonian objects. Also added couple functions to Hamiltonian class.
7eec9e40d85cd1f76df28a01f14ee20680bf1953|2015-07-19|Alexey V. Akimov|Added study case for testing new entangled-trajectories method - ESH
91cd823b4688a9f6d4cc8e68a95a90b5a4055419|2015-07-19|Alexey V. Akimov|Updated some of the TSH/Ensemble/etc. functionality, fixed couple bugs. Added tutorials showing the scattering probabilities calculation for ECWR. Also, the new entangled-trajectories method is added - only as a prototype, not sure about theory yet.
85419e9e57368c4586b03416ef1029c51a59501c|2015-07-12|Alexey V. Akimov|Fixed problem with segmentation fault on Ensemble object descturction - turned out it was due to incomplete assignment operator for Electronic class. Now this is fixed. Other functionality for adding Hamiltonians to Ensemble object is added. Test-tutorial showing scattering calculations for Tully models is added.
fc66e0fb143fa35848be380381af15b6ec10c912|2015-07-11|Alexey V. Akimov|Added Ensemble class and made corresponding adjustments in other related classes - mostly Hamiltonian.. exposed TSH functionality related to Ensemble, Electronic, and Nuclear classes. Added test-tutorials showing properties and evolution of electronic and nuclear DOFs at the single and ensembe trajectory levels.
ad5692d0455c249d281ef4ea0cf0955df0c1a326|2015-06-18|Alexey V. Akimov|Added more functions for nuclear propagation, exposed essential functions for computation of forces, potentials, hopping probabilities, etc. using Hamiltonian object. Added several test-tutorials showing how to do adiabatic classical and adiabatic Ehrenfest dynamics... TSH - will be added next
359483cdbc0e8fc9a825a317f334b06890c3a72d|2015-06-17|Alexey V. Akimov|Earlier added methods to the calculator functions
2a9ccdcc104ea1a528387c4d71ecbbe8f3962552|2015-06-17|Alexey V. Akimov|Added nuclear dynamics propagators, ensemble class and some methods, general dynamics methods - energy and force evaluation, surface hopping probabilities, and mixed propagators. Reorganized libdyn library in a more logical way - now subfolders implement only local class methods, to disentangle them from all other classes, all complex (mixed) propagation and other dynamical schemes are now placed at the top level. Added this description to the documentation
968425fc5ac677fa74746f0b6611ac7ee3f4c170|2015-06-14|Alexey V. Akimov|Extended calculators library - made functions speciafically for Python, so one could use them easily. Created test-tutorial: showing how to compute eigenvalues, eigenvectors, sorting, excitations, fermi energy, electronic energies and density matrices, including for excitations. These capabilities are already quite useful - together with overlaps library this can already be used to make simple EHT calculations in Python
d256794c3973783914024222762233b347469c4a|2015-06-14|Alexey V. Akimov|Additions into Documentation: description of new libraries and their dependencies. Most importantly - i have finally formulated clear classification of 3 types of functions - so 3 libraries: calculators, solvers(algorithms), propagators(perhaps will rename present libdyn)
3416788f4479757a3850faf30c910f05428bb662|2015-06-14|Alexey V. Akimov|Now I know how to group some classical and quantum calculations - just based on their iterative/complicated nature, also some quite general things like DIIS are gonna be here. This collection will form our solvers library. Solvers are essentially the algorithms - this is their distinction from the calculators. The latter are essentially linear procedures (hence their relative simplicity). Also, solvers are not necessarily propagators - in this their difference from libdyn library
74ccd329c3578f5686243f1c9e7bdf291044d094|2015-06-14|Alexey V. Akimov|Some file system / library architecture reorganization - now both MM and QM calculations are placed in the Hamiltonian library - this will be atomistic Hamiltonian library
4ce012eacc52fed7f1965ceba91188fea03dad6b|2015-06-14|Alexey V. Akimov|Added functions that approximate Coulomb integral calculations. In the future, I plan to add a whole host of such functions in this library, so the file is numbered - Approx1
d6d7f0ca325c256780045239807eb652e0a05b63|2015-06-14|Alexey V. Akimov|Added calculators library - various small, direct computations: essentially these are various-ourpose utility and auxiliary functions, but rather important. No tutorials yet, need more variants of the added functions, including some to expose to the Python
017cf1f7f60d59c91af597c4c5da96a51c31d378|2015-06-13|Alexey V. Akimov|Updated ctx_Control_Parameters data structure. Added corresponding tutorial - to show how to generate the XML template for creating input file
7e7e581cdf3123414c03b63ec51e1a8bf872cdc9|2015-06-12|Alexey V. Akimov|Finished basic functionality of the base context class. Extended to mathematical data types. Updated test-tutorials.
33a9771ad0eefd539477937239c4b688ca762ee8|2015-06-12|Alexey V. Akimov|Polished the context class - now we can change the name of context variables, use convenient constructors, add and get values. We can add one context into the other, nesting such objects. The basic functionality is now in the base context class, as i expected. After finishing with major functions, I'll get to derived classes. They will be merely collections of predefined variables, but also they will define additional data structures, for better interface between context and internal computationally-critical parts. Also in this commit: better test-tutorial showing how to deal with context class objects
8f70655052c31440865082e7990955968fcfada0|2015-06-12|Alexey V. Akimov|i funally have designed the way to organize context: none of the parameter files will be containing standard set of member-data. Instead, we have a common property_tree object that will hold all the information. The constructor will add necessary variables using a simple add function - one dfines the variable name. Moreover, one can call this function from the Python - to add new variables as necessary. So it is quite flexible approach. Of course not good for computations - since retrieval may be slow. For that we will be using specialized data structures. One more thought - the present solution is so general and fexible that it may be not necessary to make derived classes - one can just use the base class and add variables, as needed.
fb4e70f6bea5666fefcac4746afacd3629f92a26|2015-06-11|Alexey V. Akimov|Added io library - now can save/load xml files and also read Python objects. The save/load functions are propagated to all added classed, well, in time, so we can easily handle any complex data structures. In this commit, i also distributed the functions from Utility.cpp file to corresponding files with classes - to better adhere to new phylosophy of save/load. Added some new capabilities to chemobjects library - mainly to save/load Atom objects. Added test-tutorial showing how this works. Misc changes in Cmake files and in Documentation
56e05d8278386a4ce06f19aed89f064b9da30f8c|2015-06-09|Alexey V. Akimov|Added chemsys library, also reorganized some files into mol library. Both libraries are included into chemobjects library for computations and manipulations on chemical structures
f7a2a2320f40aee92c4017d82266eae3e54fca12|2015-06-07|Alexey V. Akimov|Added symmetry library - with the space_group class. Added test-tutorials for it. Eported more functions for the MATRIX class and added a test-tutorial for it
1a4798a610ce0d8a1e819a6f20782eec5682f80c|2015-06-06|Alexey V. Akimov|Added test-tutorials for qobjects library: tested Gaussian primitives and AO construction, also STO-3G approximation - figured out how this is exactly done: 1) we approximate normalized radial part of STO; 2) we use normalized GTOs; 3) since we use normalized GTOs, the normalization factors must be absorbed into c coefficients; 4) to scale with arbitrary STO exponent, we indeed need to multiply alphas of GTOs by square of that exponent - Pople parameters are derived for exponent = 1. Also in this commit - included qobjects library in qchem library, fixed some namespace misspelling. Adding real-purpose tutorial - tut1, which will be more like a interesting project - we want to approximate arbitrary distribution with minimal number of Gaussians - we do all calculations in Python, but using capabilities of the libra package
d4b691cdeee3e4e2fc04be2871a601c15f87c44c|2015-06-01|Alexey V. Akimov|Exported AO class, wrapped overlaps such that they can use objects of AO type as arguments. Also made the c++ (not exported) version working with AO pointers - this will be convenient for fragment-based calculations
553bc3f4a49de4fe2e3b40ad7594d2fe16be4fc0|2015-05-31|Alexey V. Akimov|Corrected convention for what norm function is for Gaussians - this is now a scalar product, not the normalization factor - all notation has become more explicit. Made corresponding corrections in overlap, moment, ERI and NAI calculations. Will need to update corresponding parts of test-tutorials. Created PrimitiveG class and exosed it to python. Overloaded gaussian_overlap function to work with arguments of PrimitiveG class. Yet need to wrap moments, PPs, etc. Created AO class, not yet exposed, functions from molint not yet wrapped - will do it next
01ba18ccf7a5ff6a598f7995295189617a84404e|2015-05-30|Alexey V. Akimov|Added computation of derivative coupling vectors on 1D and 3D gaussians. Also added computation of 1D and 3D transition dipole moments on gaussians. No test-tutorial suite so far.
64a406cd9565b5dd6c09c47b3f28819495715ecf|2015-05-28|Alexey V. Akimov|Added ERI calculations, overloaded and exposed to Python. Finally, I've got rid of Aux_Functions - now code is cleaner and better organized. Did some other misc cleaning. Added test-tutorial showing calculations of ERIs
9d4d0505c5a675feb65804ecc3f74ccb462822cb|2015-05-28|Alexey V. Akimov|Added set of overloaded NAI and KEI. Also moved the auxiliary function needed for NAI calculations in the corresponding file: want to eventually redistrbute the auxiliary functions and get rid of the Aux_Functions files. Also added an test-tutorial showing utilization of NAI and KEI functions
1980d4bb76ddd70190c52bb24f36f90f468a2733|2015-05-28|Alexey V. Akimov|Added overloaded kinetic energy integral functions, not exposed yet
f26d691fdb86a6d183ebfe186fe0b534e6bf3f28|2015-05-28|Alexey V. Akimov|Removed outdated test-tutorial script
612b689b52d1c6a6cfd40ad120229f3d72a5b1ee|2015-05-28|Alexey V. Akimov|Added calculations of derivatives of overlaps, moments and pseudopotential. Made a systematic set of overloaded functions for computing overlaps, moments, and pseudopotentials. Added extensive and detailed set of test-tutorial python and corresponding plotting scripts
d20e1515335f20003d18abc728471a61cf450892|2015-05-23|Alexey V. Akimov|Added NAI and Kinetic integral calculations, refined Overlaps calculations - now in very general form it is possible to compute 1D overlaps, tune some parameters - normalization or derivative calculations. Derivatives of the overlap matrix can now be computed. Also added test-tutorial suite, which shows that analytic derivatives conincide with the numerical derivatices. Fixed some related bugs in the SpecialFunctions module.
a1be70bbd03717978b0e55baa975b6328fbddee5|2015-05-17|Alexey V. Akimov|Prepared file system for qchem library - for quantum calculations. This is mostly a sketch. I've started with molints library - have done Overlaps, Moments, and Pseudopotential. These calculation of these functions is tested and demonstrated in the corresponding test setup
4f6b3b47a18c527ea8b3013ece83e44ce4266b67|2015-05-16|Alexey V. Akimov|Fixed exact on-grid propagators - now we have elegant and quite robust methodology for integration. However, it is applicable to diabatic representation only - well, since this is the fully quantum solution, the representation doesn't matter. Also, added the set_q method to Hamiltonian class - but it does nothing - needed only as interface, although without making it pure virtual. I also added a lot of printing functions for Wfcgrid class, started implementing absorbing boundaries and flux calculation. Finally, in this commit i've also developed more test-tutorials - haven't tested scattering probabilities, but the wavefunction propagation works pretty ok - it took some time, though.
e77482ab207af64b5db9f42be6b6d2655a2fd959|2015-05-14|Alexey V. Akimov|Added wfcgrid library - for exact solution of the TD-SE on 1D and 2D grids. Test-tutorials are also developed. However, the implementation of the propagators still needs revision - the couplings (even in diabatic representation) are not included - we need proper algorithm, at least for diabatic representation. Also in this commit - the barostat library, although without much elaborations and examples - this will be refined later
eb78ee1b705da940478b9e56af370784d2ba4869|2015-05-14|Alexey V. Akimov|Exposed some of the methods and members of the Electronic class in the libelectronic. Very importantly - figured out how to expose derived classes to Python and how to use them as arguments in functions expecting base class input. Can now do electronic propagation. Added a new model Hamiltonian - Rabi2 - just a 2-level system with constant coupling and energies. It is very interesting to see the difference in diabatic and adiabatic approaches. The test-tutorials showing electronic dynamics and related functionality is implemented. In particular see that Rabi2 model. Added rigidbody module to libdyn.
0171941f21d4f48106c49e13f449cce5c0df60fc|2015-05-13|Alexey V. Akimov|Moved ann and mmath_eigen libs into mmath, mmath_eigen is now meigen. So, at this point the structure of the mmath library is more or less complete. Of course we need more clean up, new functionality and generalizations in there, possibly noew sub-directories - sub-modules - but at least the structure is defined and hopefully will not change significantly any time soon
cbc59a2ad6329ad65bcad6dd2046151bed78e444|2015-05-13|Alexey V. Akimov|Cleaned up libdata and librandom, also implemented very useful functions for DATA class. Added tests-tutorials for random library and also for random+DATA libraries - now i can compute distributions from the randomly sampled data and plot those distributions
571e7a24f8df859a801e2adbfcf6202a08d72b33|2015-05-13|Alexey V. Akimov|Start reorganization of libraries - from the very bottom level. Now the structure is much more transparent and convenient. Also there are dynamics classes-methods added. Small changes in tests-tutorials - to accomodate changes in the code structure
3a9fdde07dfdc6c2e706805496d9b567745b2ee2|2015-05-12|Alexey V. Akimov|Cleaned up and tuned the Hamiltonian_Model class. Developed further tests and tutorial module, plotting script.
902fc5f15849bbb73e613c27c0d64856c27c1544|2015-05-11|Alexey V. Akimov|Further development of hamiltonian library: added Marcus and superexchange models. Interfaced the stand-alonge model hamiltonian functions to the Hamiltonian_Model class, also added diabatic and non-adiabatic calculations
ce4229fc98557da75cf5c75616aa3473d62a759a|2015-05-11|Alexey V. Akimov|Added merge_sort function to the core mmath library, added optional mmath_eigen library - it depends on the availability of the Eigen package; continue with hamiltonian library - made a lot of disentangling, including making Tully models available on their own, but they also will be called from the Hamiltonian_Model class-functor, developed test suite for Tully models
2f00196cb5e73b5a3619834dac3562d9f3cc4ab0|2015-05-09|Alexey V. Akimov|Added operators library and the corresponding test suite for it. Started writing some documentation about library dependencies and philosophy
e33e912eff59a6b7c16eec847cd357f2faec3586|2015-05-09|Alexey V. Akimov|Added more tests for potentials. Also the plotting script is added to visualize the computed curves
33f6b143d6b5a404b429ecb18da6db0b616b71cb|2015-05-09|Alexey V. Akimov|Changed a bit calculation of Morse potential - in a more transparent way
76a66d31624835ab6d0d95ce2e243e6bb30a19cc|2015-05-09|Alexey V. Akimov|Split the Potentials.h file into individual headers - this will reduce the compilation time and make it easier and faster to implement new features without unnecessary recompilations. I will adopt this philosophy for other packages to. Also in this commit - the initial test of the potentials suite. I've started wrapping C++ functions into corresponding Python variants - so far up to Angular potentials
f276130ccae7530abb40064cb6a1cdd3090c443e|2015-05-08|Alexey V. Akimov|actually exported some of the functions in the pot library
69532f0d5a6017bec20f0881ce447a10b1a94508|2015-05-08|Alexey V. Akimov|Added cell and pot libraries: cell - takes care of periodic calculations, including Verlet lists and neighbor lists; pot - is the library of interatormic potentials - for force fields. Also added the document that tracks dependencies of all libraries on each other
cc7476308f3f4604c7f50c72beb6d3ee5d2d7649|2015-05-06|Alexey V. Akimov|Added Rigid Body library and initialized tutorial for it. The library also demonstrates the convention that will be used for other libraries - see some points on that in the added developed documentation
c40c011c8ce418d30e5d73bce7c0b2d8b105f302|2015-05-05|Alexey V. Akimov|Exported vector types - vector<X> - and made Python converters for them. The trick was that ann library should also export mmath objects or the run-type definitions are not set. Also, I have developed some examples for showing ann library capabilities. Made a few modifications in the ann code. So far, I still need to figure out how to train ann on the simple OR pattern - so far exported functions work, but rather unpredictable - need to refine theory and systematize the exportend functions.
6fa2901b8d94d2f22472b5b54d7405ed6cda7e38|2015-05-05|Alexey V. Akimov|Added the ANN library, figured out on how to organize the code, how to expose C++ methods and classes to Python - write the export_ function first, then put it into macro. There has been a big difficulty linking dynamic libraries, so we now buld both static and dynamic libraries: static are mostly used for internal purposes, but can also be used for external builds. The dynamic libraries are the main targets - they serve as Python modules, but you can not link one dynamic library into the other, so you have to use the static libraries linked into your target dynamic one
0140c52be2b223230c2741d1f6d7682a6f235dc7|2015-04-28|Alexey V. Akimov|Exposed some of the CMATRIX methods and special functions. Added python tests for this functionality
1772427ce60d703d3b9f6d8c46daf69bedcf0924|2015-04-28|Alexey V. Akimov|Added namespace to mathmatics library, changed name convention for complex matrix class, added preprocessing options - to name the internal library either as cyg* or as lib*, depending on the flag passed to compiler, which in turn depends on the operating system. Should manually selected. Also, I added the testing-educating suite of scripts - so far only for VECTOR class - it tests the implementation and also shows how it is supposed to be used in Python
3e63bb81499b1445d953f00f96ef155b9a5d3dc9|2015-04-28|Alexey V. Akimov|Initial commit for Libra project